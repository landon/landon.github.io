/**
 * @version 1.0.0.0
 * @author Hewlett-Packard
 * @copyright Copyright Â© Hewlett-Packard 2017
 * @compiler Bridge.NET 16.0.1
 */
Bridge.assembly("Test", function ($asm, globals) {
    "use strict";

    Bridge.define("Algorithms.AssignmentEnumerator", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int64))],
        fields: {
            _vertexCount: 0,
            _f: null,
            _potSize: 0,
            _start: 0,
            _step: 0
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$List$1$System$Int64$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            ctor: function (vertexCount, f, potSize, start, step) {
                if (start === void 0) { start = 0; }
                if (step === void 0) { step = 1; }

                this.$initialize();
                this._vertexCount = vertexCount;
                this._f = f;
                this._potSize = potSize;
                this._start = start;
                this._step = step;
            }
        },
        methods: {
            getEnumerator: function () {
                return new Algorithms.AssignmentEnumerator.Enumerator(this._vertexCount, this._f, this._potSize, this._start, this._step);
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            }
        }
    });

    Bridge.define("Algorithms.AssignmentEnumerator.Enumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Collections.Generic.List$1(System.Int64))],
        fields: {
            _enumerators: null,
            _current: null,
            _step: 0
        },
        props: {
            Current: {
                get: function () {
                    return this._current;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current;
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Collections$Generic$List$1$System$Int64$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "dispose", "System$IDisposable$dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext"
        ],
        ctors: {
            ctor: function (vertexCount, f, potSize, start, step) {
                if (start === void 0) { start = 0; }
                if (step === void 0) { step = 1; }

                this.$initialize();
                this._enumerators = new (System.Collections.Generic.List$1(System.Collections.Generic.IEnumerator$1(System.Int64)))(vertexCount);
                var first = Algorithms.Int64Usage.ToInt64(System.Linq.Enumerable.range(0, f(0)));
                this._enumerators.add(function (_o1) {
                        _o1.add(first);
                        return _o1;
                    }(new (System.Collections.Generic.List$1(System.Int64))()).getEnumerator());
                for (var i = 1; i < vertexCount; i = (i + 1) | 0) {
                    this._enumerators.add(new Algorithms.SubsetEnumerator.Enumerator(potSize, f(i)));
                }

                this._step = step;

                for (var i1 = 0; i1 < start; i1 = (i1 + 1) | 0) {
                    if (!this.MoveNextInternal()) {
                        break;
                    }
                }
            }
        },
        methods: {
            dispose: function () { },
            moveNext: function () {
                for (var j = 0; j < this._step; j = (j + 1) | 0) {
                    if (!this.MoveNextInternal()) {
                        return false;
                    }
                }

                return true;
            },
            MoveNextInternal: function () {
                var $t, $t1, $t2;
                if (this._current == null) {
                    this._current = new (System.Collections.Generic.List$1(System.Int64))(this._enumerators.Count);

                    $t = Bridge.getEnumerator(this._enumerators);
                    try {
                        while ($t.moveNext()) {
                            var enumerator = $t.Current;
                            enumerator.System$Collections$IEnumerator$moveNext();
                            this._current.add(enumerator[Bridge.geti(enumerator, "System$Collections$Generic$IEnumerator$1$System$Int64$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return true;
                }

                var i = (this._enumerators.Count - 1) | 0;
                while (i >= 1) {
                    if (this._enumerators.getItem(i).System$Collections$IEnumerator$moveNext()) {
                        this._current.setItem(i, ($t1 = this._enumerators.getItem(i))[Bridge.geti($t1, "System$Collections$Generic$IEnumerator$1$System$Int64$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                        break;
                    }

                    this._enumerators.getItem(i).System$Collections$IEnumerator$reset();
                    this._enumerators.getItem(i).System$Collections$IEnumerator$moveNext();

                    this._current.setItem(i, ($t2 = this._enumerators.getItem(i))[Bridge.geti($t2, "System$Collections$Generic$IEnumerator$1$System$Int64$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);

                    i = (i - 1) | 0;
                }

                return i >= 1;
            },
            System$Collections$IEnumerator$reset: function () {
                throw new System.NotImplementedException();
            }
        }
    });

    Bridge.define("Algorithms.ChoosabilityResult", {
        props: {
            BadAssignment: null,
            Canceled: false,
            IsChoosable: {
                get: function () {
                    return this.BadAssignment == null;
                }
            }
        },
        ctors: {
            ctor: function (badAssignment, canceled) {
                if (canceled === void 0) { canceled = false; }

                this.$initialize();
                this.BadAssignment = badAssignment;
                this.Canceled = canceled;
            }
        }
    });

    Bridge.define("Algorithms.Counting", {
        statics: {
            methods: {
                BinomialCoefficient: function (n, k) {
                    if (k.lt(System.Int64(0))) {
                        return System.Int64(1);
                    }

                    var max = System.Int64.max(k, n.sub(k));
                    var min = System.Int64.min(k, n.sub(k));

                    var result = System.Int64(1);
                    while (n.gt(max)) {
                        result = result.mul(n);
                        n = n.dec();
                    }

                    while (min.gt(System.Int64(0))) {
                        result = result.div(min);

                        min = min.dec();
                    }

                    return result;
                },
                Factorial: function (n) {
                    var total = System.Int64(1);
                    for (var i = 1; i <= n; i = (i + 1) | 0) {
                        total = total.mul(System.Int64(i));
                    }

                    return total;
                }
            }
        }
    });

    Bridge.define("Algorithms.DataStructures.Bijection$2", function (D, C) { return {
        fields: {
            _f: null,
            _finverse: null
        },
        ctors: {
            init: function () {
                this._f = new (System.Collections.Generic.Dictionary$2(D,C))();
                this._finverse = new (System.Collections.Generic.Dictionary$2(C,D))();
            }
        },
        methods: {
            getItem: function (d) {
                return this._f.get(d);
            },
            setItem: function (d, value) {
                this._f.set(d, value);
                this._finverse.set(value, d);
            },
            getItem$1: function (c) {
                return this._finverse.get(c);
            },
            setItem$1: function (c, value) {
                this._f.set(value, c);
                this._finverse.set(c, value);
            },
            Apply$1: function (e) {
                return System.Linq.Enumerable.from(e).select(Bridge.fn.bind(this, $asm.$.Algorithms.DataStructures.Bijection$2.f1));
            },
            Apply: function (e) {
                return System.Linq.Enumerable.from(e).select(Bridge.fn.bind(this, $asm.$.Algorithms.DataStructures.Bijection$2.f2));
            }
        }
    }; });

    Bridge.ns("Algorithms.DataStructures.Bijection$2", $asm.$);

    Bridge.apply($asm.$.Algorithms.DataStructures.Bijection$2, {
        f1: function (d) {
            return this.getItem(d);
        },
        f2: function (c) {
            return this.getItem$1(c);
        }
    });

    Bridge.define("Algorithms.DataStructures.BijectionExtensions", {
        statics: {
            methods: {
                NumberObjects: function (T, objects) {
                    var $t;
                    var numbering = new (Algorithms.DataStructures.Bijection$2(System.Int32,T))();

                    var i = 0;
                    $t = Bridge.getEnumerator(objects, T);
                    try {
                        while ($t.moveNext()) {
                            var o = $t.Current;
                            numbering.setItem(i, o);
                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return numbering;
                }
            }
        }
    });

    Bridge.define("Algorithms.DataStructures.UnionFind$1", function (T) { return {
        methods: {
            MakeSet: function (t) {
                var node = new (Algorithms.DataStructures.UnionFind$1.Node(T))();
                node.Parent = node;
                node.Rank = 0;
                node.T = t;

                this.RootAdded(node);
                return node;
            },
            Union: function (nx, ny) {
                var xRoot = this.Find(nx);
                var yRoot = this.Find(ny);

                if (Bridge.referenceEquals(xRoot, yRoot)) {
                    return;
                }

                if (xRoot.Rank < yRoot.Rank) {
                    xRoot.Parent = yRoot;
                    this.RootRemoved(xRoot);
                } else if (xRoot.Rank > yRoot.Rank) {
                    yRoot.Parent = xRoot;
                    this.RootRemoved(yRoot);
                } else {
                    yRoot.Parent = xRoot;
                    xRoot.Rank = (xRoot.Rank + 1) | 0;
                    this.RootRemoved(yRoot);
                }
            },
            Find: function (n) {
                if (!Bridge.referenceEquals(n.Parent, n)) {
                    n.Parent = this.Find(n.Parent);
                }

                return n.Parent;
            },
            RootAdded: function (n) { },
            RootRemoved: function (n) { }
        }
    }; });

    Bridge.define("Algorithms.DataStructures.UnionFind$1.Node", function (T) { return {
        props: {
            Parent: null,
            Rank: 0,
            T: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Algorithms.FixerBreaker.Board", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Int64)],
        statics: {
            fields: {
                StorePermutationInfo: false
            },
            methods: {
                UpdateHash: function (hash, value) {
                    hash.v = System.Int64.clip32(System.Int64(Bridge.Int.mul(37, hash.v)).add(value));
                },
                ApplyMapping$1: function (mapping, stack) {
                    return Algorithms.Int64Usage.ToInt64(Algorithms.FixerBreaker.Board.ApplyMapping(mapping, Algorithms.Int64Usage.ToSet(stack)));
                },
                ApplyMapping: function (mapping, set) {
                    return System.Linq.Enumerable.from(set).select(function (c) {
                            return mapping.item2.getItem(mapping.item1.indexOf(c));
                        });
                },
                ApplyInverseMapping: function (mapping, set) {
                    return System.Linq.Enumerable.from(set).select(function (c) {
                            return mapping.item1.getItem(mapping.item2.indexOf(c));
                        });
                },
                OtherTurn: function (turn) {
                    return ((1 - turn) | 0);
                }
            }
        },
        fields: {
            Stacks: null,
            _hashCode: 0,
            PotSet: null,
            Traces: null,
            TracesForPermutationInfo: null,
            TraceChangeIndices: null,
            Template: null,
            Pot: System.Int64(0),
            ColorCount: 0,
            Turn: 0,
            N: 0,
            LastMove: null
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Int64$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            init: function () {
                this.LastMove = new Algorithms.FixerBreaker.Move();
            },
            ctor: function (stacks, pot, computeHash) {
                if (computeHash === void 0) { computeHash = true; }

                this.$initialize();
                this.Stacks = stacks;
                this.Pot = pot;
                this.Turn = Algorithms.FixerBreaker.Turn.Fixer;
                this.N = this.Stacks.Count;
                this.Template = new (Algorithms.Lazy$1(Algorithms.FixerBreaker.KnowledgeEngine.Template)).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.Board.f2));
                this.PotSet = Algorithms.Int64Usage.ToSet(this.Pot);
                this.ColorCount = this.PotSet.Count;
                this.Traces = new (System.Collections.Generic.List$1(System.Int64))(this.ColorCount);

                if (Algorithms.FixerBreaker.Board.StorePermutationInfo) {
                    this.TracesForPermutationInfo = new (System.Collections.Generic.List$1(System.Object))(this.ColorCount);
                    this.TraceChangeIndices = new (System.Collections.Generic.List$1(System.Int32))();
                }

                if (computeHash) {
                    this.ComputeHashCode();
                }
            }
        },
        methods: {
            getItem: function (x) {
                return this.Stacks.getItem(x);
            },
            ComputeHashCode: function () {
                var $t, $t1, $t2;
                this._hashCode = this.N;
                Algorithms.FixerBreaker.Board.UpdateHash(Bridge.ref(this, "_hashCode"), this.Turn);

                this.Traces.clear();
                $t = Bridge.getEnumerator(this.PotSet);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        var t = this.GetTrace(c);
                        if (t.gt(System.Int64(0))) {
                            this.Traces.add(t);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.Traces.sort();

                $t1 = Bridge.getEnumerator(this.Traces);
                try {
                    while ($t1.moveNext()) {
                        var t1 = $t1.Current;
                        Algorithms.FixerBreaker.Board.UpdateHash(Bridge.ref(this, "_hashCode"), t1);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                if (Algorithms.FixerBreaker.Board.StorePermutationInfo) {
                    this.TracesForPermutationInfo.clear();
                    this.TraceChangeIndices.clear();

                    $t2 = Bridge.getEnumerator(this.PotSet);
                    try {
                        while ($t2.moveNext()) {
                            var c1 = $t2.Current;
                            var t2 = this.GetTrace(c1);
                            if (t2.gt(System.Int64(0))) {
                                this.TracesForPermutationInfo.add({ item1: c1, item2: t2 });
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$dispose();
                        }
                    }
                    this.TracesForPermutationInfo.sort($asm.$.Algorithms.FixerBreaker.Board.f3);

                    var previousTrace = System.Int64(-1);
                    for (var i = 0; i < this.TracesForPermutationInfo.Count; i = (i + 1) | 0) {
                        var t3 = this.TracesForPermutationInfo.getItem(i);

                        if (t3.item2.ne(previousTrace)) {
                            this.TraceChangeIndices.add(i);
                            previousTrace = t3.item2;
                        }
                    }

                    this.TraceChangeIndices.add(this.TracesForPermutationInfo.Count);
                }
            },
            GetTrace: function (c) {
                var k = System.Int64(1).shl(c);
                var trace = System.Int64(0);
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    if ((this.Stacks.getItem(i).and(k)).ne(System.Int64(0))) {
                        trace = trace.or((System.Int64(1).shl(i)));
                    }
                }

                return trace;
            },
            MakeMove: function (move) {
                this.LastMove = move.$clone();

                if (move.Stack >= 0) {
                    this.Stacks.setItem(move.Stack, Algorithms.Int64Usage.FlipBits$1(this.Stacks.getItem(move.Stack), System.Int64(move.Added), move.Removed));
                }

                this.Turn = Algorithms.FixerBreaker.Board.OtherTurn(this.Turn);

                this.ComputeHashCode();
            },
            DoMoveCombination: function (moves) {
                var $t;
                $t = Bridge.getEnumerator(moves, Algorithms.FixerBreaker.Move);
                try {
                    while ($t.moveNext()) {
                        var move = $t.Current.$clone();
                        this.Stacks.setItem(move.Stack, Algorithms.Int64Usage.FlipBits$1(this.Stacks.getItem(move.Stack), System.Int64(move.Added), move.Removed));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.ComputeHashCode();
            },
            Clone: function () {
                var clone = new Algorithms.FixerBreaker.Board(System.Linq.Enumerable.from(this.Stacks).toList(System.Int64), this.Pot);
                clone.Turn = this.Turn;
                clone.LastMove = this.LastMove.$clone();
                clone._hashCode = this._hashCode;

                clone.ComputeHashCode();

                return clone;
            },
            DoMoveCombinationOnClone: function (swap) {
                var clone = new Algorithms.FixerBreaker.Board(System.Linq.Enumerable.from(this.Stacks).toList(System.Int64), this.Pot, false);
                clone.Turn = this.Turn;
                clone.LastMove = this.LastMove.$clone();

                clone.DoMoveCombination(swap);

                return clone;
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, Algorithms.FixerBreaker.Board));
            },
            Equals: function (other) {
                if (other == null) {
                    return false;
                }
                if (this.Turn !== other.Turn) {
                    return false;
                }
                if (this.N !== other.N) {
                    return false;
                }

                return System.Linq.Enumerable.from(this.Traces).sequenceEqual(other.Traces);
            },
            FindPermutation: function (other) {
                if (!Algorithms.FixerBreaker.Board.StorePermutationInfo) {
                    throw new System.Exception("not storing permutation info");
                }

                if (!System.Linq.Enumerable.from(this.TracesForPermutationInfo).select($asm.$.Algorithms.FixerBreaker.Board.f4).sequenceEqual(System.Linq.Enumerable.from(other.TracesForPermutationInfo).select($asm.$.Algorithms.FixerBreaker.Board.f4))) {
                    return null;
                }

                var mappingPairs = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < ((this.TraceChangeIndices.Count - 1) | 0); i = (i + 1) | 0) {
                    var domain = new (System.Collections.Generic.List$1(System.Int32))();
                    var codomain = new (System.Collections.Generic.List$1(System.Int32))();

                    for (var j = this.TraceChangeIndices.getItem(i); j < this.TraceChangeIndices.getItem(((i + 1) | 0)); j = (j + 1) | 0) {
                        domain.add(this.TracesForPermutationInfo.getItem(j).item1);
                        codomain.add(other.TracesForPermutationInfo.getItem(j).item1);
                    }

                    mappingPairs.add({ item1: domain, item2: codomain });
                }

                return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Object, System.Linq.Enumerable.from(mappingPairs).select($asm.$.Algorithms.FixerBreaker.Board.f5))).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.Board.f6)).firstOrDefault(Bridge.fn.bind(this, function (mapping) {
                        return this.SequenceEqualPermuted(mapping, other);
                    }), null);
            },
            FlattenMapping: function (mapping) {
                return { item1: System.Linq.Enumerable.from(mapping).selectMany($asm.$.Algorithms.FixerBreaker.Board.f7).toList(System.Int32), item2: System.Linq.Enumerable.from(mapping).selectMany($asm.$.Algorithms.FixerBreaker.Board.f8).toList(System.Int32) };
            },
            SequenceEqualPermuted: function (mapping, other) {
                for (var i = 0; i < this.Stacks.Count; i = (i + 1) | 0) {
                    var permutedStack = Algorithms.FixerBreaker.Board.ApplyMapping$1(mapping, this.Stacks.getItem(i));
                    if (permutedStack.ne(other.Stacks.getItem(i))) {
                        return false;
                    }
                }

                if (this.Turn === Algorithms.FixerBreaker.Turn.Fixer) {
                    return true;
                }

                if (this.LastMove.Stack !== other.LastMove.Stack) {
                    return false;
                }

                var ours = System.Array.init([this.LastMove.Added, this.LastMove.Removed], System.Int32);
                var theirs = function (_o2) {
                        _o2.add(other.LastMove.Added);
                        _o2.add(other.LastMove.Removed);
                        return _o2;
                    }(new (System.Collections.Generic.List$1(System.Int32))());

                return Algorithms.Utility.ListUtility.Equal(System.Int32, System.Linq.Enumerable.from(Algorithms.FixerBreaker.Board.ApplyMapping(mapping, ours)).toList(System.Int32), theirs);
            },
            getHashCode: function () {
                return this._hashCode;
            },
            getEnumerator: function () {
                return this.Stacks.getEnumerator();
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            },
            toString: function () {
                return Bridge.toArray(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.Board.f9)).join("|");
            },
            ToTex: function () {
                return Algorithms.GenericExtensions.JoinPretty(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.Board.f10), ", ");
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.Board", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.Board, {
        f1: function (s) {
            return Algorithms.Int64Usage.PopulationCount(s);
        },
        f2: function () {
            return new Algorithms.FixerBreaker.KnowledgeEngine.Template.ctor(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.Board.f1).toList(System.Int32));
        },
        f3: function (x, y) {
            return x.item2.compareTo(y.item2);
        },
        f4: function (t) {
            return t.item2;
        },
        f5: function (mp) {
            return System.Linq.Enumerable.from(Algorithms.Utility.Permutation.EnumerateAll(mp.item2.Count)).select(function (p) {
                    return { item1: mp.item1, item2: p.Apply(System.Int32, mp.item2) };
                });
        },
        f6: function (mapping) {
            return this.FlattenMapping(mapping);
        },
        f7: function (x) {
            return x.item1;
        },
        f8: function (x) {
            return x.item2;
        },
        f9: function (x) {
            return Algorithms.Int64Usage.ToSetStringSmall(x);
        },
        f10: function (stack, i) {
            return System.String.concat("$L(v_" + (((i + 1) | 0)) + ") = ", System.String.replaceAll(System.String.replaceAll(Algorithms.Int64Usage.ToSetString$2(stack), "{", "\\{"), "}", "\\}"), "$");
        }
    });

    Bridge.define("Algorithms.FixerBreaker.Chronicle.BranchGenerator", {
        statics: {
            fields: {
                PartitionsCache: null
            },
            ctors: {
                init: function () {
                    this.PartitionsCache = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))))();
                }
            },
            methods: {
                GetPartitions: function (count) {
                    var partitions = { };
                    if (!Algorithms.FixerBreaker.Chronicle.BranchGenerator.PartitionsCache.tryGetValue(count, partitions)) {
                        partitions.v = System.Linq.Enumerable.from(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumeratePartitions$1(count)).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                        Algorithms.FixerBreaker.Chronicle.BranchGenerator.PartitionsCache.set(count, partitions.v);
                    }

                    return partitions.v;
                },
                EnumerateBranches: function (board, colorPair) {
                    var S = System.Linq.Enumerable.from(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateExactlyOneIntersecters(board, colorPair)).toList(System.Int32);
                    var partitions = Algorithms.FixerBreaker.Chronicle.BranchGenerator.GetPartitions(S.Count);

                    return System.Linq.Enumerable.from(partitions).select(function (partition) {
                            return new Algorithms.FixerBreaker.Chronicle.ChronicledBranch(S, colorPair.item1, colorPair.item2, partition);
                        });
                },
                EnumeratePartitions$1: function (n) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function (n) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            partition,
                            i,
                            $t1,
                            partition1,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (n % 2 === 0) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            $t = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumeratePartitions(System.Linq.Enumerable.range(0, n).toList(System.Int32)), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                                $step = 2;
                                                continue;
                                        }
                                        case 2: {
                                            if ($t.moveNext()) {
                                                    partition = $t.Current;
                                                    $step = 3;
                                                    continue;
                                                }
                                            $step = 5;
                                            continue;
                                        }
                                        case 3: {
                                            $enumerator.current = partition;
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            $step = 2;
                                            continue;
                                        }
                                        case 5: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 6: {
                                            i = 0;
                                                $step = 7;
                                                continue;
                                        }
                                        case 7: {
                                            if ( i < n ) {
                                                    $step = 8;
                                                    continue;
                                                }
                                            $step = 14;
                                            continue;
                                        }
                                        case 8: {
                                            $t1 = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumeratePartitions(System.Linq.Enumerable.range(0, n).where(function (j) {
                                                    return j !== i;
                                                }).toList(System.Int32)), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                                $step = 9;
                                                continue;
                                        }
                                        case 9: {
                                            if ($t1.moveNext()) {
                                                    partition1 = $t1.Current;
                                                    $step = 10;
                                                    continue;
                                                }
                                            $step = 12;
                                            continue;
                                        }
                                        case 10: {
                                            partition1.insert(0, function (_o3) {
                                                        _o3.add(i);
                                                        return _o3;
                                                    }(new (System.Collections.Generic.List$1(System.Int32))()));
                                                $enumerator.current = partition1;
                                                $step = 11;
                                                return true;
                                        }
                                        case 11: {
                                            $step = 9;
                                            continue;
                                        }
                                        case 12: {
                                            $step = 13;
                                            continue;
                                        }
                                        case 13: {
                                            i = (i + 1) | 0;
                                            $step = 7;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumeratePartitions: function (indices) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function (indices) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            first,
                            i,
                            part,
                            $t,
                            partition,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (indices.Count <= 0) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 3;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            $enumerator.current = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $step = 12;
                                            continue;
                                        }
                                        case 3: {
                                            first = indices.getItem(0);
                                                indices.removeAt(0);
                                                i = 0;
                                                $step = 4;
                                                continue;
                                        }
                                        case 4: {
                                            if ( i < indices.Count ) {
                                                    $step = 5;
                                                    continue;
                                                }
                                            $step = 11;
                                            continue;
                                        }
                                        case 5: {
                                            part = function (_o4) {
                                                        _o4.add(first);
                                                        _o4.add(indices.getItem(i));
                                                        return _o4;
                                                    }(new (System.Collections.Generic.List$1(System.Int32))());
                                                indices.removeAt(i);

                                                $t = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumeratePartitions(indices), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                                $step = 6;
                                                continue;
                                        }
                                        case 6: {
                                            if ($t.moveNext()) {
                                                    partition = $t.Current;
                                                    $step = 7;
                                                    continue;
                                                }
                                            $step = 9;
                                            continue;
                                        }
                                        case 7: {
                                            partition.add(part);
                                                $enumerator.current = partition;
                                                $step = 8;
                                                return true;
                                        }
                                        case 8: {
                                            $step = 6;
                                            continue;
                                        }
                                        case 9: {
                                            indices.insert(i, part.getItem(1));
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            i = (i + 1) | 0;
                                            $step = 4;
                                            continue;
                                        }
                                        case 11: {
                                            indices.insert(0, first);
                                            $step = 12;
                                            continue;
                                        }
                                        case 12: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumerateExactlyOneIntersecters: function (board, colorPair) {
                    return System.Linq.Enumerable.range(0, board.Stacks.Count).where(function (i) {
                        return Algorithms.Int64Usage.IsBitSet(board.Stacks.getItem(i), System.Int64(colorPair.item1)) ^ Algorithms.Int64Usage.IsBitSet(board.Stacks.getItem(i), System.Int64(colorPair.item2));
                    });
                }
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.Move", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Algorithms.FixerBreaker.Move(); }
            }
        },
        fields: {
            Stack: 0,
            Added: 0,
            Removed: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1702260557, this.Stack, this.Added, this.Removed]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Algorithms.FixerBreaker.Move)) {
                    return false;
                }
                return Bridge.equals(this.Stack, o.Stack) && Bridge.equals(this.Added, o.Added) && Bridge.equals(this.Removed, o.Removed);
            },
            $clone: function (to) {
                var s = to || new Algorithms.FixerBreaker.Move();
                s.Stack = this.Stack;
                s.Added = this.Added;
                s.Removed = this.Removed;
                return s;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge", {
        props: {
            Board: null,
            Reason: null,
            Depth: 0,
            ColorPair: null,
            Swaps: null
        },
        ctors: {
            ctor: function (board, reason) {
                this.$initialize();
                this.Board = board;
                this.Reason = reason;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer", {
        $kind: "interface"
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.GraphKnowledge", {
        props: {
            Graph: null,
            LineGraph: null,
            Edges: null,
            EdgeIndices: null,
            Leaves: null,
            ConnectedOrderings: null
        },
        ctors: {
            ctor: function (g) {
                this.$initialize();
                this.Graph = g;
                this.Leaves = System.Linq.Enumerable.from(this.Graph.Vertices).where(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GraphKnowledge.f1)).toList(System.Int32);
                this.BuildLineGraph();

                this.ConnectedOrderings = new (Algorithms.Lazy$1(System.Collections.Generic.Dictionary$2(System.Object,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))).ctor(Bridge.fn.bind(this, function () {
                    var $t;
                    var co = new (System.Collections.Generic.Dictionary$2(System.Object,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))();
                    $t = Bridge.getEnumerator(this.Edges);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            co.set(e, System.Linq.Enumerable.from(this.Graph.EnumerateConnectedOrderings((function ($me, e) {
                                        return function (_o5) {
                                            _o5.add(e.item1);
                                            _o5.add(e.item2);
                                            return _o5;
                                        };
                                    })(this, e)(new (System.Collections.Generic.List$1(System.Int32))()))).toList(System.Collections.Generic.List$1(System.Int32)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return co;
                }));
            }
        },
        methods: {
            BuildLineGraph: function () {
                var adjacent = this.Graph.Adjacent;
                var n = ((System.Array.getLength(adjacent, 0) - 1) + 1) | 0;

                this.Edges = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        if (adjacent.get([i, j])) {
                            this.Edges.add({ item1: i, item2: j });
                        }
                    }
                }

                this.EdgeIndices = System.Linq.Enumerable.range(0, this.Edges.Count).toList(System.Int32);

                var meets = System.Array.create(false, null, System.Boolean, this.Edges.Count, this.Edges.Count);
                for (var i1 = 0; i1 < this.Edges.Count; i1 = (i1 + 1) | 0) {
                    for (var j1 = (i1 + 1) | 0; j1 < this.Edges.Count; j1 = (j1 + 1) | 0) {
                        if (this.Edges.getItem(i1).item1 === this.Edges.getItem(j1).item1 || this.Edges.getItem(i1).item1 === this.Edges.getItem(j1).item2 || this.Edges.getItem(i1).item2 === this.Edges.getItem(j1).item1 || this.Edges.getItem(i1).item2 === this.Edges.getItem(j1).item2) {
                            meets.set([i1, j1], (meets.set([j1, i1], true), true));
                        }
                    }
                }

                this.LineGraph = new Algorithms.Graph.ctor(meets);
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.GraphKnowledge", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GraphKnowledge, {
        f1: function (v) {
            return this.Graph.Degree(v) === 1;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.IMind", {
        $kind: "interface"
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Knowledge", {
        fields: {
            _templateLookup: null
        },
        props: {
            GraphKnowledge: null
        },
        ctors: {
            init: function () {
                this._templateLookup = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Template,Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge))();
            },
            ctor: function (g) {
                this.$initialize();
                this.GraphKnowledge = new Algorithms.FixerBreaker.KnowledgeEngine.GraphKnowledge(g);
            }
        },
        methods: {
            getItem: function (template) {
                var p = { };
                if (!this._templateLookup.tryGetValue(template, p)) {
                    p.v = new Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge(template);
                    this._templateLookup.set(template, p.v);
                }

                return p.v;
            },
            GetEdgeColorList: function (board, edgeIndex) {
                return board.getItem(this.GraphKnowledge.Edges.getItem(edgeIndex).item1).and(board.getItem(this.GraphKnowledge.Edges.getItem(edgeIndex).item2));
            },
            GetEdgeColorList$1: function (stacks, edgeIndex) {
                return stacks.getItem(this.GraphKnowledge.Edges.getItem(edgeIndex).item1).and(stacks.getItem(this.GraphKnowledge.Edges.getItem(edgeIndex).item2));
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.Tree$1", function (T) { return {
        props: {
            Parent: Bridge.getDefaultValue(T),
            This: Bridge.getDefaultValue(T),
            Children: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.This = Bridge.cast(this, T);
                this.Children = new (System.Collections.Generic.List$1(T))();
            }
        },
        methods: {
            RemoveChild: function (child) {
                this.Children.remove(child);
            },
            AddChild: function (child) {
                child.Parent = this.This;
                this.Children.add(child);
            },
            GetDepth: function () {
                var $t;
                var depth = 0;
                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        depth = Math.max(depth, ((child.GetDepth() + 1) | 0));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return depth;
            },
            Traverse: function (onDescent, maxDepth) {
                if (maxDepth === void 0) { maxDepth = 2147483647; }
                this.TraverseInternal(onDescent, maxDepth, 0);
            },
            TraverseInternal: function (onDescent, maxDepth, depth) {
                var $t;
                if (depth >= ((maxDepth - 1) | 0)) {
                    return;
                }

                $t = Bridge.getEnumerator(this.Children);
                try {
                    while ($t.moveNext()) {
                        var child = $t.Current;
                        onDescent(this.This, child);
                        child.TraverseInternal(onDescent, maxDepth, ((depth + 1) | 0));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            BuildGraph: function (maxDepth) {
                if (maxDepth === void 0) { maxDepth = 2147483647; }
                var vertices = 0;
                var vertexLookup = new (System.Collections.Generic.Dictionary$2(T,System.Int32))();
                var treeLookup = new (System.Collections.Generic.Dictionary$2(System.Int32,T))();
                var edges = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)))();

                this.Traverse(function (parent, child) {
                    var p = { };
                    if (!vertexLookup.tryGetValue(parent, p)) {
                        p.v = Bridge.identity(vertices, (vertices = (vertices + 1) | 0));
                        vertexLookup.set(parent, p.v);
                        treeLookup.set(p.v, parent);

                        edges.set(p.v, new (System.Collections.Generic.List$1(System.Int32))());
                    }

                    var c = { };
                    if (!vertexLookup.tryGetValue(child, c)) {
                        c.v = Bridge.identity(vertices, (vertices = (vertices + 1) | 0));
                        vertexLookup.set(child, c.v);
                        treeLookup.set(c.v, child);

                        edges.set(c.v, new (System.Collections.Generic.List$1(System.Int32))());
                    }

                    edges.get(p.v).add(c.v);
                }, maxDepth);

                if (vertices === 0) {
                    treeLookup.set(0, Bridge.cast(this, T));
                    edges.set(0, new (System.Collections.Generic.List$1(System.Int32))());
                }

                var edgeWeights = new (System.Collections.Generic.List$1(System.Int32))();
                for (var i = 0; i < vertices; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < vertices; j = (j + 1) | 0) {
                        if (edges.get(i).contains(j)) {
                            edgeWeights.add(1);
                        } else {
                            if (edges.get(j).contains(i)) {
                                edgeWeights.add(-1);
                            } else {
                                edgeWeights.add(0);
                            }
                        }
                    }
                }

                return { item1: new Algorithms.Graph.$ctor1(edgeWeights), item2: treeLookup };
            }
        }
    }; });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge", {
        statics: {
            fields: {
                Infinity: 0
            },
            ctors: {
                init: function () {
                    this.Infinity = 2147483647;
                }
            },
            methods: {
                Exists: function (o) {
                    return o != null;
                },
                Naturals: function () {
                    return System.Linq.Enumerable.range(0, Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Infinity);
                },
                Interval: function (first, last) {
                    return System.Linq.Enumerable.range(first, ((((last - first) | 0) + 1) | 0));
                },
                TryParseInt: function (s) {
                    var x = { };
                    if (System.Int32.tryParse(s, x)) {
                        return x.v;
                    }

                    return null;
                },
                TryParseDouble: function (s) {
                    var x = { };
                    if (System.Double.tryParse(s, null, x)) {
                        return x.v;
                    }

                    return null;
                },
                DegreeCondition: function (g, b, missingEdges) {
                    if (missingEdges === void 0) { missingEdges = null; }
                    return Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition$1(g, b.Stacks, b.Pot);
                },
                DegreeCondition$1: function (g, stacks, pot, missingEdges) {
                    var $t;
                    if (missingEdges === void 0) { missingEdges = null; }
                    if (Bridge.staticEquals(missingEdges, null)) {
                        missingEdges = $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.f1;
                    }

                    var colorGraphs = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(stacks, pot);

                    $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, g.Vertices), System.Collections.Generic.List$1(System.Int32));
                    try {
                        while ($t.moveNext()) {
                            var X = $t.Current;
                            var e = (g.EdgesOn(X) - missingEdges(X)) | 0;

                            if (e <= 0) {
                                continue;
                            }

                            var value = System.Linq.Enumerable.from(colorGraphs).sum((function ($me, X) {
                                    return function (cg) {
                                        return ((Bridge.Int.div(Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, cg, X), 2)) | 0);
                                    };
                                })(this, X));

                            if (value < e) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return true;
                },
                GetColorGraphs: function (stacks, pot) {
                    return System.Linq.Enumerable.from(Algorithms.Int64Usage.EnumerateBits(pot)).select(function (alpha) {
                            return System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.G_alpha(alpha, stacks)).toList(System.Int32);
                        }).toList(System.Collections.Generic.List$1(System.Int32));
                },
                G_alpha: function (alpha, stacks) {
                    return Algorithms.GenericExtensions.IndicesWhere(System.Int64, stacks, function (stack) {
                        return Algorithms.Int64Usage.IsBitSet(stack, System.Int64(alpha));
                    });
                },
                d_H: function (alpha, stacksInH) {
                    return System.Linq.Enumerable.from(stacksInH).count(function (stack) {
                            return Algorithms.Int64Usage.IsBitSet(stack, System.Int64(alpha));
                        });
                },
                Surplus: function (board, g) {
                    return ((System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(board.Stacks, board.Pot)).sum($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.f2) - g.E) | 0);
                },
                Surplus$1: function (board, g, vertices) {
                    return ((System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(board.Stacks, board.Pot)).sum(function (cg) {
                            return ((Bridge.Int.div(Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, cg, vertices), 2)) | 0);
                        }) - g.EdgesOn(vertices)) | 0);
                },
                ToConsole: function (s) { },
                MapMove: function (f, move) {
                    var $t;
                    var mappedMove = ($t = new Algorithms.FixerBreaker.Move(), $t.Stack = move.Stack, $t);
                    var m = System.Linq.Enumerable.from(Algorithms.FixerBreaker.Board.ApplyMapping(f, System.Array.init([move.Added, move.Removed], System.Int32))).toList(System.Int32);

                    mappedMove.Added = m.getItem(0);
                    mappedMove.Removed = m.getItem(1);

                    return mappedMove.$clone();
                }
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge, {
        f1: function (Y) {
            return 0;
        },
        f2: function (cg) {
            return ((Bridge.Int.div(cg.Count, 2)) | 0);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Mind", {
        statics: {
            fields: {
                TreeNodeNumber: 0
            },
            ctors: {
                init: function () {
                    this.TreeNodeNumber = 1;
                }
            }
        },
        props: {
            StopAnalysisOnBreakerWin: false,
            FindCleanestWin: false,
            NearlyColorableOnly: false,
            SuperabundantOnly: false,
            MinPot: 0,
            MaxPot: 0,
            BreakerWonBoard: null,
            FixerWonAllNearlyColorableBoards: false,
            TotalPositions: 0,
            BoardAnalysisPipeline: null,
            Knowledge: null
        },
        ctors: {
            ctor: function (g) {
                this.$initialize();
                this.FindCleanestWin = true;
                this.SuperabundantOnly = true;
                this.NearlyColorableOnly = false;
                this.MaxPot = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Infinity;
                this.Knowledge = new Algorithms.FixerBreaker.KnowledgeEngine.Knowledge(g);

                this.BoardAnalysisPipeline = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer))();
                this.BoardAnalysisPipeline.add(new Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer());
            }
        },
        methods: {
            AddBoardAnalyzer: function (analyzer) {
                this.BoardAnalysisPipeline.add(analyzer);
            },
            Analyze: function (template, progress) {
                var $t, $t1;
                if (progress === void 0) { progress = null; }
                this.TotalPositions = 0;
                this.FixerWonAllNearlyColorableBoards = true;

                this.EnsureSwapAnalyzerExistence();

                var minimumColorCount = Math.max(this.MinPot, System.Linq.Enumerable.from(template.Sizes).max());
                var maximumColorCount = Math.min(this.MaxPot, System.Linq.Enumerable.from(template.Sizes).sum());

                var foundAtLeastOneBoard = false;
                $t = Bridge.getEnumerator(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Interval(minimumColorCount, maximumColorCount), System.Int32);
                try {
                    while ($t.moveNext()) {
                        var colorCount = $t.Current;
                        if (!Bridge.staticEquals(progress, null)) {
                            progress(($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t1.IsInitialThought = true, $t1));
                        }

                        var boards = System.Linq.Enumerable.from(this.GenerateAllBoards(template, colorCount, progress)).toList(Algorithms.FixerBreaker.Board);
                        if (foundAtLeastOneBoard && boards.Count <= 0) {
                            break;
                        }

                        this.TotalPositions = (this.TotalPositions + boards.Count) | 0;
                        foundAtLeastOneBoard = true;

                        var breakerWin = !this.Analyze$1(boards, progress);
                        if (breakerWin && this.StopAnalysisOnBreakerWin) {
                            return false;
                        }

                        this.Knowledge.getItem(template).Promote(colorCount);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return System.Linq.Enumerable.from(this.Knowledge.getItem(template).LostBoards).count() <= 0;
            },
            Analyze$1: function (boards, progress) {
                var $t, $t1, $t2;
                if (progress === void 0) { progress = null; }
                var winLength = 0;

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.BoardAnalysisPipeline).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f1));
                try {
                    while ($t.moveNext()) {
                        var analyzer = $t.Current;
                        var chunk = { v : new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.Board))() };
                        Algorithms.GenericExtensions.RemoveAll(Algorithms.FixerBreaker.Board, boards, (function ($me, analyzer) {
                            return Bridge.fn.bind($me, function (b) {
                                return analyzer.Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze(this.Knowledge, b);
                            });
                        })(this, analyzer), (function ($me, chunk) {
                            return function (removed) {
                                var $t1;
                                chunk.v.add(removed);

                                if (chunk.v.Count > 100) {
                                    if (!Bridge.staticEquals(progress, null)) {
                                        progress(($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t1.BoardsRemoved = System.Linq.Enumerable.from(chunk.v).toList(Algorithms.FixerBreaker.Board), $t1.WinLength = winLength, $t1));
                                    }

                                    chunk.v.clear();
                                }
                            };
                        })(this, chunk));

                        if (chunk.v.Count > 0) {
                            if (!Bridge.staticEquals(progress, null)) {
                                progress(($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t1.BoardsRemoved = System.Linq.Enumerable.from(chunk.v).toList(Algorithms.FixerBreaker.Board), $t1.WinLength = winLength, $t1));
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                var knowledgeDependentAnalyzers = System.Linq.Enumerable.from(this.BoardAnalysisPipeline).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f2).toList(Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer);

                while (boards.Count > 0) {
                    winLength = (winLength + 1) | 0;

                    var count = boards.Count;

                    $t1 = Bridge.getEnumerator(knowledgeDependentAnalyzers);
                    try {
                        while ($t1.moveNext()) {
                            var analyzer1 = $t1.Current;
                            Algorithms.GenericExtensions.RemoveAll(Algorithms.FixerBreaker.Board, boards, Bridge.fn.bind(this, function (b) {
                                return analyzer1.Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze(this.Knowledge, b);
                            }), function (removed) {
                                var $t2;
                                if (!Bridge.staticEquals(progress, null)) {
                                    progress(($t2 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t2.BoardsRemoved = Algorithms.GenericExtensions.EnList(Algorithms.FixerBreaker.Board, removed), $t2.WinLength = winLength, $t2));
                                }
                            });
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    if (boards.Count === count) {
                        $t2 = Bridge.getEnumerator(boards);
                        try {
                            while ($t2.moveNext()) {
                                var b = $t2.Current;
                                this.Knowledge.getItem(b.Template.Value).getItem(b.ColorCount).AddLoss(b);
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$dispose();
                            }
                        }
                        var g = { v : this.Knowledge.GraphKnowledge.Graph };

                        var nearlyColorable = System.Linq.Enumerable.range(0, this.Knowledge.GraphKnowledge.LineGraph.N).all(Bridge.fn.bind(this, function (e) {
                            return System.Linq.Enumerable.from(boards).any(Bridge.fn.bind(this, function (b1) {
                                    return Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, b1, e);
                                }));
                        }));
                        if (nearlyColorable) {
                            this.FixerWonAllNearlyColorableBoards = false;
                            this.BreakerWonBoard = System.Linq.Enumerable.from(boards).firstOrDefault((function ($me, g) {
                                    return Bridge.fn.bind($me, function (b1) {
                                        return Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition(g.v, b1) && Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, b1, 0);
                                    });
                                })(this, g), null);
                            if (this.BreakerWonBoard == null) {
                                this.BreakerWonBoard = System.Linq.Enumerable.from(boards).first(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f3));
                            }
                        }

                        return false;
                    }
                }

                return true;
            },
            EnsureSwapAnalyzerExistence: function () {
                if (!System.Linq.Enumerable.from(this.BoardAnalysisPipeline).any($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f4)) {
                    this.BoardAnalysisPipeline.add(new Algorithms.FixerBreaker.KnowledgeEngine.SwapAnalyzer(this.FindCleanestWin, false));
                }
            },
            GenerateAllBoards: function (template, colorCount, progress) {
                var $t, $t1;
                if (progress === void 0) { progress = null; }
                var boards = new (System.Collections.Generic.HashSet$1(Algorithms.FixerBreaker.Board)).ctor();

                var vertices = System.Linq.Enumerable.range(0, template.Sizes.Count).toList(System.Int32);
                var potSet = System.Linq.Enumerable.range(0, colorCount).toList(System.Int32);
                var pot = Algorithms.Int64Usage.ToInt64(potSet);

                var fix = System.Linq.Enumerable.from(vertices).orderBy(function (v) {
                        return Math.abs(((template.Sizes.getItem(v) - ((Bridge.Int.div(colorCount, 2)) | 0)) | 0));
                    }).first();

                var boardsChunk = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.Board))();
                $t = Bridge.getEnumerator(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(vertices).select(function (v) {
                        if (v === fix) {
                            return Algorithms.GenericExtensions.EnList(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(potSet).take(template.Sizes.getItem(v)).toList(System.Int32));
                        }

                        return Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, potSet, template.Sizes.getItem(v));
                    })), System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int32)));
                try {
                    while ($t.moveNext()) {
                        var assignmentSets = $t.Current;
                        var sets = System.Linq.Enumerable.from(assignmentSets).toList(System.Collections.Generic.List$1(System.Int32));
                        var totalColors = System.Linq.Enumerable.from(sets).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f5).distinct().count();
                        if (totalColors < colorCount) {
                            continue;
                        }

                        var stacks = System.Linq.Enumerable.from(sets).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f6).toList(System.Int64);

                        var superAbundant = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition$1(this.Knowledge.GraphKnowledge.Graph, stacks, pot);
                        var board = new Algorithms.FixerBreaker.Board(stacks, pot);

                        if (this.SuperabundantOnly && !superAbundant) {
                            continue;
                        }

                        boards.add(board);
                        boardsChunk.add(board);

                        if (boardsChunk.Count > 100) {
                            if (!Bridge.staticEquals(progress, null)) {
                                progress(($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t1.BoardsAdded = System.Linq.Enumerable.from(boardsChunk).toList(Algorithms.FixerBreaker.Board), $t1.WinLength = -1, $t1));
                            }

                            boardsChunk.clear();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                if (boardsChunk.Count > 0 && !Bridge.staticEquals(progress, null)) {
                    progress(($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress(), $t1.BoardsAdded = System.Linq.Enumerable.from(boardsChunk).toList(Algorithms.FixerBreaker.Board), $t1.WinLength = -1, $t1));
                }

                return boards;
            },
            EnumerateKnowledgeTrees: function (template) {
                var templateKnowledge = this.Knowledge.getItem(template);
                var colorCount = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Naturals()).first(function (n) {
                        return templateKnowledge.KnowledgeExists(n) && !templateKnowledge.KnowledgeExists(((n + 1) | 0));
                    });

                return System.Linq.Enumerable.from(templateKnowledge.getItem(colorCount).EnumerateBoardKnowledge()).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind.f7));
            },
            GenerateKnowledgeTree: function (board) {
                Algorithms.FixerBreaker.KnowledgeEngine.Mind.TreeNodeNumber = 1;
                var seenCache = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,System.Object))();
                var knowledgeTree = new Algorithms.FixerBreaker.KnowledgeEngine.KnowledgeTree();
                this.FillKnowledgeTree(knowledgeTree, board, seenCache);

                return knowledgeTree;
            },
            FillKnowledgeTree: function (knowledgeTree, board, seenCache) {
                var $t, $t1;
                knowledgeTree.Board = board.toString();
                knowledgeTree.Number = Bridge.identity(Algorithms.FixerBreaker.KnowledgeEngine.Mind.TreeNodeNumber, ($t = (Algorithms.FixerBreaker.KnowledgeEngine.Mind.TreeNodeNumber + 1) | 0, Algorithms.FixerBreaker.KnowledgeEngine.Mind.TreeNodeNumber = $t, $t));

                var knowledge = this.Knowledge.getItem(board.Template.Value).getItem(board.ColorCount).getItem(board);
                if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(knowledge)) {
                    if (!Bridge.referenceEquals(knowledge.Reason, "good swap")) {
                        knowledgeTree.Note = knowledge.Reason;
                    } else {
                        var seenBoard = { };
                        if (seenCache.tryGetValue(board, seenBoard)) {
                            knowledgeTree.Note = "same as #" + seenBoard.v.item1;
                            return;
                        }

                        var f = knowledge.Board.FindPermutation(board);
                        var colors = System.Linq.Enumerable.from(Algorithms.FixerBreaker.Board.ApplyMapping(f, System.Array.init([knowledge.ColorPair.item1, knowledge.ColorPair.item2], System.Int32))).toList(System.Int32);
                        var colorPair = { item1: colors.getItem(0), item2: colors.getItem(1) };

                        $t1 = Bridge.getEnumerator(knowledge.Swaps);
                        try {
                            while ($t1.moveNext()) {
                                var swap = $t1.Current;
                                var tempBoard = board.Clone();
                                var moves = System.Linq.Enumerable.from(swap.item2).select(function (m) {
                                        return Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.MapMove(f, m.$clone());
                                    }).toList(Algorithms.FixerBreaker.Move);
                                tempBoard.DoMoveCombination(moves);

                                var childKnowledgeTree = knowledgeTree.AddChild$1(swap);
                                childKnowledgeTree.ColorPair = colorPair;
                                this.FillKnowledgeTree(childKnowledgeTree, tempBoard, seenCache);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }}
                } else {
                    throw new System.Exception("something went wrong in building search tree");
                }

                seenCache.set(board, { item1: knowledgeTree.Number, item2: board });
            },
            GenerateTemplateKnowledgeGraph: function (template) {
                var $t, $t1, $t2, $t3;
                var templateKnowledge = this.Knowledge.getItem(template);
                var colorCount = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Naturals()).first(function (n) {
                        return templateKnowledge.KnowledgeExists(n) && !templateKnowledge.KnowledgeExists(((n + 1) | 0));
                    });

                var nextVertexID = 0;
                var vertexLookup = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32))();
                var swapLookup = new (System.Collections.Generic.Dictionary$2(System.Object,System.Object))();
                var boardLookup = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.KeyValuePair$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge)))();
                var outEdges = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)))();

                $t = Bridge.getEnumerator(templateKnowledge.getItem(colorCount).EnumerateBoardKnowledge(), System.Collections.Generic.KeyValuePair$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge));
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        vertexLookup.set(kvp.key, nextVertexID);
                        boardLookup.set(nextVertexID, kvp);
                        outEdges.set(nextVertexID, new (System.Collections.Generic.List$1(System.Int32))());
                        nextVertexID = (nextVertexID + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(templateKnowledge.LostBoards, Algorithms.FixerBreaker.Board);
                try {
                    while ($t1.moveNext()) {
                        var b = $t1.Current;
                        vertexLookup.set(b, nextVertexID);
                        boardLookup.set(nextVertexID, new (System.Collections.Generic.KeyValuePair$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge))(b, new Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge(b, "breaker wins")));
                        outEdges.set(nextVertexID, new (System.Collections.Generic.List$1(System.Int32))());
                        nextVertexID = (nextVertexID + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                $t2 = Bridge.getEnumerator(templateKnowledge.getItem(colorCount).EnumerateBoardKnowledge(), System.Collections.Generic.KeyValuePair$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge));
                try {
                    while ($t2.moveNext()) {
                        var kvp1 = $t2.Current;
                        if (Bridge.referenceEquals(kvp1.value.Reason, "good swap")) {
                            var v = vertexLookup.get(kvp1.key);

                            var f = { v : kvp1.value.Board.FindPermutation(kvp1.key) };
                            var colors = System.Linq.Enumerable.from(Algorithms.FixerBreaker.Board.ApplyMapping(f.v, System.Array.init([kvp1.value.ColorPair.item1, kvp1.value.ColorPair.item2], System.Int32))).toList(System.Int32);
                            var colorPair = { item1: colors.getItem(0), item2: colors.getItem(1) };

                            $t3 = Bridge.getEnumerator(kvp1.value.Swaps);
                            try {
                                while ($t3.moveNext()) {
                                    var swap = $t3.Current;
                                    var tempBoard = kvp1.key.Clone();
                                    var moves = System.Linq.Enumerable.from(swap.item2).select((function ($me, f) {
                                            return function (m) {
                                                return Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.MapMove(f.v, m.$clone());
                                            };
                                        })(this, f)).toList(Algorithms.FixerBreaker.Move);
                                    tempBoard.DoMoveCombination(moves);

                                    var w = vertexLookup.get(tempBoard);
                                    outEdges.get(v).add(w);

                                    swapLookup.set({ item1: v, item2: w }, swap);
                                }
                            } finally {
                                if (Bridge.is($t3, System.IDisposable)) {
                                    $t3.System$IDisposable$dispose();
                                }
                            }}
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$dispose();
                    }
                }
                var edgeWeights = new (System.Collections.Generic.List$1(System.Int32))();
                for (var i = 0; i < nextVertexID; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < nextVertexID; j = (j + 1) | 0) {
                        if (outEdges.get(i).contains(j)) {
                            edgeWeights.add(1);
                        } else {
                            if (outEdges.get(j).contains(i)) {
                                edgeWeights.add(-1);
                            } else {
                                edgeWeights.add(0);
                            }
                        }
                    }
                }

                return { item1: new Algorithms.Graph.$ctor1(edgeWeights), item2: boardLookup, item3: swapLookup };
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Mind", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Mind, {
        f1: function (a) {
            return !a.Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent;
        },
        f2: function (a) {
            return a.Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent;
        },
        f3: function (b1) {
            return Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, b1, 0);
        },
        f4: function (a) {
            return Bridge.is(a, Algorithms.FixerBreaker.KnowledgeEngine.SwapAnalyzer);
        },
        f5: function (set) {
            return set;
        },
        f6: function (list) {
            return Algorithms.Int64Usage.ToInt64(list);
        },
        f7: function (kvp) {
            return this.GenerateKnowledgeTree(kvp.key);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge", {
        fields: {
            _boardLookup: null,
            _improvementLookup: null,
            _lostBoards: null
        },
        props: {
            ColorCount: 0,
            ColorPairs: null,
            LostBoards: {
                get: function () {
                    return this._lostBoards;
                }
            }
        },
        ctors: {
            init: function () {
                this._boardLookup = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge))();
                this._improvementLookup = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge)))();
                this._lostBoards = new (System.Collections.Generic.HashSet$1(Algorithms.FixerBreaker.Board)).ctor();
            },
            ctor: function (colorCount) {
                this.$initialize();
                this.ColorCount = colorCount;
                this.SetupColorPairs();
            }
        },
        methods: {
            getItem: function (board) {
                var b = { };
                this._boardLookup.tryGetValue(board, b);
                return b.v;
            },
            getItem$1: function (reason, board) {
                var b = { };
                this.ImprovementLookup(reason).tryGetValue(board, b);
                return b.v;
            },
            setItem$1: function (reason, board, value) {
                this.ImprovementLookup(reason).set(board, value);
            },
            ImprovementLookup: function (reason) {
                var lookup = { };
                if (!this._improvementLookup.tryGetValue(reason, lookup)) {
                    lookup.v = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge))();
                    this._improvementLookup.set(reason, lookup.v);
                }

                return lookup.v;
            },
            AddWin: function (board, reason) {
                var knowledge = new Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge(board, reason);
                this._boardLookup.set(board, knowledge);

                return knowledge;
            },
            AddWin$1: function (board, reason, winDepth, colorPair, goodSwaps) {
                var $t;
                var knowledge = ($t = new Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge(board, reason), $t.Depth = winDepth, $t.ColorPair = colorPair, $t.Swaps = goodSwaps, $t);
                this._boardLookup.set(board, knowledge);

                return knowledge;
            },
            AddImprovement: function (board, reason, winDepth, colorPair, goodSwaps) {
                var $t;
                var knowledge = ($t = new Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge(board, reason), $t.Depth = winDepth, $t.ColorPair = colorPair, $t.Swaps = goodSwaps, $t);
                this.setItem$1(reason, board, knowledge);

                return knowledge;
            },
            AddLoss: function (b) {
                this._lostBoards.add(b);
            },
            SetupColorPairs: function () {
                this.ColorPairs = new (System.Collections.Generic.List$1(System.Object))();
                var colors = System.Linq.Enumerable.range(0, this.ColorCount).toList(System.Int32);

                for (var i = 0; i < colors.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < colors.Count; j = (j + 1) | 0) {
                        this.ColorPairs.add({ item1: colors.getItem(i), item2: colors.getItem(j) });
                    }
                }
            },
            CopyInto: function (potKnowledge) {
                var $t;
                $t = Bridge.getEnumerator(this._boardLookup);
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        potKnowledge.AddWin$1(kvp.key, kvp.value.Reason, kvp.value.Depth, kvp.value.ColorPair, kvp.value.Swaps);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            EnumerateBoardKnowledge: function () {
                return System.Linq.Enumerable.from(this._boardLookup).orderByDescending($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge.f1);
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge, {
        f1: function (x) {
            return x.value.Depth;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimSwapAnalyzer", {
        fields: {
            _knowledge: null,
            _boardLookup: null,
            _boardIDLookup: null,
            _shrubs: null,
            _useShrubs: false
        },
        ctors: {
            init: function () {
                this._shrubs = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList))))();
            },
            ctor: function (knowledge, boardLookup, boardIDLookup, useShrubs) {
                if (useShrubs === void 0) { useShrubs = false; }

                this.$initialize();
                this._knowledge = knowledge;
                this._boardLookup = boardLookup;
                this._boardIDLookup = boardIDLookup;
                this._useShrubs = useShrubs;
            }
        },
        methods: {
            Analyze: function (boardID, wonBoardIDs) {
                var $t;
                if (!this._useShrubs) {
                    return this.AnalyzeShrubFree(boardID, wonBoardIDs);
                }

                var shrub = { };
                if (!this._shrubs.tryGetValue(boardID, shrub)) {
                    return this.InitializeShrubs(boardID, wonBoardIDs);
                }

                $t = Bridge.getEnumerator(shrub.v);
                try {
                    while ($t.moveNext()) {
                        var colorPairList = $t.Current;
                        Algorithms.GenericExtensions.RemoveAll(Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList, colorPairList, function (branchList) {
                            return branchList.Intersects(wonBoardIDs);
                        }, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimSwapAnalyzer.f1);
                        if (colorPairList.Count <= 0) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            AnalyzeShrubFree: function (boardID, wonBoardIDs) {
                var $t, $t1, $t2;
                var board = this._boardLookup.get(boardID);
                var potKnowledge = this._knowledge.getItem(board.Template.Value).getItem(board.ColorCount);

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(potKnowledge.ColorPairs).orderByDescending(function (pair) {
                        return System.Linq.Enumerable.from(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateExactlyOneIntersecters(board, pair)).count() % 2;
                    }));
                try {
                    while ($t.moveNext()) {
                        var colorPair = $t.Current;
                        var winningSwapAlwaysExists = true;
                        $t1 = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateBranches(board, colorPair), Algorithms.FixerBreaker.Chronicle.ChronicledBranch);
                        try {
                            while ($t1.moveNext()) {
                                var branch = $t1.Current;
                                var winningSwapExists = false;

                                $t2 = Bridge.getEnumerator(branch);
                                try {
                                    while ($t2.moveNext()) {
                                        var swap = $t2.Current;
                                        board.DoMoveCombination(swap);
                                        var childID = this._boardIDLookup.get(board);
                                        board.DoMoveCombination(swap);

                                        if (wonBoardIDs.Contains(childID)) {
                                            winningSwapExists = true;
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$dispose();
                                    }
                                }
                                if (!winningSwapExists) {
                                    winningSwapAlwaysExists = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            InitializeShrubs: function (boardID, wonBoardIDs) {
                var $t, $t1, $t2;
                var shrub = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList)))();
                this._shrubs.set(boardID, shrub);

                var board = this._boardLookup.get(boardID);
                var potKnowledge = this._knowledge.getItem(board.Template.Value).getItem(board.ColorCount);

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(potKnowledge.ColorPairs).orderByDescending(function (pair) {
                        return System.Linq.Enumerable.from(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateExactlyOneIntersecters(board, pair)).count() % 2;
                    }));
                try {
                    while ($t.moveNext()) {
                        var colorPair = $t.Current;
                        var colorPairList = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList))();
                        shrub.add(colorPairList);

                        var winningSwapAlwaysExists = true;
                        $t1 = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateBranches(board, colorPair), Algorithms.FixerBreaker.Chronicle.ChronicledBranch);
                        try {
                            while ($t1.moveNext()) {
                                var branch = $t1.Current;
                                var branchList = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList();
                                var winningSwapExists = false;

                                $t2 = Bridge.getEnumerator(branch);
                                try {
                                    while ($t2.moveNext()) {
                                        var swap = $t2.Current;
                                        board.DoMoveCombination(swap);
                                        var childID = this._boardIDLookup.get(board);
                                        board.DoMoveCombination(swap);

                                        if (wonBoardIDs.Contains(childID)) {
                                            winningSwapExists = true;
                                            break;
                                        }

                                        branchList.Add(childID);
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$dispose();
                                    }
                                }
                                if (!winningSwapExists) {
                                    colorPairList.add(branchList);
                                    winningSwapAlwaysExists = false;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimSwapAnalyzer", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimSwapAnalyzer, {
        f1: function (x) { }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList", {
        fields: {
            _data: null,
            _length: 0
        },
        ctors: {
            ctor: function (initialCapacity) {
                if (initialCapacity === void 0) { initialCapacity = 16; }

                this.$initialize();
                this._data = System.Array.init(initialCapacity, 0, System.Int32);
            }
        },
        methods: {
            Add: function (x) {
                var i = System.Array.binarySearch(this._data, 0, this._length, x);
                if (i >= 0) {
                    return;
                }

                this.EnsureCapacity();

                i = ~i;
                if (i < this._length) {
                    System.Array.copy(this._data, i, this._data, ((i + 1) | 0), ((this._length - i) | 0));
                }

                this._data[System.Array.index(i, this._data)] = x;
                this._length = (this._length + 1) | 0;
            },
            Contains: function (x) {
                return System.Array.binarySearch(this._data, 0, this._length, x) >= 0;
            },
            Intersects: function (other) {
                var j = 0;
                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    var k = System.Array.binarySearch(other._data, j, ((other._length - j) | 0), this._data[System.Array.index(i, this._data)]);
                    if (k >= 0) {
                        return true;
                    }
                    j = ~k;
                }

                return false;
            },
            EnsureCapacity: function () {
                if (this._length >= this._data.length) {
                    var data = System.Array.init(Bridge.Int.mul(2, this._data.length), 0, System.Int32);
                    System.Array.copy(this._data, 0, data, 0, this._data.length);
                    this._data = data;
                }
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier", {
        statics: {
            fields: {
                _lookup: null
            },
            ctors: {
                init: function () {
                    this._lookup = new (System.Collections.Generic.Dictionary$2(System.String,System.Object))();
                }
            },
            methods: {
                ToListStringInLexOrder: function (ss, pp, maxPot) {
                    if (maxPot === void 0) { maxPot = -1; }
                    var lists = System.Linq.Enumerable.from(ss).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f1).toList(System.Collections.Generic.List$1(System.Int32));
                    var pot = maxPot;
                    if (pot <= 0) {
                        pot = System.Linq.Enumerable.from(lists).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f2).distinct().count();
                    }

                    var stacks = System.Linq.Enumerable.from(lists).where(function (s) {
                            return s.Count <= pot;
                        }).toList(System.Collections.Generic.List$1(System.Int32));
                    return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.ToLexOrder(Bridge.toArray(System.Linq.Enumerable.from(stacks).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f4)).join("|"), pp, maxPot);
                },
                ToLexOrder: function (stacksString, pp, maxPot) {
                    var $t;
                    var key = System.String.concat(stacksString, ";", maxPot);
                    var tup = { };
                    if (Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier._lookup.tryGetValue(key, tup)) {
                        pp.v = tup.v.item2;
                        return tup.v.item1;
                    }

                    pp.v = null;
                    var lexSmallest;
                    var stacks = System.Linq.Enumerable.from(System.String.split(stacksString, [124].map(function(i) {{ return String.fromCharCode(i); }}))).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f6).toList(System.Collections.Generic.List$1(System.Int32));
                    lexSmallest = stacksString;

                    var pot = System.Linq.Enumerable.from(stacks).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f2).distinct().count();
                    if (maxPot > 0) {
                        pot = maxPot;
                    }

                    $t = Bridge.getEnumerator(Algorithms.Utility.Permutation.EnumerateAll(pot), Algorithms.Utility.Permutation);
                    try {
                        while ($t.moveNext()) {
                            var p = $t.Current;
                            var permutedString = Bridge.toArray(System.Linq.Enumerable.from(stacks).select((function ($me, p) {
                                        return function (s) {
                                            return Bridge.toArray(System.Linq.Enumerable.from(s).select(function (a) {
                                                        return p.getItem(a);
                                                    }).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f3)).join("");
                                        };
                                    })(this, p))).join("|");
                            if (System.String.compare(permutedString, lexSmallest) <= 0) {
                                lexSmallest = permutedString;
                                pp.v = p;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier._lookup.set(key, { item1: lexSmallest, item2: pp.v });
                    return lexSmallest;
                }
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier, {
        f1: function (l) {
            return Algorithms.Int64Usage.ToSet(l);
        },
        f2: function (l) {
            return l;
        },
        f3: function (x) {
            return x;
        },
        f4: function (s) {
            return Bridge.toArray(System.Linq.Enumerable.from(s).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f3)).join("");
        },
        f5: function (c) {
            return System.Int32.parse(String.fromCharCode(c));
        },
        f6: function (s) {
            return System.Linq.Enumerable.from(System.String.toCharArray(s, 0, s.length)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.f5).toList(System.Int32);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo", {
        props: {
            Alpha: 0,
            Beta: 0,
            Partition: null,
            Response: System.UInt64(0),
            SwapVertices: null
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.ColorPairOutcome", {
        fields: {
            Colors: null,
            FixerOutcomes: null
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome", {
        fields: {
            BreakerChoice: null,
            Exits: null
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.IWinFilter");

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing", {
        statics: {
            fields: {
                MaxLength: 0,
                _m: null
            },
            ctors: {
                init: function () {
                    this.MaxLength = 32;
                },
                ctor: function () {
                    Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing._m = new (System.Collections.Generic.List$1(System.UInt64))(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.MaxLength);

                    var RNG = new System.Random.$ctor1(System.DateTime.getMillisecond(System.DateTime.getNow()));
                    var b = System.Array.init(8, 0, System.Byte);

                    for (var i = 0; i < Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.MaxLength; i = (i + 1) | 0) {
                        RNG.nextBytes(b);
                        Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing._m.add(System.BitConverter.toUInt64(b, 0));
                    }
                }
            },
            methods: {
                Hash: function (list, length) {
                    var hash = list[System.Array.index(0, list)];

                    for (var i = 1; i < length; i = (i + 1) | 0) {
                        hash = hash.add((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing._m.getItem(((i - 1) | 0)).mul(list[System.Array.index(i, list)])));
                    }

                    return System.Int64.clip32(hash.shru(32));
                }
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofBuilder", {
        props: {
            Mind: null,
            Cases: null,
            UsePermutations: false
        },
        ctors: {
            ctor: function (mind, usePermutations) {
                if (usePermutations === void 0) { usePermutations = false; }

                this.$initialize();
                this.Mind = mind;
                this.UsePermutations = usePermutations;
                this.ExtractCases();
            }
        },
        methods: {
            ExtractCases: function () {
                var $t, $t1;
                this.Cases = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase))();

                var caseNumber = 0;

                var colorableCase = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase(this.Mind, 0, this.Mind.ColorableBoards);
                this.Cases.add(colorableCase);
                caseNumber = (caseNumber + 1) | 0;

                var remainingBoards = System.Linq.Enumerable.from(this.Mind.NonColorableBoards).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                var wonBoards = System.Linq.Enumerable.from(this.Mind.ColorableBoards).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                while (remainingBoards.Count > 0) {
                    var proofCase = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase(this.Mind, caseNumber);
                    this.Cases.add(proofCase);

                    var addedBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                    $t = Bridge.getEnumerator(remainingBoards);
                    try {
                        while ($t.moveNext()) {
                            var board = $t.Current;
                            var treeInfo = this.Mind.GetWinTreeInfo(board);

                            if (System.Linq.Enumerable.from(treeInfo).all(function (bc) {
                                    return wonBoards.contains(new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, bc.Alpha, bc.Beta, bc.Response, board._stackCount));
                                })) {
                                addedBoards.add(board);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(addedBoards);
                    try {
                        while ($t1.moveNext()) {
                            var board1 = $t1.Current;
                            proofCase.AddBoard(board1);
                            wonBoards.add(board1);
                            remainingBoards.remove(board1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    caseNumber = (caseNumber + 1) | 0;
                }
            },
            GetHandledCaseNumber: function (b, bc) {
                var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(b._trace, bc.Alpha, bc.Beta, bc.Response, b._stackCount);
                return ((System.Linq.Enumerable.from(Algorithms.GenericExtensions.IndicesWhere(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase, this.Cases, function (cc) {
                        return cc.Boards.contains(childBoard);
                    })).first() + 1) | 0);
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree.Extensions", {
        statics: {
            methods: {
                ToTex: function (matcher, lists, listSize) {
                    if (Bridge.referenceEquals(matcher.Name, "*")) {
                        return System.String.concat(Bridge.toArray(System.Linq.Enumerable.repeat("\\wild", listSize)).join(""), " ");
                    }

                    var i = { };
                    if (!System.Int32.tryParse(matcher.Name, i)) {
                        return "?";
                    }

                    return Bridge.toArray(lists.getItem(i.v)).join("");
                },
                GetActiveListIndex: function (i, b, maxPot) {
                    return ((System.Linq.Enumerable.from(b.Stacks.Value).take(((i + 1) | 0)).count(function (ss) {
                        return Algorithms.Int64Usage.PopulationCount(ss) < maxPot;
                    }) - 1) | 0);
                }
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions", {
        statics: {
            methods: {
                GetArticle: function (letter) {
                    switch (letter) {
                        case "X": 
                            return "an";
                        case "Y": 
                            return "a";
                        case "Z": 
                            return "a";
                    }

                    return "";
                },
                Listify: function (T, strings, connector) {
                    if (connector === void 0) { connector = "and"; }
                    var ll = System.Linq.Enumerable.from(strings).toList(T);
                    if (ll.Count <= 0) {
                        return "";
                    }
                    if (ll.Count === 1) {
                        return ll.getItem(0).toString();
                    }

                    if (connector != null) {
                        return System.String.concat(Bridge.toArray(System.Linq.Enumerable.from(ll).take(((ll.Count - 1) | 0))).join(", "), " ", connector, " ", System.Linq.Enumerable.from(ll).last());
                    }

                    return Bridge.toArray(ll).join(", ");
                },
                Wordify: function (n) {
                    switch (n) {
                        case 0: 
                            return "first";
                        case 1: 
                            return "second";
                        case 2: 
                            return "third";
                        case 3: 
                            return "fourth";
                        case 4: 
                            return "fifth";
                        case 5: 
                            return "sixth";
                        case 6: 
                            return "seventh";
                        case 7: 
                            return "eighth";
                        case 8: 
                            return "ninth";
                        case 9: 
                            return "tenth";
                        case 10: 
                            return "eleventh";
                    }

                    return (((n + 1) | 0)) + "-th";
                },
                Except: function (T, list, t) {
                    return System.Linq.Enumerable.from(list).except(System.Array.init([t], T));
                },
                MaxIndex: function (T, list, value) {
                    var $t;
                    var maxIndex = -1;
                    var max = -2147483648;
                    var i = 0;
                    $t = Bridge.getEnumerator(list, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            var v = value(t);
                            if (v > max) {
                                max = v;
                                maxIndex = i;
                            }

                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return maxIndex;
                },
                Distinct: function (T, S, list, value) {
                    var $t;
                    var distinct = new (System.Collections.Generic.List$1(T))();
                    $t = Bridge.getEnumerator(list, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            if (!System.Linq.Enumerable.from(distinct).any((function ($me, t) {
                                    return function (tt) {
                                        return Bridge.equals(value(tt), value(t));
                                    };
                                })(this, t))) {
                                distinct.add(t);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return distinct;
                }
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions", {
        statics: {
            fields: {
                Alphabet: null
            },
            ctors: {
                init: function () {
                    this.Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                }
            },
            methods: {
                ToXYZ: function (board) {
                    return Bridge.toArray(System.Linq.Enumerable.from(board.Stacks.Value).select(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ$1)).join("");
                },
                ToXYZ$1: function (stack) {
                    switch (stack.toString()) {
                        case "3": 
                            return "X";
                        case "5": 
                            return "Y";
                        case "6": 
                            return "Z";
                    }

                    return "";
                },
                To012: function (board) {
                    return System.Linq.Enumerable.from(board.Stacks.Value).select(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.To012$1).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.f1).toList(System.Int32);
                },
                To012$1: function (stack) {
                    if (stack.gt(System.Int64(6))) {
                        return -1;
                    }
                    return (((((Bridge.Int.div(System.Int64.clip32(stack), 2)) | 0)) - 1) | 0);
                },
                ToCompactedPartitionId: function (board, partition) {
                    var xyz = System.Linq.Enumerable.from(board.Stacks.Value).select(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ$1).toList(System.String);
                    return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToPartitionId$1(xyz, partition);
                },
                ToPartitionId: function (board, partition) {
                    var xyz = System.Linq.Enumerable.from(board.Stacks.Value).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.f2).toList(System.String);

                    return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToPartitionId$1(xyz, partition);
                },
                ToPartitionId$1: function (xyz, partition) {
                    var $t;
                    var pp = System.Linq.Enumerable.from(partition).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.f3).toList(System.Collections.Generic.List$1(System.Int32));
                    for (var i = 0; i < pp.Count; i = (i + 1) | 0) {
                        var l = String.fromCharCode(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.Alphabet.charCodeAt(i));
                        $t = Bridge.getEnumerator(pp.getItem(i));
                        try {
                            while ($t.moveNext()) {
                                var j = $t.Current;
                                xyz.setItem(j, l);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}

                    return Bridge.toArray(xyz).join("");
                },
                GetXYZIndex: function (i, b) {
                    return ((System.Linq.Enumerable.from(b.Stacks.Value).take(((i + 1) | 0)).count($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.f4) - 1) | 0);
                },
                ToTex: function (matcher) {
                    switch (matcher.Name) {
                        case "*": 
                            return "\\wild ";
                        case "0": 
                            return "X";
                        case "1": 
                            return "Y";
                        case "2": 
                            return "Z";
                        case "!0": 
                            return "\\bar{{X}}";
                        case "!1": 
                            return "\\bar{{Y}}";
                        case "!2": 
                            return "\\bar{{Z}}";
                    }

                    return "?";
                }
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions, {
        f1: function (x) {
            return x >= 0;
        },
        f2: function (stack) {
            var s = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ$1(stack);
            if (s.length <= 0) {
                return "*";
            }
            return s;
        },
        f3: function (part) {
            return System.Linq.Enumerable.from(part).min();
        },
        f4: function (ss) {
            return Algorithms.Int64Usage.PopulationCount(ss) === 2;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase", {
        props: {
            Mind: null,
            Boards: null,
            BreakerWin: false,
            CaseNumber: 0,
            Superabundant: false
        },
        ctors: {
            ctor: function (mind, caseNumber, boards) {
                if (boards === void 0) { boards = null; }

                this.$initialize();
                this.Mind = mind;
                this.CaseNumber = caseNumber;
                this.Boards = boards;
                if (this.Boards == null) {
                    this.Boards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                }
            }
        },
        methods: {
            AddBoard: function (board) {
                this.Boards.add(board);
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard", {
        statics: {
            methods: {
                Create: function (T, lists) {
                    var pot = System.Linq.Enumerable.from(lists).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f1).distinct().toList(T);
                    var numbering = Algorithms.DataStructures.BijectionExtensions.NumberObjects(T, pot);

                    var intLists = System.Linq.Enumerable.from(lists).select(function (l) {
                            return System.Linq.Enumerable.from(numbering.Apply(l)).toList(System.Int32);
                        }).toList(System.Collections.Generic.List$1(System.Int32));
                    var trace = System.Array.init(pot.Count, System.UInt64(0), System.UInt64);

                    for (var i = 0; i < pot.Count; i = (i + 1) | 0) {
                        trace[System.Array.index(i, trace)] = Algorithms.Int64Usage.ToUInt64(Algorithms.GenericExtensions.IndicesWhere(System.Collections.Generic.List$1(System.Int32), intLists, function (ll) {
                            return ll.contains(i);
                        }));
                    }

                    pot = System.Linq.Enumerable.from(pot).orderBy(function (c) {
                            return trace[System.Array.index(pot.indexOf(c), trace)];
                        }).toList(T);
                    numbering = Algorithms.DataStructures.BijectionExtensions.NumberObjects(T, pot);

                    System.Array.sort(trace);
                    return { item1: new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.ctor(trace, lists.Count), item2: numbering };
                },
                FromLists: function (lists) {
                    var pot = System.Linq.Enumerable.from(lists).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f1).distinct().toList(System.Int32);
                    var trace = System.Array.init(pot.Count, System.UInt64(0), System.UInt64);

                    for (var i = 0; i < pot.Count; i = (i + 1) | 0) {
                        trace[System.Array.index(i, trace)] = Algorithms.Int64Usage.ToUInt64(Algorithms.GenericExtensions.IndicesWhere(System.Collections.Generic.List$1(System.Int32), lists, function (ll) {
                            return ll.contains(i);
                        }));
                    }

                    System.Array.sort(trace);
                    return new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.ctor(trace, lists.Count);
                }
            }
        },
        fields: {
            _trace: null,
            _length: 0,
            _stackCount: 0,
            _hashCode: 0
        },
        props: {
            Stacks: null
        },
        ctors: {
            ctor: function (trace, stackCount) {
                this.$initialize();
                this._trace = trace;
                this._length = this._trace.length;
                this._stackCount = stackCount;
                this._hashCode = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.Hash(this._trace, this._length);

                this.MakeLazyStacks();
            },
            $ctor1: function (trace, i, j, swap, stackCount) {
                this.$initialize();
                this._trace = System.Array.init(trace.length, System.UInt64(0), System.UInt64);
                this._length = 0;
                for (var k = 0; k < trace.length; k = (k + 1) | 0) {
                    var v = System.UInt64(0);
                    if (k === i || k === j) {
                        v = trace[System.Array.index(k, trace)].xor(swap);
                    } else {
                        v = trace[System.Array.index(k, trace)];
                    }

                    if (v.gt(System.UInt64(0))) {
                        var q = this._length;
                        while (q > 0 && this._trace[System.Array.index(((q - 1) | 0), this._trace)].gt(v)) {
                            q = (q - 1) | 0;
                        }

                        if (q < this._length) {
                            System.Array.copy(this._trace, q << 3, this._trace, (((q + 1) | 0)) << 3, (((this._length - q) | 0)) << 3);
                        }
                        this._trace[System.Array.index(q, this._trace)] = v;

                        this._length = (this._length + 1) | 0;
                    }
                }

                this._stackCount = stackCount;
                this.MakeLazyStacks();

                this._hashCode = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.Hash(this._trace, this._length);
            }
        },
        methods: {
            ToListStringInLexOrder$1: function (maxPot) {
                if (maxPot === void 0) { maxPot = -1; }
                var pp = { };
                return this.ToListStringInLexOrder(pp, maxPot);
            },
            ToListStringInLexOrder: function (pp, maxPot) {
                if (maxPot === void 0) { maxPot = -1; }
                return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BoardLexifier.ToListStringInLexOrder(this.Stacks.Value, pp, maxPot);
            },
            GetPermutation: function (i, j, swap) {
                var t = System.Linq.Enumerable.from(this._trace).toList(System.UInt64);

                t.setItem(i, t.getItem(i).xor(swap));
                t.setItem(j, t.getItem(j).xor(swap));

                if (t.getItem(i).equals(System.UInt64(0))) {
                    t.setItem(i, System.UInt64(2147483647));
                }
                if (t.getItem(j).equals(System.UInt64(0))) {
                    t.setItem(j, System.UInt64(2147483647));
                }

                var sequence = System.Linq.Enumerable.from(t).zip(System.Linq.Enumerable.range(0, t.Count), $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f2).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f3).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f4).toList(System.Int32);

                return new Algorithms.Utility.Permutation.$ctor1(sequence);
            },
            Permute: function (p, indices) {
                var trace = System.Array.init(this._trace.length, System.UInt64(0), System.UInt64);

                var permutedIndices = p.Apply(System.Int32, indices);
                for (var i = 0; i < this._trace.length; i = (i + 1) | 0) {
                    var n = this._trace[System.Array.index(i, this._trace)];
                    var m = this._trace[System.Array.index(i, this._trace)];

                    for (var j = 0; j < indices.Count; j = (j + 1) | 0) {
                        m = m.and(((System.UInt64(1).shl(indices.getItem(j))).not()));
                    }

                    for (var j1 = 0; j1 < indices.Count; j1 = (j1 + 1) | 0) {
                        if ((n.and((System.UInt64(1).shl(indices.getItem(j1))))).ne(System.UInt64(0))) {
                            m = m.or((System.UInt64(1).shl(permutedIndices.getItem(j1))));
                        }
                    }

                    trace[System.Array.index(i, trace)] = m;
                }

                System.Array.sort(trace);

                return new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.ctor(trace, this._stackCount);
            },
            MakeLazyStacks: function () {
                this.Stacks = new (Algorithms.Lazy$1(System.Array.type(System.Int64))).ctor(Bridge.fn.bind(this, function () {
                    var $t;
                    var s = System.Array.init(this._stackCount, System.Int64(0), System.Int64);
                    var traceBits = System.Linq.Enumerable.from(this._trace).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f5).toList(System.Collections.Generic.List$1(System.Int32));
                    for (var c = 0; c < traceBits.Count; c = (c + 1) | 0) {
                        $t = Bridge.getEnumerator(traceBits.getItem(c));
                        try {
                            while ($t.moveNext()) {
                                var i = $t.Current;
                                s[System.Array.index(i, s)] = s[System.Array.index(i, s)].or((System.Int64(1).shl(c)));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}
                    return s;
                }));
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._trace[System.Array.index(i, this._trace)].ne(other._trace[System.Array.index(i, other._trace)])) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            },
            toString: function () {
                return Bridge.toArray(System.Linq.Enumerable.from(this.Stacks.Value).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.f6)).join("|");
            }
        }
    });

    Bridge.define("$AnonymousType$1", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (t, i) {
                this.T = t;
                this.I = i;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$1)) {
                    return false;
                }
                return Bridge.equals(this.T, o.T) && Bridge.equals(this.I, o.I);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196186, this.T, this.I]);
                return h;
            },
            toJSON: function () {
                return {
                    T : this.T,
                    I : this.I
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"I","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_I","t":8,"rt":System.Int32,"fg":"I"},"fn":"I"},{"a":2,"n":"T","t":16,"rt":System.UInt64,"g":{"a":2,"n":"get_T","t":8,"rt":System.UInt64,"fg":"T"},"fn":"T"}]}; }
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, {
        f1: function (l) {
            return l;
        },
        f2: function (tr, ii) {
            return new $asm.$AnonymousType$1(tr, ii);
        },
        f3: function (v) {
            return v.T;
        },
        f4: function (v) {
            return v.I;
        },
        f5: function (t) {
            return Algorithms.Int64Usage.ToSet$1(t);
        },
        f6: function (l) {
            return Bridge.toArray(Algorithms.Int64Usage.ToSet(l)).join("");
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimColoringAnalyzer", {
        fields: {
            _lineGraph: null,
            _getEdgeColorList: null
        },
        ctors: {
            ctor: function (lineGraph, getEdgeColorList) {
                this.$initialize();
                this._lineGraph = lineGraph;
                this._getEdgeColorList = getEdgeColorList;
            }
        },
        methods: {
            Analyze: function (b) {
                return this._lineGraph.IsChoosable(System.Linq.Enumerable.range(0, this._lineGraph.N).select(Bridge.fn.bind(this, function (e) {
                    return this._getEdgeColorList(b, e);
                })).toList(System.Int64));
            },
            Analyze$1: function (b, coloring) {
                return this.IsChoosable(System.Linq.Enumerable.range(0, this._lineGraph.N).select(Bridge.fn.bind(this, function (e) {
                    return this._getEdgeColorList(b, e);
                })).toList(System.Int64), coloring);
            },
            ColorableWithoutEdge: function (b, edgeIndex) {
                return this._lineGraph.IsChoosable(System.Linq.Enumerable.range(0, this._lineGraph.N).select(Bridge.fn.bind(this, function (e) {
                    if (e === edgeIndex) {
                        return System.Int64(-1);
                    }

                    return this._getEdgeColorList(b, e);
                })).toList(System.Int64));
            },
            AnalyzeWithoutEdge: function (b, coloring, edgeIndex) {
                return this.IsChoosable(System.Linq.Enumerable.range(0, this._lineGraph.N).select(Bridge.fn.bind(this, function (e) {
                    if (e === edgeIndex) {
                        return System.Int64(-1);
                    }

                    return this._getEdgeColorList(b, e);
                })).toList(System.Int64), coloring);
            },
            IsChoosable: function (assignment, coloring) {
                coloring.v = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int64))();
                return this.IsChoosable$1(assignment, 0, coloring.v);
            },
            IsChoosable$1: function (assignment, v, coloring) {
                var $t;
                if (v >= this._lineGraph.N) {
                    return true;
                }

                var colors = assignment.getItem(v);
                while (colors.ne(System.Int64(0))) {
                    var color = colors.and(colors.neg());

                    var assignmentCopy = new (System.Collections.Generic.List$1(System.Int64))(assignment);
                    $t = Bridge.getEnumerator(this._lineGraph._laterNeighbors.Value.getItem(v));
                    try {
                        while ($t.moveNext()) {
                            var neighbor = $t.Current;
                            assignmentCopy.setItem(neighbor, assignmentCopy.getItem(neighbor).and((color.not())));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    if (this.IsChoosable$1(assignmentCopy, ((v + 1) | 0), coloring)) {
                        coloring.set(v, color);
                        return true;
                    }

                    colors = colors.xor(color);
                }

                return false;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer", {
        fields: {
            _fixerResponses: null,
            _fixerResponseCount: 0,
            _breakerChoicesCache: null
        },
        props: {
            LastWinChildCount: 0,
            ProofFindingMode: false,
            WeaklyFixable: false,
            WinTreeInfo: null,
            LossTreeInfo: null
        },
        ctors: {
            init: function () {
                this._breakerChoicesCache = new (System.Collections.Generic.Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))))();
            },
            ctor: function (n, proofFindingMode, weaklyFixable) {
                if (proofFindingMode === void 0) { proofFindingMode = false; }
                if (weaklyFixable === void 0) { weaklyFixable = false; }

                this.$initialize();
                this._fixerResponses = System.Array.init(8192, System.UInt64(0), System.UInt64);
                this.ProofFindingMode = proofFindingMode;
                this.WeaklyFixable = weaklyFixable;
                if (this.ProofFindingMode) {
                    this.WinTreeInfo = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo))();
                    this.LossTreeInfo = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo))();
                }
            }
        },
        methods: {
            Analyze: function (board, wonBoards) {
                if (this.ProofFindingMode) {
                    return this.AnalyzeForProofInternal(board, wonBoards);
                }

                return this.AnalyzeInternal(board, wonBoards);
            },
            AnalyzeInternal: function (board, wonBoards) {
                var $t;
                for (var i = 0; i < board._length; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < board._length; j = (j + 1) | 0) {
                        var x = board._trace[System.Array.index(i, board._trace)];
                        var y = board._trace[System.Array.index(j, board._trace)];
                        var swappable = x.xor(y);

                        var winningSwapAlwaysExists = true;
                        $t = Bridge.getEnumerator(this.GetBreakerChoices(swappable));
                        try {
                            while ($t.moveNext()) {
                                var breakerChoice = $t.Current;
                                var winningSwapExists = false;

                                this.GetFixerResponses(breakerChoice);
                                for (var k = 1; k < this._fixerResponseCount; k = (k + 1) | 0) {
                                    if (this.WeaklyFixable && Algorithms.Int64Usage.PopulationCount$1(this._fixerResponses[System.Array.index(k, this._fixerResponses)]) > 2) {
                                        continue;
                                    }

                                    var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, i, j, this._fixerResponses[System.Array.index(k, this._fixerResponses)], board._stackCount);
                                    if (wonBoards.contains(childBoard)) {
                                        winningSwapExists = true;
                                        break;
                                    }
                                }

                                if (!winningSwapExists) {
                                    winningSwapAlwaysExists = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            return true;
                        }
                    }
                }

                return false;
            },
            AnalyzeForProofInternal: function (board, wonBoards) {
                var $t, $t1, $t2;
                var winInfo = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo();
                this.WinTreeInfo.set(board, winInfo);

                var lossInfo = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo();
                this.LossTreeInfo.set(board, lossInfo);

                var colorPairs = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < board._length; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < board._length; j = (j + 1) | 0) {
                        colorPairs.add({ item1: i, item2: j });
                    }
                }

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(colorPairs).orderBy(function (cp) {
                        return Algorithms.Int64Usage.PopulationCount$1((board._trace[System.Array.index(cp.item1, board._trace)].xor(board._trace[System.Array.index(cp.item2, board._trace)])));
                    }));
                try {
                    while ($t.moveNext()) {
                        var cp = $t.Current;
                        var i1 = cp.item1;
                        var j1 = cp.item2;

                        var x = board._trace[System.Array.index(i1, board._trace)];
                        var y = board._trace[System.Array.index(j1, board._trace)];
                        var swappable = x.xor(y);

                        var winningSwapAlwaysExists = true;
                        $t1 = Bridge.getEnumerator(this.GetBreakerChoices(swappable));
                        try {
                            while ($t1.moveNext()) {
                                var breakerChoice = $t1.Current;
                                var winningSwapExists = false;

                                this.GetFixerResponses(breakerChoice);
                                var responses = System.Linq.Enumerable.range(1, ((this._fixerResponseCount - 1) | 0)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer.f1)).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer.f2);
                                $t2 = Bridge.getEnumerator(responses);
                                try {
                                    while ($t2.moveNext()) {
                                        var response = $t2.Current;
                                        if (this.WeaklyFixable && Algorithms.Int64Usage.PopulationCount$1(response) > 2) {
                                            break;
                                        }

                                        var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, i1, j1, response, board._stackCount);
                                        if (wonBoards.contains(childBoard)) {
                                            winningSwapExists = true;
                                            winInfo.Add(breakerChoice, i1, j1, response);
                                            break;
                                        } else {
                                            lossInfo.Add(breakerChoice, i1, j1, response);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$dispose();
                                    }
                                }
                                if (!winningSwapExists) {
                                    winInfo.clear();
                                    winningSwapAlwaysExists = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            this.LastWinChildCount = Algorithms.Int64Usage.PopulationCount$1(swappable);
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            GetFixerResponses: function (possibleMoves) {
                this._fixerResponseCount = 1 << possibleMoves.Count;
                var tableLength = this._fixerResponses.length;
                while (tableLength <= this._fixerResponseCount) {
                    tableLength = Bridge.Int.mul(tableLength, 2);
                }
                if (tableLength > this._fixerResponses.length) {
                    this._fixerResponses = System.Array.init(tableLength, System.UInt64(0), System.UInt64);
                }

                var subset = 1;
                while (subset < this._fixerResponseCount) {
                    var response = System.UInt64(0);
                    var x = { v : subset };

                    while (x.v !== 0) {
                        response = response.or(possibleMoves.getItem(Algorithms.Int32Usage.GetAndClearLeastSignificantBit(x)));
                    }

                    this._fixerResponses[System.Array.index(subset, this._fixerResponses)] = response;
                    subset = (subset + 1) | 0;
                }
            },
            GetBreakerChoices: function (swappable) {
                var $t, $t1, $t2;
                var choices = { };
                if (!this._breakerChoicesCache.tryGetValue(swappable, choices)) {
                    var bits = Algorithms.Int64Usage.GetBits$1(swappable);
                    var partitions = Algorithms.FixerBreaker.Chronicle.BranchGenerator.GetPartitions(bits.Count);
                    choices.v = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64)))(partitions.Count);

                    $t = Bridge.getEnumerator(partitions);
                    try {
                        while ($t.moveNext()) {
                            var partition = $t.Current;
                            var choice = new (System.Collections.Generic.List$1(System.UInt64))(partition.Count);
                            choices.v.add(choice);

                            $t1 = Bridge.getEnumerator(partition);
                            try {
                                while ($t1.moveNext()) {
                                    var part = $t1.Current;
                                    var x = System.UInt64(0);
                                    $t2 = Bridge.getEnumerator(part);
                                    try {
                                        while ($t2.moveNext()) {
                                            var i = $t2.Current;
                                            x = x.or(bits.getItem(i));
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }
                                    choice.add(x);
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    this._breakerChoicesCache.set(swappable, choices.v);
                }

                return choices.v;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer, {
        f1: function (k) {
            return this._fixerResponses[System.Array.index(k, this._fixerResponses)];
        },
        f2: function (fr) {
            return Algorithms.Int64Usage.PopulationCount$1(fr);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Template", {
        statics: {
            methods: {
                op_Implicit: function (s) {
                    return new Algorithms.FixerBreaker.KnowledgeEngine.Template.$ctor1(s, null);
                    //return new Template(Regex.Split(s ?? "", @"\D+").Select(MetaKnowledge.TryParseInt).Where(x => x.HasValue).Select(x => x.Value).ToList());
                }
            }
        },
        props: {
            Sizes: null
        },
        ctors: {
            ctor: function (sizes) {
                this.$initialize();
                this.Sizes = sizes;
            },
            $ctor1: function (s, g) {
                this.$initialize();
            }
        },
        methods: {
            equals: function (o) {
                return this.Equals(Bridge.as(o, Algorithms.FixerBreaker.KnowledgeEngine.Template));
            },
            Equals: function (t) {
                if (!Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(t)) {
                    return false;
                }

                return System.Linq.Enumerable.from(this.Sizes).sequenceEqual(t.Sizes);
            },
            getHashCode: function () {
                return System.Linq.Enumerable.from(this.Sizes).aggregate(this.Sizes.Count, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Template.f1);
            },
            toString: function () {
                return Bridge.toArray(this.Sizes).join(",");
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Template", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Template, {
        f1: function (t, s) {
            return ((Bridge.Int.mul(31, t) + s) | 0);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge", {
        fields: {
            _potLookup: null
        },
        props: {
            Template: null,
            LostBoards: {
                get: function () {
                    return System.Linq.Enumerable.from(this._potLookup.getValues()).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge.f1).distinct();
                }
            }
        },
        ctors: {
            init: function () {
                this._potLookup = new (System.Collections.Generic.Dictionary$2(System.Int32,Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge))();
            },
            ctor: function (template) {
                this.$initialize();
                this.Template = template;
            }
        },
        methods: {
            getItem: function (colorCount) {
                var p = { };
                if (!this._potLookup.tryGetValue(colorCount, p)) {
                    p.v = new Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge(colorCount);
                    this._potLookup.set(colorCount, p.v);
                }

                return p.v;
            },
            Promote: function (colorCount) {
                this.getItem(colorCount).CopyInto(this.getItem(((colorCount + 1) | 0)));
            },
            KnowledgeExists: function (colorCount) {
                return this._potLookup.containsKey(colorCount);
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge, {
        f1: function (pk) {
            return pk.LostBoards;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.ThoughtProgress", {
        props: {
            IsInitialThought: false,
            BoardsAdded: null,
            BoardsRemoved: null,
            WinLength: 0
        }
    });

    Bridge.define("Algorithms.FixerBreaker.SlowBoard", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Int64)],
        statics: {
            methods: {
                UpdateHash: function (hash, value) {
                    hash.v = System.Int64.clip32(System.Int64(Bridge.Int.mul(100, hash.v)).add(value));
                },
                ApplyMapping$1: function (mapping, stack) {
                    return Algorithms.Int64Usage.ToInt64(Algorithms.FixerBreaker.SlowBoard.ApplyMapping(mapping, Algorithms.Int64Usage.ToSet(stack)));
                },
                ApplyMapping: function (mapping, set) {
                    return System.Linq.Enumerable.from(set).select(function (c) {
                            return mapping.item2.getItem(mapping.item1.indexOf(c));
                        });
                },
                ApplyInverseMapping: function (mapping, set) {
                    return System.Linq.Enumerable.from(set).select(function (c) {
                            return mapping.item1.getItem(mapping.item2.indexOf(c));
                        });
                },
                OtherTurn: function (turn) {
                    return ((1 - turn) | 0);
                }
            }
        },
        fields: {
            _hashCode: 0
        },
        props: {
            Stacks: null,
            PotSet: null,
            Degrees: null,
            DegreeChangeIndices: null,
            Template: null,
            Pot: System.Int64(0),
            ColorCount: 0,
            Turn: 0,
            N: 0,
            LastMove: null
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Int64$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            init: function () {
                this.LastMove = new Algorithms.FixerBreaker.Move();
            },
            ctor: function (stacks, pot) {
                this.$initialize();
                this.Stacks = stacks;
                this.Pot = pot;
                this.Turn = Algorithms.FixerBreaker.Turn.Fixer;
                this.N = this.Stacks.Count;
                this.Template = new Algorithms.FixerBreaker.KnowledgeEngine.Template.ctor(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f1).toList(System.Int32));

                this.PotSet = Algorithms.Int64Usage.ToSet(this.Pot);
                this.ColorCount = System.Linq.Enumerable.from(this.PotSet).count();
                this.Degrees = new (System.Collections.Generic.List$1(System.Object))();
                this.DegreeChangeIndices = new (System.Collections.Generic.List$1(System.Int32))();
                this.ComputeHashCode();
            }
        },
        methods: {
            getItem: function (x) {
                return this.Stacks.getItem(x);
            },
            ComputeHashCode: function () {
                this._hashCode = this.N;
                Algorithms.FixerBreaker.SlowBoard.UpdateHash(Bridge.ref(this, "_hashCode"), this.Turn);

                this.Degrees.clear();
                this.DegreeChangeIndices.clear();

                this.Degrees.addRange(System.Linq.Enumerable.from(this.PotSet).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.SlowBoard.f2)).where($asm.$.Algorithms.FixerBreaker.SlowBoard.f3).orderBy($asm.$.Algorithms.FixerBreaker.SlowBoard.f4));

                var previousDegree = -1;
                for (var i = 0; i < this.Degrees.Count; i = (i + 1) | 0) {
                    var degree = this.Degrees.getItem(i);

                    Algorithms.FixerBreaker.SlowBoard.UpdateHash(Bridge.ref(this, "_hashCode"), System.Int64(degree.item2));

                    if (degree.item2 !== previousDegree) {
                        this.DegreeChangeIndices.add(i);
                        previousDegree = degree.item2;
                    }
                }

                this.DegreeChangeIndices.add(this.Degrees.Count);
            },
            MakeMove: function (move) {
                this.LastMove = move.$clone();

                if (move.Stack >= 0) {
                    this.Stacks.setItem(move.Stack, Algorithms.Int64Usage.FlipBits$1(this.Stacks.getItem(move.Stack), System.Int64(move.Added), move.Removed));
                }

                this.Turn = Algorithms.FixerBreaker.SlowBoard.OtherTurn(this.Turn);

                this.ComputeHashCode();
            },
            DoMoveCombination: function (moves) {
                var $t;
                $t = Bridge.getEnumerator(moves, Algorithms.FixerBreaker.Move);
                try {
                    while ($t.moveNext()) {
                        var move = $t.Current.$clone();
                        this.Stacks.setItem(move.Stack, Algorithms.Int64Usage.FlipBits$1(this.Stacks.getItem(move.Stack), System.Int64(move.Added), move.Removed));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.ComputeHashCode();
            },
            Clone: function () {
                var clone = new Algorithms.FixerBreaker.SlowBoard(System.Linq.Enumerable.from(this.Stacks).toList(System.Int64), this.Pot);
                clone.Turn = this.Turn;
                clone.LastMove = this.LastMove.$clone();
                clone._hashCode = this._hashCode;

                clone.ComputeHashCode();

                return clone;
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, Algorithms.FixerBreaker.SlowBoard));
            },
            Equals: function (other) {
                if (other == null) {
                    return false;
                }
                if (this.Turn !== other.Turn) {
                    return false;
                }
                if (this.N !== other.N) {
                    return false;
                }

                if (System.Linq.Enumerable.from(this.Stacks).sequenceEqual(other.Stacks)) {
                    if (this.Turn === Algorithms.FixerBreaker.Turn.Fixer) {
                        return true;
                    }

                    if (this.LastMove.Stack === other.LastMove.Stack && (this.LastMove.Added === other.LastMove.Added && this.LastMove.Removed === other.LastMove.Removed || this.LastMove.Added === other.LastMove.Removed && this.LastMove.Removed === other.LastMove.Added)) {
                        return true;
                    }

                    return false;
                }

                return this.FindPermutation(other) != null;
            },
            FindPermutation: function (other) {
                if (!System.Linq.Enumerable.from(this.Degrees).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f4).sequenceEqual(System.Linq.Enumerable.from(other.Degrees).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f4))) {
                    return null;
                }

                var mappingPairs = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < ((this.DegreeChangeIndices.Count - 1) | 0); i = (i + 1) | 0) {
                    var domain = new (System.Collections.Generic.List$1(System.Int32))();
                    var codomain = new (System.Collections.Generic.List$1(System.Int32))();

                    for (var j = this.DegreeChangeIndices.getItem(i); j < this.DegreeChangeIndices.getItem(((i + 1) | 0)); j = (j + 1) | 0) {
                        domain.add(this.Degrees.getItem(j).item1);
                        codomain.add(other.Degrees.getItem(j).item1);
                    }

                    mappingPairs.add({ item1: domain, item2: codomain });
                }

                return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Object, System.Linq.Enumerable.from(mappingPairs).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f5))).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.SlowBoard.f6)).firstOrDefault(Bridge.fn.bind(this, function (mapping) {
                        return this.SequenceEqualPermuted(mapping, other);
                    }), null);
            },
            FlattenMapping: function (mapping) {
                return { item1: System.Linq.Enumerable.from(mapping).selectMany($asm.$.Algorithms.FixerBreaker.SlowBoard.f7).toList(System.Int32), item2: System.Linq.Enumerable.from(mapping).selectMany($asm.$.Algorithms.FixerBreaker.SlowBoard.f4).toList(System.Int32) };
            },
            SequenceEqualPermuted: function (mapping, other) {
                for (var i = 0; i < this.Stacks.Count; i = (i + 1) | 0) {
                    var permutedStack = Algorithms.FixerBreaker.SlowBoard.ApplyMapping$1(mapping, this.Stacks.getItem(i));
                    if (permutedStack.ne(other.Stacks.getItem(i))) {
                        return false;
                    }
                }

                if (this.Turn === Algorithms.FixerBreaker.Turn.Fixer) {
                    return true;
                }

                if (this.LastMove.Stack !== other.LastMove.Stack) {
                    return false;
                }

                var ours = System.Array.init([this.LastMove.Added, this.LastMove.Removed], System.Int32);
                var theirs = function (_o9) {
                        _o9.add(other.LastMove.Added);
                        _o9.add(other.LastMove.Removed);
                        return _o9;
                    }(new (System.Collections.Generic.List$1(System.Int32))());

                return Algorithms.Utility.ListUtility.Equal(System.Int32, System.Linq.Enumerable.from(Algorithms.FixerBreaker.SlowBoard.ApplyMapping(mapping, ours)).toList(System.Int32), theirs);
            },
            ExactlyEqual: function (other) {
                if (other == null) {
                    return false;
                }
                if (this.Turn !== other.Turn) {
                    return false;
                }
                if (this.N !== other.N) {
                    return false;
                }
                if (this.Pot.ne(other.Pot)) {
                    return false;
                }

                if (System.Linq.Enumerable.from(this.Stacks).sequenceEqual(other.Stacks)) {
                    if (this.Turn === Algorithms.FixerBreaker.Turn.Fixer) {
                        return true;
                    }

                    if (this.LastMove.Stack === other.LastMove.Stack && (this.LastMove.Added === other.LastMove.Added && this.LastMove.Removed === other.LastMove.Removed || this.LastMove.Added === other.LastMove.Removed && this.LastMove.Removed === other.LastMove.Added)) {
                        return true;
                    }
                }

                return false;
            },
            getHashCode: function () {
                return this._hashCode;
            },
            getEnumerator: function () {
                return this.Stacks.getEnumerator();
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            },
            toString: function () {
                return Bridge.toArray(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f8)).join("|");
            },
            ToTex: function () {
                return Algorithms.GenericExtensions.JoinPretty(System.Linq.Enumerable.from(this.Stacks).select($asm.$.Algorithms.FixerBreaker.SlowBoard.f9), ", ");
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.SlowBoard", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.SlowBoard, {
        f1: function (s) {
            return Algorithms.Int64Usage.PopulationCount(s);
        },
        f2: function (c) {
            return { item1: c, item2: System.Linq.Enumerable.from(this.Stacks).count(function (s) {
                        return Algorithms.Int64Usage.IsBitSet(s, System.Int64(c));
                    }) };
        },
        f3: function (x) {
            return x.item2 > 0;
        },
        f4: function (x) {
            return x.item2;
        },
        f5: function (mp) {
            return System.Linq.Enumerable.from(Algorithms.Utility.Permutation.EnumerateAll(mp.item2.Count)).select(function (p) {
                    return { item1: mp.item1, item2: p.Apply(System.Int32, mp.item2) };
                });
        },
        f6: function (mapping) {
            return this.FlattenMapping(mapping);
        },
        f7: function (x) {
            return x.item1;
        },
        f8: function (x) {
            return Algorithms.Int64Usage.ToSetStringSmall(x);
        },
        f9: function (stack, i) {
            return System.String.concat("$L(v_" + (((i + 1) | 0)) + ") = ", System.String.replaceAll(System.String.replaceAll(Algorithms.Int64Usage.ToSetString$2(stack), "{", "\\{"), "}", "\\}"), "$");
        }
    });

    Bridge.define("Algorithms.FixerBreaker.Turn", {
        $kind: "enum",
        statics: {
            fields: {
                Fixer: 0,
                Breaker: 1
            }
        }
    });

    Bridge.define("Algorithms.GenericExtensions", {
        statics: {
            methods: {
                Shuffle: function (T, list) {
                    var rng = new System.Random.$ctor1(System.DateTime.getMillisecond(System.DateTime.getNow()));
                    var n = System.Array.getCount(list, T);
                    while (n > 1) {
                        n = (n - 1) | 0;
                        var k = rng.next$1(((n + 1) | 0));
                        var value = System.Array.getItem(list, k, T);
                        System.Array.setItem(list, k, System.Array.getItem(list, n, T), T);
                        System.Array.setItem(list, n, value, T);
                    }
                },
                ShuffleAll: function (lists) {
                    var $t;
                    var rng = new System.Random.$ctor1(System.DateTime.getMillisecond(System.DateTime.getNow()));
                    var n = System.Array.getCount(System.Array.getItem(lists, 0, System.Collections.IList));
                    while (n > 1) {
                        n = (n - 1) | 0;
                        var k = rng.next$1(((n + 1) | 0));

                        $t = Bridge.getEnumerator(lists, System.Collections.IList);
                        try {
                            while ($t.moveNext()) {
                                var list = $t.Current;
                                var value = System.Array.getItem(list, k);
                                System.Array.setItem(list, k, System.Array.getItem(list, n));
                                System.Array.setItem(list, n, value);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}
                },
                EnList: function (T, t) {
                    return function (_o10) {
                            _o10.add(t);
                            return _o10;
                        }(new (System.Collections.Generic.List$1(T))());
                },
                IndicesWhere: function (T, source, condition) {
                    return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (T, source, condition) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            i,
                            $t,
                            t,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            i = 0;
                                                $t = Bridge.getEnumerator(source, T);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    t = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 2: {
                                            if (condition(t)) {
                                                    $step = 3;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 3: {
                                            $enumerator.current = i;
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            i = (i + 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                FirstIndex: function (T, source, condition) {
                    var $t;
                    var i = 0;
                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            if (condition(t)) {
                                return i;
                            }

                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return -1;
                },
                JoinPretty: function (source, separator) {
                    var count = System.Linq.Enumerable.from(source).count();
                    if (count <= 0) {
                        return "";
                    }
                    if (count === 1) {
                        return System.Linq.Enumerable.from(source).first();
                    }
                    if (count === 2) {
                        return System.String.concat(System.Linq.Enumerable.from(source).elementAt(0), " and ", System.Linq.Enumerable.from(source).elementAt(1));
                    }

                    return System.String.concat(Bridge.toArray(System.Linq.Enumerable.from(source).take(((count - 1) | 0))).join(separator), " and ", System.Linq.Enumerable.from(source).elementAt(((count - 1) | 0)));
                },
                RemoveAll: function (T, list, predicate, onRemoved) {
                    var removed = 0;
                    for (var i = (list.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (predicate(list.getItem(i))) {
                            onRemoved(list.getItem(i));

                            list.removeAt(i);
                            removed = (removed + 1) | 0;
                        }
                    }

                    return removed;
                }
            }
        }
    });

    Bridge.define("Algorithms.Graph", {
        statics: {
            fields: {
                RNG: null,
                CacheHits: System.Int64(0),
                NodesVisited: System.Int64(0),
                DotColors: null,
                TikzColors: null
            },
            props: {
                MemoizeEulerianSubgraphCounting: false
            },
            ctors: {
                init: function () {
                    this.RNG = new System.Random.$ctor1(System.DateTime.getMillisecond(System.DateTime.getNow()));
                    this.DotColors = $asm.$.Algorithms.Graph.f1(new (System.Collections.Generic.List$1(System.String))());
                    this.TikzColors = $asm.$.Algorithms.Graph.f2(new (System.Collections.Generic.List$1(System.String))());
                }
            },
            methods: {
                MaybeIsomorphic: function (A, B) {
                    if (A.N !== B.N) {
                        return false;
                    }
                    if (A.E !== B.E) {
                        return false;
                    }

                    A.TransitivePartition.Refine(A.DegreeSequence.Value, 1);
                    B.TransitivePartition.Refine(B.DegreeSequence.Value, 1);

                    A.TransitivePartition.Refine(A.NodeInvariantOne.Value, 2);
                    B.TransitivePartition.Refine(B.NodeInvariantOne.Value, 2);

                    A.TransitivePartition.Refine(A.NodeInvariantTwo.Value, 3);
                    B.TransitivePartition.Refine(B.NodeInvariantTwo.Value, 3);

                    if (!A.TransitivePartition.equals(B.TransitivePartition)) {
                        return false;
                    }

                    return true;
                },
                Isomorphic: function (A, B) {
                    if (!Algorithms.Graph.MaybeIsomorphic(A, B)) {
                        return false;
                    }

                    return A.Contains(B, true);
                },
                op_Equality: function (A, B) {
                    return A == null && B == null || A != null && B != null && A.equals(B);
                },
                op_Inequality: function (A, B) {
                    return !(Algorithms.Graph.op_Equality(A, B));
                },
                op_Addition: function (A, B) {
                    return A.DisjointUnion(B);
                },
                op_Multiply: function (A, B) {
                    return A.Join(B);
                },
                op_Multiply$1: function (k, A) {
                    var G = A.Clone();
                    for (var i = 1; i < k; i = (i + 1) | 0) {
                        G = Algorithms.Graph.op_Addition(G, A);
                    }

                    G.Initialize();
                    return G;
                }
            }
        },
        fields: {
            _adjacent: null,
            _neighbors: null,
            _complementNeighbors: null,
            _outNeighbors: null,
            _inNeighbors: null,
            _laterNeighbors: null,
            _vertices: null,
            _independentSets: null,
            _maximalIndependentSets: null,
            _independentTwoSets: null,
            _independentThreeSets: null,
            _vertexSubsets: null,
            _e: null
        },
        props: {
            N: 0,
            E: {
                get: function () {
                    return this._e.Value;
                }
            },
            Adjacent: {
                get: function () {
                    return this._adjacent;
                }
            },
            Directed: null,
            VertexWeight: null,
            Neighbors: {
                get: function () {
                    return this._neighbors.Value;
                }
            },
            ComplementNeighbors: {
                get: function () {
                    return this._complementNeighbors.Value;
                }
            },
            OutNeighbors: {
                get: function () {
                    return this._outNeighbors.Value;
                }
            },
            InNeighbors: {
                get: function () {
                    return this._inNeighbors.Value;
                }
            },
            Vertices: {
                get: function () {
                    return this._vertices;
                }
            },
            DegreeSequence: null,
            InDegreeSequence: null,
            OutDegreeSequence: null,
            NodeInvariantOne: null,
            NodeInvariantTwo: null,
            TransitivePartition: null,
            EdgeWeightsWithMultiplicity: null,
            IndependentSets: {
                get: function () {
                    return this._independentSets.Value;
                }
            },
            MaximalIndependentSets: {
                get: function () {
                    return this._maximalIndependentSets.Value;
                }
            },
            Size: {
                get: function () {
                    var t = 0;
                    for (var i = 0; i < this.N; i = (i + 1) | 0) {
                        t = (t + (this.OutDegree(i))) | 0;
                    }

                    return t;
                }
            },
            MaxDegree: {
                get: function () {
                    var max = 0;
                    for (var i = 0; i < this.N; i = (i + 1) | 0) {
                        max = Math.max(max, this.Degree(i));
                    }

                    return max;
                }
            },
            MinDegree: {
                get: function () {
                    var min = 2147483647;
                    for (var i = 0; i < this.N; i = (i + 1) | 0) {
                        min = Math.min(min, this.Degree(i));
                    }

                    return min;
                }
            },
            MaxOutDegree: {
                get: function () {
                    var max = 0;
                    for (var i = 0; i < this.N; i = (i + 1) | 0) {
                        max = Math.max(max, this.OutDegree(i));
                    }

                    return max;
                }
            },
            MaxInDegree: {
                get: function () {
                    var max = 0;
                    for (var i = 0; i < this.N; i = (i + 1) | 0) {
                        max = Math.max(max, this.InDegree(i));
                    }

                    return max;
                }
            }
        },
        ctors: {
            $ctor1: function (edgeWeights, vertexWeight) {
                if (vertexWeight === void 0) { vertexWeight = null; }

                this.$initialize();
                this.N = Bridge.Int.clip32((1 + Math.sqrt(((1 + Bridge.Int.mul(8, edgeWeights.Count)) | 0))) / 2);
                this.VertexWeight = vertexWeight;

                this._vertices = System.Linq.Enumerable.range(0, this.N).toList(System.Int32);
                this._adjacent = System.Array.create(false, null, System.Boolean, this.N, this.N);
                this.Directed = System.Array.create(false, null, System.Boolean, this.N, this.N);

                var k = 0;
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (edgeWeights.getItem(k) !== 0) {
                            this._adjacent.set([i, j], true);
                            this._adjacent.set([j, i], true);

                            if (edgeWeights.getItem(k) > 0) {
                                this.Directed.set([i, j], true);
                            }
                            if (edgeWeights.getItem(k) < 0) {
                                this.Directed.set([j, i], true);
                            }
                        }

                        k = (k + 1) | 0;
                    }
                }

                this.Initialize();
            },
            ctor: function (adjacent, vertexWeight) {
                if (vertexWeight === void 0) { vertexWeight = null; }

                this.$initialize();
                this._adjacent = adjacent;
                this.N = ((System.Array.getLength(this._adjacent, 0) - 1) + 1) | 0;
                this.VertexWeight = vertexWeight;

                this._vertices = System.Linq.Enumerable.range(0, this.N).toList(System.Int32);
                this.Directed = System.Array.create(false, null, System.Boolean, this.N, this.N);

                this.Initialize();
            }
        },
        methods: {
            getItem: function (x, y) {
                return this._adjacent.get([x, y]);
            },
            FromOutNeighborLists: function (outNeighbors) {
                var N = outNeighbors.count;

                var edgeWeights = new (System.Collections.Generic.List$1(System.Int32))();
                for (var i = 0; i < N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < N; j = (j + 1) | 0) {
                        if (outNeighbors.get(i).contains(j)) {
                            edgeWeights.add(1);
                        } else {
                            if (outNeighbors.get(j).contains(i)) {
                                edgeWeights.add(-1);
                            } else {
                                edgeWeights.add(0);
                            }
                        }
                    }
                }

                return new Algorithms.Graph.$ctor1(edgeWeights);
            },
            Initialize: function () {
                this._e = new (Algorithms.Lazy$1(System.Int32)).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f3));

                this.SetupNeighbors();
                this.InitializeLazyLoaders();
            },
            SetupNeighbors: function () {
                this._neighbors = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f4));

                this._complementNeighbors = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f5));

                this._outNeighbors = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f6));

                this._inNeighbors = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f7));

                this._laterNeighbors = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f8));

                this.TransitivePartition = new Algorithms.TransitivePartition(this._vertices);

                this.DegreeSequence = new (Algorithms.Lazy$1(System.Array.type(System.Int32))).ctor(Bridge.fn.bind(this, function () {
                    var $t;
                    var s = System.Array.init(this.N, 0, System.Int32);
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s[System.Array.index(v, s)] = this.Degree(v);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return s;
                }));

                this.InDegreeSequence = new (Algorithms.Lazy$1(System.Array.type(System.Int32))).ctor(Bridge.fn.bind(this, function () {
                    var $t;
                    var s = System.Array.init(this.N, 0, System.Int32);
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s[System.Array.index(v, s)] = this.InDegree(v);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return s;
                }));

                this.OutDegreeSequence = new (Algorithms.Lazy$1(System.Array.type(System.Int32))).ctor(Bridge.fn.bind(this, function () {
                    var $t;
                    var s = System.Array.init(this.N, 0, System.Int32);
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s[System.Array.index(v, s)] = this.OutDegree(v);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return s;
                }));

                this.NodeInvariantOne = new (Algorithms.Lazy$1(System.Array.type(System.Int32))).ctor(Bridge.fn.bind(this, function () {
                    var $t, $t1, $t2, $t3, $t4;
                    var s = System.Array.init(this.N, 0, System.Int32);
                    var sp = System.Array.init(this.N, 0, System.Int32);
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s[System.Array.index(v, s)] = ($t1 = this.DegreeSequence.Value)[System.Array.index(v, $t1)];
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var k = 3;
                    for (var i = 0; i < k; i = (i + 1) | 0) {
                        $t2 = Bridge.getEnumerator(this._vertices);
                        try {
                            while ($t2.moveNext()) {
                                var v1 = $t2.Current;
                                sp[System.Array.index(v1, sp)] = System.Int64.clip32(System.Int64((s[System.Array.index(v1, s)] << 13 | s[System.Array.index(v1, s)] >> 19)).xor(System.Int64(4278255360)));
                                $t3 = Bridge.getEnumerator(this.Neighbors.getItem(v1));
                                try {
                                    while ($t3.moveNext()) {
                                        var w = $t3.Current;
                                        sp[System.Array.index(v1, sp)] = (sp[System.Array.index(v1, sp)] + s[System.Array.index(w, s)]) | 0;
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$dispose();
                            }
                        }
                        $t4 = Bridge.getEnumerator(this._vertices);
                        try {
                            while ($t4.moveNext()) {
                                var v2 = $t4.Current;
                                s[System.Array.index(v2, s)] = sp[System.Array.index(v2, sp)];
                            }
                        } finally {
                            if (Bridge.is($t4, System.IDisposable)) {
                                $t4.System$IDisposable$dispose();
                            }
                        }}

                    return s;
                }));

                this.NodeInvariantTwo = new (Algorithms.Lazy$1(System.Array.type(System.Int32))).ctor(Bridge.fn.bind(this, function () {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    var s = System.Array.init(this.N, 0, System.Int32);
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            s[System.Array.index(v, s)] = ($t1 = this.DegreeSequence.Value)[System.Array.index(v, $t1)];

                            $t2 = Bridge.getEnumerator(this.Neighbors.getItem(v));
                            try {
                                while ($t2.moveNext()) {
                                    var w = $t2.Current;
                                    s[System.Array.index(v, s)] = (s[System.Array.index(v, s)] + (Bridge.Int.mul(3, ($t3 = this.DegreeSequence.Value)[System.Array.index(w, $t3)]))) | 0;

                                    $t4 = Bridge.getEnumerator(this.Neighbors.getItem(w));
                                    try {
                                        while ($t4.moveNext()) {
                                            var z = $t4.Current;
                                            if (z !== v) {
                                                s[System.Array.index(v, s)] = (s[System.Array.index(v, s)] + (Bridge.Int.mul(7, ($t5 = this.DegreeSequence.Value)[System.Array.index(z, $t5)]))) | 0;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t4, System.IDisposable)) {
                                            $t4.System$IDisposable$dispose();
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return s;
                }));
            },
            InitializeLazyLoaders: function () {
                this._independentSets = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).$ctor1(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f9), true);
                this._independentTwoSets = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).$ctor1(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f11), true);
                this._independentThreeSets = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).$ctor1(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f13), true);
                this._vertexSubsets = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).ctor(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f14));
                this._maximalIndependentSets = new (Algorithms.Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))).$ctor1(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f15), true);
            },
            toString: function () {
                return Bridge.toArray(System.Linq.Enumerable.from(this.GetEdgeWeights()).select($asm.$.Algorithms.Graph.f16)).join(" ");
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.toString());
            },
            equals: function (obj) {
                var H = Bridge.as(obj, Algorithms.Graph);
                if (Algorithms.Graph.op_Equality(H, null)) {
                    return false;
                }

                if (this.N !== H.N) {
                    return false;
                }
                if (this.E !== H.E) {
                    return false;
                }

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j]) !== H.getItem(i, j)) {
                            return false;
                        }
                    }
                }

                return true;
            },
            PermuteVertices: function (p) {
                var $t;
                var adjacent = System.Array.create(false, null, System.Boolean, this.N, this.N);

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < this.N; j = (j + 1) | 0) {
                        adjacent.set([p.getItem(i), p.getItem(j)], this._adjacent.get([i, j]));
                    }
                }

                var vertexWeight = null;
                if (this.VertexWeight != null) {
                    vertexWeight = new (System.Collections.Generic.List$1(System.Int32))();
                    var pp = p.Inverse();

                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            vertexWeight.add(this.VertexWeight.getItem(pp.getItem(v)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return new Algorithms.Graph.ctor(adjacent, vertexWeight);
            },
            Contains: function (A, induced) {
                return this.Contains$1(A, induced, $asm.$.Algorithms.Graph.f17);
            },
            Contains$1: function (A, induced, condition) {
                if (this.N < A.N) {
                    return false;
                }

                var tau = new (System.Collections.Generic.List$1(System.Int32))();
                return this.Contains$2(A, induced, condition, System.Array.init(A.N, 0, System.Int32), tau, 0);
            },
            Contains$2: function (A, induced, condition, tau, placed, v) {
                var $t;
                if (v === A.N) {
                    return true;
                }

                var images = System.Linq.Enumerable.from(placed).select(function (u) {
                        return tau[System.Array.index(u, tau)];
                    }).orderBy($asm.$.Algorithms.Graph.f18).toList(System.Int32);
                var requiredNeighbors = System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.IntersectionSorted$1(A.Neighbors.getItem(v), placed)).select(function (u) {
                        return tau[System.Array.index(u, tau)];
                    }).orderBy($asm.$.Algorithms.Graph.f18).toList(System.Int32);
                var candidates = System.Linq.Enumerable.from(this.Vertices).except(images).where(Bridge.fn.bind(this, function (w) {
                    return A.Degree(v) <= this.Degree(w);
                })).where(Bridge.fn.bind(this, function (w) {
                    return induced ? System.Linq.Enumerable.from(requiredNeighbors).sequenceEqual(Algorithms.Utility.ListUtility.Intersection(System.Int32, this.Neighbors.getItem(w), images)) : Algorithms.Utility.ListUtility.SubsetEqualSorted(requiredNeighbors, this.Neighbors.getItem(w));
                })).where(Bridge.fn.bind(this, function (w) {
                    return condition(this, A, w, v);
                }));

                $t = Bridge.getEnumerator(candidates);
                try {
                    while ($t.moveNext()) {
                        var candidate = $t.Current;
                        tau[System.Array.index(v, tau)] = candidate;
                        placed.add(v);

                        if (this.Contains$2(A, induced, condition, tau, placed, ((v + 1) | 0))) {
                            return true;
                        }

                        placed.removeAt(((placed.Count - 1) | 0));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            ContainsInduced: function (A) {
                return this.Contains(A, true);
            },
            ContainsInducedOld: function (A) {
                var $t;
                if (this.N < A.N) {
                    return false;
                }

                var vertexSets = this._vertexSubsets.Value;

                $t = Bridge.getEnumerator(vertexSets);
                try {
                    while ($t.moveNext()) {
                        var vertices = $t.Current;
                        if (Algorithms.Graph.Isomorphic(this.InducedSubgraph(vertices), A)) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            EnumerateConnectedOrderings: function (initialVertices) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Int32)))(Bridge.fn.bind(this, function (initialVertices) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        done,
                        $t,
                        v,
                        $t1,
                        ordering,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Int32)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        done = true;
                                            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.Vertices).except(initialVertices));
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                v = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        done = false;
                                            if (this.DegreeInSubgraph(v, initialVertices) > 0) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 8;
                                            continue;
                                    }
                                    case 3: {
                                        initialVertices.add(v);
                                            $t1 = Bridge.getEnumerator(this.EnumerateConnectedOrderings(initialVertices), System.Collections.Generic.List$1(System.Int32));
                                            $step = 4;
                                            continue;
                                    }
                                    case 4: {
                                        if ($t1.moveNext()) {
                                                ordering = $t1.Current;
                                                $step = 5;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $enumerator.current = System.Linq.Enumerable.from(ordering).toList(System.Int32);
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 7: {
                                        initialVertices.removeAt(((initialVertices.Count - 1) | 0));
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {
                                        if (done) {
                                                $step = 10;
                                                continue;
                                            } 
                                            $step = 12;
                                            continue;
                                    }
                                    case 10: {
                                        $enumerator.current = initialVertices;
                                            $step = 11;
                                            return true;
                                    }
                                    case 11: {
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            IsSpanningSubgraphOf: function (A) {
                if (this.N !== A.N) {
                    return false;
                }

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j]) && !A.getItem(i, j)) {
                            return false;
                        }
                    }
                }

                return true;
            },
            GetEdgeWeights: function () {
                return this.GetEdgeWeights$4(System.Array.init([], System.Int32), System.Array.init([], System.Object));
            },
            GetEdgeWeights$2: function (subgraph) {
                var n = subgraph.Count;
                var w = new (System.Collections.Generic.List$1(System.Int32))(n);

                var k = 0;
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        w.add(0);

                        if (this._adjacent.get([subgraph.getItem(i), subgraph.getItem(j)]) || this._adjacent.get([subgraph.getItem(j), subgraph.getItem(i)])) {
                            w.setItem(k, 1);
                        }

                        k = (k + 1) | 0;
                    }
                }

                return w;
            },
            GetEdgeWeights$1: function (adjacent, directed) {
                return this.GetEdgeWeights$3(adjacent, directed, System.Array.init([], System.Int32), System.Array.init([], System.Object));
            },
            GetEdgeWeights$4: function (removedVertices, removedEdges) {
                return this.GetEdgeWeights$3(this._adjacent, this.Directed, removedVertices, removedEdges);
            },
            GetEdgeWeights$3: function (adjacent, directed, removedVertices, removedEdges) {
                var w = new (System.Collections.Generic.List$1(System.Int32))();

                var k = 0;
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = { v : (i + 1) | 0 }; j.v < this.N; j.v = (j.v + 1) | 0) {
                        w.add(0);

                        if (!System.Linq.Enumerable.from(removedVertices).any((function ($me, j) {
                                return function (v) {
                                    return v === i || v === j.v;
                                };
                            })(this, j)) && !System.Linq.Enumerable.from(removedEdges).any((function ($me, j) {
                                return function (e) {
                                    return e.item1 === i && e.item2 === j.v || e.item1 === j.v && e.item2 === i;
                                };
                            })(this, j))) {
                            if (adjacent.get([i, j.v]) || adjacent.get([j.v, i])) {
                                w.setItem(k, 1);
                                if (directed.get([j.v, i])) {
                                    w.setItem(k, -1);
                                }
                            }
                        }

                        k = (k + 1) | 0;
                    }
                }

                return w;
            },
            InducedSubgraph: function (subgraph) {
                var $t;
                var vertexWeight = null;
                if (this.VertexWeight != null) {
                    vertexWeight = new (System.Collections.Generic.List$1(System.Int32))(subgraph.Count);
                    $t = Bridge.getEnumerator(subgraph);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            vertexWeight.add(this.VertexWeight.getItem(v));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return new Algorithms.Graph.$ctor1(this.GetEdgeWeights$2(subgraph), vertexWeight);
            },
            ToDotWithFactors: function (labelEdges) {
                var $t, $t1;
                if (labelEdges === void 0) { labelEdges = false; }
                var sb = new System.Text.StringBuilder();

                var factors = this.Factor();
                var colorRanges = new (System.Collections.Generic.List$1(System.Collections.Generic.IEnumerable$1(System.Int32)))();
                var last = 0;
                var G = Algorithms.Graphs.Empty;
                $t = Bridge.getEnumerator(factors, Algorithms.Graph);
                try {
                    while ($t.moveNext()) {
                        var factor = $t.Current;
                        colorRanges.add(System.Linq.Enumerable.range(last, factor.N));
                        last = (last + factor.N) | 0;

                        G = Algorithms.Graph.op_Multiply(G, factor);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                sb.appendLine("graph G {");
                sb.appendLine("overlap = false;");
                sb.appendLine("splines=true;");
                sb.appendLine("sep=0.3;");
                sb.appendLine("node[fontsize=20, style=bold, color=black; shape=circle, penwidth=1];");
                sb.appendLine("edge[style=bold, color=black, penwidth=2];");
                $t1 = Bridge.getEnumerator(this._vertices);
                try {
                    while ($t1.moveNext()) {
                        var v = $t1.Current;
                        var colorIndex = System.Linq.Enumerable.from(colorRanges).select($asm.$.Algorithms.Graph.f19).first((function ($me, v) {
                            return function (p) {
                                return System.Linq.Enumerable.from(p.range).contains(v);
                            };
                        })(this, v)).index % Algorithms.Graph.DotColors.Count;
                        var label = v.toString();
                        sb.appendLine(System.String.format("{0} [label = \"{2}\", style = filled, fillcolor = \"{1}\"];", Bridge.box(v, System.Int32), Algorithms.Graph.DotColors.getItem(colorIndex), label));
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                var k = 0;
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (G._adjacent.get([i, j])) {
                            if (labelEdges) {
                                sb.appendLine(System.String.format("{0} -- {1} [label = \"{2}\"]", Bridge.box(i, System.Int32), Bridge.box(j, System.Int32), Bridge.box(k, System.Int32)));
                            } else {
                                sb.appendLine(System.String.format("{0} -- {1}", Bridge.box(i, System.Int32), Bridge.box(j, System.Int32)));
                            }

                            k = (k + 1) | 0;
                        }
                    }
                }
                sb.appendLine("}");

                return sb.toString();
            },
            ToDotForTikz: function () {
                var $t, $t1;
                var sb = new System.Text.StringBuilder();

                var factors = this.Factor();
                var colorRanges = new (System.Collections.Generic.List$1(System.Collections.Generic.IEnumerable$1(System.Int32)))();
                var last = 0;
                var G = Algorithms.Graphs.Empty;
                $t = Bridge.getEnumerator(factors, Algorithms.Graph);
                try {
                    while ($t.moveNext()) {
                        var factor = $t.Current;
                        colorRanges.add(System.Linq.Enumerable.range(last, factor.N));
                        last = (last + factor.N) | 0;

                        G = Algorithms.Graph.op_Multiply(G, factor);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                sb.appendLine("graph G {");
                $t1 = Bridge.getEnumerator(this._vertices);
                try {
                    while ($t1.moveNext()) {
                        var v = $t1.Current;
                        var colorIndex = System.Linq.Enumerable.from(colorRanges).select($asm.$.Algorithms.Graph.f19).first((function ($me, v) {
                            return function (p) {
                                return System.Linq.Enumerable.from(p.range).contains(v);
                            };
                        })(this, v)).index % Algorithms.Graph.TikzColors.Count;
                        sb.appendLine(System.String.format("{0} [label = \"\", style = \"draw, circle, fill={1}\"];", Bridge.box(v, System.Int32), Algorithms.Graph.TikzColors.getItem(colorIndex)));
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (G._adjacent.get([i, j])) {
                            sb.appendLine(System.String.format("{0} -- {1}", Bridge.box(i, System.Int32), Bridge.box(j, System.Int32)));
                        }
                    }
                }
                sb.appendLine("}");

                return sb.toString();
            },
            IsProperFactor: function (subset) {
                var $t;
                if (subset.Count <= 0) {
                    return true;
                }
                if (subset.Count >= this.N) {
                    return false;
                }

                var rest = Algorithms.Utility.ListUtility.Difference(System.Int32, this._vertices, subset);

                var pairs = System.Linq.Enumerable.from(subset).selectMany(function (i) {
                        return rest;
                    }, $asm.$.Algorithms.Graph.f20);

                $t = Bridge.getEnumerator(pairs);
                try {
                    while ($t.moveNext()) {
                        var pair = $t.Current;
                        if (!this._adjacent.get([pair.item1, pair.item2])) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            },
            Factor: function () {
                var properFactors = System.Linq.Enumerable.from(this._vertexSubsets.Value).where(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f21)).toList(System.Collections.Generic.List$1(System.Int32));
                var maximalFactor = Algorithms.Utility.ListUtility.MaximalElements(System.Int32, properFactors).getItem(0);
                if (maximalFactor.Count <= 0) {
                    return Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f22)(new (System.Collections.Generic.List$1(Algorithms.Graph))());
                }

                var rest = Algorithms.Utility.ListUtility.Difference(System.Int32, this._vertices, maximalFactor);
                var maxFactor = this.InducedSubgraph(maximalFactor);
                var restGraph = this.InducedSubgraph(rest);
                return System.Linq.Enumerable.from(maxFactor.Factor()).concat(restGraph.Factor());
            },
            Clone: function () {
                return new Algorithms.Graph.$ctor1(this.GetEdgeWeights());
            },
            Complement: function () {
                var adjacent = System.Array.create(false, null, System.Boolean, this.N, this.N);
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < this.N; j = (j + 1) | 0) {
                        if (i === j) {
                            continue;
                        }
                        adjacent.set([i, j], !this._adjacent.get([i, j]));
                    }
                }

                return new Algorithms.Graph.ctor(adjacent);
            },
            RemoveVertex: function (v) {
                var subgraph = System.Linq.Enumerable.from(this.Vertices).toList(System.Int32);
                subgraph.remove(v);
                return this.InducedSubgraph(subgraph);
            },
            RemoveEdge$1: function (e) {
                return new Algorithms.Graph.$ctor1(this.GetEdgeWeights$4(System.Array.init([], System.Int32), System.Array.init([e], System.Object)));
            },
            RemoveEdge: function (v1, v2) {
                return this.RemoveEdge$1({ item1: v1, item2: v2 });
            },
            AddEdge$1: function (v1, v2, directed) {
                var g = this.Clone();
                g._adjacent.set([v1, v2], (g._adjacent.set([v2, v1], true), true));
                if (directed) {
                    g.Directed.set([v1, v2], true);
                }

                return new Algorithms.Graph.$ctor1(g.GetEdgeWeights());
            },
            AddEdge: function (x, y) {
                var G = this.Clone();
                G._adjacent.set([x, y], true);
                G._adjacent.set([y, x], true);

                G.Initialize();
                return G;
            },
            GetArbitraryEdge: function () {
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j])) {
                            return { item1: i, item2: j };
                        }
                    }
                }

                return null;
            },
            GetEdgeTuples: function () {
                var tuples = new (System.Collections.Generic.List$1(System.Object))();

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j])) {
                            if (this.Directed.get([i, j])) {
                                tuples.add({ item1: i, item2: j });
                            } else {
                                tuples.add({ item1: j, item2: i });
                            }
                        }
                    }
                }

                return tuples;
            },
            DisjointUnion: function (H) {
                var n = (this.N + H.N) | 0;

                var adjacent = System.Array.create(false, null, System.Boolean, n, n);
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < this.N; j = (j + 1) | 0) {
                        adjacent.set([i, j], this._adjacent.get([i, j]));
                    }
                }

                for (var i1 = 0; i1 < H.N; i1 = (i1 + 1) | 0) {
                    for (var j1 = 0; j1 < H.N; j1 = (j1 + 1) | 0) {
                        adjacent.set([((this.N + i1) | 0), ((this.N + j1) | 0)], H.getItem(i1, j1));
                    }
                }

                return new Algorithms.Graph.ctor(adjacent);
            },
            Join: function (H) {
                var G = this.DisjointUnion(H);

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < H.N; j = (j + 1) | 0) {
                        G._adjacent.set([i, ((this.N + j) | 0)], true);
                        G._adjacent.set([((this.N + j) | 0), i], true);
                    }
                }

                G.Initialize();
                return G;
            },
            AttachNewVertex$1: function (neighbors) {
                if (neighbors === void 0) { neighbors = []; }
                return this.AttachNewVertex(Bridge.cast(neighbors, System.Collections.Generic.IList$1(System.Int32)));
            },
            AttachNewVertex: function (neighbors) {
                var $t;
                var adjacent = System.Array.create(false, null, System.Boolean, ((this.N + 1) | 0), ((this.N + 1) | 0));

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < this.N; j = (j + 1) | 0) {
                        adjacent.set([i, j], this._adjacent.get([i, j]));
                    }
                }

                $t = Bridge.getEnumerator(neighbors, System.Int32);
                try {
                    while ($t.moveNext()) {
                        var neighbor = $t.Current;
                        adjacent.set([this.N, neighbor], true);
                        adjacent.set([neighbor, this.N], true);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return new Algorithms.Graph.ctor(adjacent);
            },
            Square: function () {
                var $t, $t1;
                var g = this.Clone();
                $t = Bridge.getEnumerator(this.Vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        $t1 = Bridge.getEnumerator(Algorithms.Utility.LinqExtensions.CartesianProduct$2(System.Int32, this.Neighbors.getItem(v), this.Neighbors.getItem(v)), System.Object);
                        try {
                            while ($t1.moveNext()) {
                                var pair = $t1.Current;
                                if (pair.item1 !== pair.item2) {
                                    g._adjacent.set([pair.item1, pair.item2], (g._adjacent.set([pair.item2, pair.item1], true), true));
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return g.Clone();
            },
            IsRegular: function () {
                if (this.N <= 0) {
                    return true;
                }

                return System.Linq.Enumerable.from(this.Neighbors).all(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f23));
            },
            Degree: function (v) {
                return this.Neighbors.getItem(v).Count;
            },
            OutDegree: function (v) {
                return this.OutNeighbors.getItem(v).Count;
            },
            InDegree: function (v) {
                return this.InNeighbors.getItem(v).Count;
            },
            DegreeInSubgraph: function (v, subgraph) {
                return Algorithms.Utility.ListUtility.IntersectionCountSorted(this.Neighbors.getItem(v), subgraph);
            },
            NeighborsInSubgraph: function (v, subgraph) {
                return Algorithms.Utility.ListUtility.IntersectionSorted$1(this.Neighbors.getItem(v), subgraph);
            },
            SumOverSubgraphNeighbors: function (v, subgraph, g) {
                return System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.IntersectionSorted$1(this.Neighbors.getItem(v), subgraph)).sum(function (w) {
                        return g[System.Array.index(w, g)];
                    });
            },
            GetDegreeMinusKFunc: function (k) {
                return Bridge.fn.bind(this, function (v) {
                    return ((this.Degree(v) - k) | 0);
                });
            },
            EdgesOn: function (A) {
                var edges = 0;
                for (var i = 0; i < A.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < A.Count; j = (j + 1) | 0) {
                        if (this._adjacent.get([A.getItem(i), A.getItem(j)])) {
                            edges = (edges + 1) | 0;
                        }
                    }
                }

                return edges;
            },
            EdgeIndicesOn: function (A) {
                var edgeIndices = new (System.Collections.Generic.List$1(System.Int32))();

                var k = 0;
                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j])) {
                            if (A.contains(i) && A.contains(j)) {
                                edgeIndices.add(k);
                            }

                            k = (k + 1) | 0;
                        }
                    }
                }

                return edgeIndices;
            },
            EdgesBetween: function (A, B) {
                var intersection = Algorithms.Utility.ListUtility.Intersection(System.Int32, A, B);
                A = Algorithms.Utility.ListUtility.Difference(System.Int32, A, B);

                var edges = 0;
                for (var i = 0; i < A.Count; i = (i + 1) | 0) {
                    for (var j = 0; j < B.Count; j = (j + 1) | 0) {
                        if (this._adjacent.get([A.getItem(i), B.getItem(j)])) {
                            edges = (edges + 1) | 0;
                        }
                    }
                }

                return ((edges + this.EdgesOn(intersection)) | 0);
            },
            IndependentSetsInSubgraph: function (firstVertex) {
                if (firstVertex >= this.N) {
                    return $asm.$.Algorithms.Graph.f24(new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))());
                }

                var subgraphSets = this.IndependentSetsInSubgraph(((firstVertex + 1) | 0));

                return System.Linq.Enumerable.from(subgraphSets).union(System.Linq.Enumerable.from(subgraphSets).where(Bridge.fn.bind(this, function (set) {
                            return this.IsIndependentOf(firstVertex, set);
                        })).select(function (set) {
                        var bigger = function (_o15) {
                                _o15.add(firstVertex);
                                return _o15;
                            }(new (System.Collections.Generic.List$1(System.Int32))());
                        bigger.addRange(set);
                        return bigger;
                    }));
            },
            IsIndependentOf: function (v, set) {
                var $t;
                $t = Bridge.getEnumerator(set);
                try {
                    while ($t.moveNext()) {
                        var w = $t.Current;
                        if (w === v || this._adjacent.get([w, v])) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            },
            IsClique: function (subset) {
                for (var i = 0; i < subset.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < subset.Count; j = (j + 1) | 0) {
                        if (!this._adjacent.get([subset.getItem(i), subset.getItem(j)])) {
                            return false;
                        }
                    }
                }

                return true;
            },
            IsIndependent: function (subset) {
                for (var i = 0; i < subset.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < subset.Count; j = (j + 1) | 0) {
                        if (this._adjacent.get([subset.getItem(i), subset.getItem(j)])) {
                            return false;
                        }
                    }
                }

                return true;
            },
            IsComplete: function () {
                return this.IsClique(this._vertices);
            },
            IsCliqueNumberAtLeast: function (k) {
                var $t;
                if (k > this._vertices.Count) {
                    return false;
                }
                $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, this._vertices, k), System.Collections.Generic.List$1(System.Int32));
                try {
                    while ($t.moveNext()) {
                        var set = $t.Current;
                        if (this.IsClique(set)) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            IndependenceNumber: function () {
                return this.IndependenceNumber$1(this.Vertices);
            },
            IndependenceNumber$1: function (subgraph) {
                return System.Linq.Enumerable.from(this._independentSets.Value).max(function (I) {
                        return Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, I, subgraph);
                    });
            },
            MaximumIndependentSubset: function (subgraph) {
                var i = this.IndependenceNumber$1(subgraph);
                return System.Linq.Enumerable.from(this._independentSets.Value).first(function (I) {
                        return Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, I, subgraph) === i;
                    });
            },
            EnumerateMaximalIndependentSets$1: function (set) {
                return this.EnumerateBronKerbosch(set, new (System.Collections.Generic.List$1(System.Int32))(), new (System.Collections.Generic.List$1(System.Int32))());
            },
            EnumerateMaximalIndependentSets: function () {
                return this.EnumerateBronKerbosch(this.Vertices, new (System.Collections.Generic.List$1(System.Int32))(), new (System.Collections.Generic.List$1(System.Int32))());
            },
            EnumerateBronKerbosch: function (P, R, X) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Int32)))(Bridge.fn.bind(this, function (P, R, X) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        PC,
                        XC,
                        u,
                        $t,
                        v,
                        $t1,
                        set,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Int32)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (P.Count === 0 && X.Count === 0) {
                                                $step = 1;
                                                continue;
                                            } else  {
                                                $step = 3;
                                                continue;
                                            }
                                    }
                                    case 1: {
                                        $enumerator.current = System.Linq.Enumerable.from(R).toList(System.Int32);
                                            $step = 2;
                                            return true;
                                    }
                                    case 2: {
                                        $step = 11;
                                        continue;
                                    }
                                    case 3: {
                                        PC = System.Linq.Enumerable.from(P).toList(System.Int32);
                                            XC = System.Linq.Enumerable.from(X).toList(System.Int32);

                                            u = this.TomitaPivot(P, X);
                                            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(P).except(this.ComplementNeighbors.getItem(u)));
                                            $step = 4;
                                            continue;
                                    }
                                    case 4: {
                                        if ($t.moveNext()) {
                                                v = $t.Current;
                                                $step = 5;
                                                continue;
                                            }
                                        $step = 10;
                                        continue;
                                    }
                                    case 5: {
                                        R.add(v);
                                            $t1 = Bridge.getEnumerator(this.EnumerateBronKerbosch(Algorithms.Utility.ListUtility.Intersection(System.Int32, PC, this.ComplementNeighbors.getItem(v)), R, Algorithms.Utility.ListUtility.Intersection(System.Int32, XC, this.ComplementNeighbors.getItem(v))), System.Collections.Generic.List$1(System.Int32));
                                            $step = 6;
                                            continue;
                                    }
                                    case 6: {
                                        if ($t1.moveNext()) {
                                                set = $t1.Current;
                                                $step = 7;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $enumerator.current = set;
                                            $step = 8;
                                            return true;
                                    }
                                    case 8: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 9: {
                                        R.remove(v);
                                            PC.remove(v);
                                            XC.add(v);
                                        $step = 4;
                                        continue;
                                    }
                                    case 10: {
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            TomitaPivot: function (P, X) {
                var $t;
                var max = -1;
                var best = -1;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(P).concat(X));
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        var n = Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, this.ComplementNeighbors.getItem(u), P);
                        if (n > max) {
                            max = n;
                            best = u;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return best;
            },
            FindChiColoring: function () {
                for (var K = 0; K < 2147483647; K = (K + 1) | 0) {
                    var c = this.FindKColoring(this.Vertices, K);
                    if (c != null) {
                        return c;
                    }
                }

                return null;
            },
            FindKColoring: function (subgraph, K) {
                var $t;
                if (subgraph.Count <= 0) {
                    return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                }
                if (K <= 0) {
                    return null;
                }

                $t = Bridge.getEnumerator(this.EnumerateMaximalIndependentSets$1(subgraph), System.Collections.Generic.List$1(System.Int32));
                try {
                    while ($t.moveNext()) {
                        var I = $t.Current;
                        var c = this.FindKColoring(Algorithms.Utility.ListUtility.Difference(System.Int32, subgraph, I), ((K - 1) | 0));
                        if (c != null) {
                            c.insert(0, I);
                            return c;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return null;
            },
            MaxColorableSubset: function (assignment, subset) {
                return this.MaxColorableSubset$1(assignment, 0, subset);
            },
            MaxColorableSubset$1: function (assignment, v, subset) {
                var $t;
                if (v >= subset.Count) {
                    return 0;
                }

                var max = this.MaxColorableSubset$1(assignment, ((v + 1) | 0), subset);

                var colors = assignment.getItem(subset.getItem(v));
                while (colors.ne(System.Int64(0))) {
                    var color = colors.and(colors.neg());

                    var assignmentCopy = new (System.Collections.Generic.List$1(System.Int64))(assignment);
                    $t = Bridge.getEnumerator(this._laterNeighbors.Value.getItem(subset.getItem(v)));
                    try {
                        while ($t.moveNext()) {
                            var neighbor = $t.Current;
                            assignmentCopy.setItem(neighbor, assignmentCopy.getItem(neighbor).and((color.not())));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    max = Math.max(max, ((1 + this.MaxColorableSubset$1(assignmentCopy, ((v + 1) | 0), subset)) | 0));
                    if (max >= subset.Count) {
                        break;
                    }

                    colors = colors.xor(color);
                }

                return max;
            },
            GreedyColor: function (assignment, subset) {
                var $t;
                var coloring = System.Array.init(this.N, System.Int64(0), System.Int64);
                $t = Bridge.getEnumerator(subset);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        var lost = System.Linq.Enumerable.from(this.Neighbors.getItem(v)).aggregate(System.Int64(0), function (l, x) {
                                return l.or(coloring[System.Array.index(x, coloring)]);
                            });
                        var colors = assignment.getItem(v).and(lost.not());
                        coloring[System.Array.index(v, coloring)] = colors.and(colors.neg());
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return System.Linq.Enumerable.from(coloring).count($asm.$.Algorithms.Graph.f25);
            },
            IsChoosable$1: function (assignment, subset) {
                return this.IsChoosable$3(assignment, 0, subset);
            },
            IsChoosable$3: function (assignment, v, subset) {
                var $t;
                if (v >= subset.Count) {
                    return true;
                }

                var colors = assignment.getItem(subset.getItem(v));
                while (colors.ne(System.Int64(0))) {
                    var color = colors.and(colors.neg());

                    var assignmentCopy = new (System.Collections.Generic.List$1(System.Int64))(assignment);
                    $t = Bridge.getEnumerator(this._laterNeighbors.Value.getItem(subset.getItem(v)));
                    try {
                        while ($t.moveNext()) {
                            var neighbor = $t.Current;
                            assignmentCopy.setItem(neighbor, assignmentCopy.getItem(neighbor).and((color.not())));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    if (this.IsChoosable$3(assignmentCopy, ((v + 1) | 0), subset)) {
                        return true;
                    }

                    colors = colors.xor(color);
                }

                return false;
            },
            IsChoosable: function (assignment) {
                return this.IsChoosable$2(assignment, 0);
            },
            IsChoosable$2: function (assignment, v) {
                var $t;
                if (v >= this.N) {
                    return true;
                }

                var colors = assignment.getItem(v);
                while (colors.ne(System.Int64(0))) {
                    var color = colors.and(colors.neg());

                    var assignmentCopy = new (System.Collections.Generic.List$1(System.Int64))(assignment);
                    $t = Bridge.getEnumerator(this._laterNeighbors.Value.getItem(v));
                    try {
                        while ($t.moveNext()) {
                            var neighbor = $t.Current;
                            assignmentCopy.setItem(neighbor, assignmentCopy.getItem(neighbor).and((color.not())));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    if (this.IsChoosable$2(assignmentCopy, ((v + 1) | 0))) {
                        return true;
                    }

                    colors = colors.xor(color);
                }

                return false;
            },
            IsCliqueCovering: function (assignment) {
                var $t;
                $t = Bridge.getEnumerator(this._independentTwoSets.Value);
                try {
                    while ($t.moveNext()) {
                        var set = $t.Current;
                        if ((assignment.getItem(set.getItem(0)).and(assignment.getItem(set.getItem(1)))).ne(System.Int64(0))) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            },
            CheckFGChoosable: function (f, g) {
                var $t;
                var pot = System.Linq.Enumerable.range(0, ((System.Linq.Enumerable.from(this.Vertices).sum(function (v) {
                        return g(v);
                    }) - 1) | 0)).toList(System.Int32);
                var first = System.Linq.Enumerable.range(0, f(0)).toList(System.Int32);
                $t = Bridge.getEnumerator(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(Bridge.cast((System.Array.init([(System.Array.init([first], System.Collections.Generic.List$1(System.Int32)))], System.Array.type(System.Collections.Generic.List$1(System.Int32)))), System.Collections.Generic.IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int32))))).concat(System.Linq.Enumerable.from(this.Vertices).skip(1).select(function (v) {
                        return Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, pot, f(v));
                    }))), System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int32)));
                try {
                    while ($t.moveNext()) {
                        var L = $t.Current;
                        var LL = System.Linq.Enumerable.from(L).toList(System.Collections.Generic.List$1(System.Int32));
                        if (!this.IsGColorable(LL, g)) {
                            return LL;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return null;
            },
            IsGColorable: function (L, g) {
                var $t;
                $t = Bridge.getEnumerator(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(this.Vertices).select(function (v) {
                        return Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, L.getItem(v), g(v));
                    })), System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int32)));
                try {
                    while ($t.moveNext()) {
                        var coloring = $t.Current;
                        if (this.IsProperColoring(System.Linq.Enumerable.from(coloring).toList(System.Collections.Generic.List$1(System.Int32)))) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            IsProperColoring: function (coloring) {
                for (var v = 0; v < this.N; v = (v + 1) | 0) {
                    for (var w = (v + 1) | 0; w < this.N; w = (w + 1) | 0) {
                        if (!this._adjacent.get([v, w])) {
                            continue;
                        }

                        if (Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, coloring.getItem(v), coloring.getItem(w)) > 0) {
                            return false;
                        }
                    }
                }

                return true;
            },
            Mic: function () {
                var $t;
                var mic = 0;
                $t = Bridge.getEnumerator(this.EnumerateMaximalIndependentSets(), System.Collections.Generic.List$1(System.Int32));
                try {
                    while ($t.moveNext()) {
                        var set = $t.Current;
                        var t = System.Linq.Enumerable.from(set).sum(Bridge.fn.bind(this, $asm.$.Algorithms.Graph.f26));
                        mic = Math.max(mic, t);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return mic;
            },
            IsOnlineFChoosable: function (f) {
                var $t;
                Algorithms.Graph.NodesVisited = System.Int64(0);
                Algorithms.Graph.CacheHits = System.Int64(0);

                var fTrace = System.Array.init(this.N, 0, System.Int32);
                $t = Bridge.getEnumerator(this._vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        fTrace[System.Array.index(v, fTrace)] = f(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                var cache = new (System.Collections.Generic.Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean))();

                return this.IsOnlineFChoosable$1(fTrace, System.Linq.Enumerable.repeat(1, this.N).toArray(System.Int32), cache);
            },
            IsOnlineFChoosable$1: function (f, g, cache) {
                var $step = 0,
                    $jumpFromFinally, 
                    key, 
                    result, 
                    gClone, 
                    liveVertices, 
                    freebies, 
                    $t, 
                    v, 
                    cachedResult, 
                    independentSets, 
                    $t1, 
                    V, 
                    $t2, 
                    v1, 
                    maximalIndependentSets, 
                    choosable, 
                    $t3, 
                    C, 
                    $t4, 
                    v2, 
                    $t5, 
                    v3, 
                    $t6, 
                    v4, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                            switch ($step) {
                                case 0: {
                                    Algorithms.Graph.NodesVisited = Algorithms.Graph.NodesVisited.inc();

                                    key = null;

                                    result = true;
                                    gClone = null;

                                    liveVertices = System.Linq.Enumerable.from(g).select($asm.$.Algorithms.Graph.f27).where($asm.$.Algorithms.Graph.f28).toList(System.Int32);
                                    freebies = System.Linq.Enumerable.from(liveVertices).where(Bridge.fn.bind(this, function (v) {
                                        return this.DegreeInSubgraph(v, liveVertices) < f[System.Array.index(v, f)];
                                    })).toList(System.Int32);

                                    while (freebies.Count > 0) {
                                        if (gClone == null) {
                                            gClone = System.Array.init(g.length, 0, System.Int32);
                                            System.Array.copy(g, 0, gClone, 0, g.length);
                                        }

                                        $t = Bridge.getEnumerator(freebies);
                                        try {
                                            while ($t.moveNext()) {
                                                v = $t.Current;
                                                g[System.Array.index(v, g)] = 0;
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$dispose();
                                            }
                                        }
                                        liveVertices = System.Linq.Enumerable.from(g).select($asm.$.Algorithms.Graph.f29).where($asm.$.Algorithms.Graph.f28).toList(System.Int32);
                                        freebies = System.Linq.Enumerable.from(liveVertices).where(Bridge.fn.bind(this, function (v1) {
                                            return this.DegreeInSubgraph(v1, liveVertices) < f[System.Array.index(v1, f)];
                                        })).toList(System.Int32);
                                    }

                                    if (liveVertices.Count <= 0) {
                                        $step = 1;
                                        continue;
                                    } 
                                    $step = 2;
                                    continue;
                                }
                                case 1: {
                                    result = true;
                                    $step = 12;
                                    continue;
                                }
                                case 2: {
                                    if (System.Linq.Enumerable.from(liveVertices).any(function (v1) {
                                        return f[System.Array.index(v1, f)] <= 0;
                                    })) {
                                        $step = 3;
                                        continue;
                                    } 
                                    $step = 4;
                                    continue;
                                }
                                case 3: {
                                    result = false;
                                    $step = 12;
                                    continue;
                                }
                                case 4: {
                                    key = new Algorithms.OnlineChoiceHashGraph(f, g);
                                    cachedResult = { };
                                    if (cache.tryGetValue(key, cachedResult)) {
                                        $step = 5;
                                        continue;
                                    } 
                                    $step = 6;
                                    continue;
                                }
                                case 5: {
                                    Algorithms.Graph.CacheHits = Algorithms.Graph.CacheHits.inc();

                                    key = null;
                                    result = cachedResult.v;
                                    $step = 12;
                                    continue;
                                }
                                case 6: {
                                    independentSets = System.Linq.Enumerable.from(this._independentSets.Value).where(function (set) {
                                        return set.Count >= 1 && Algorithms.Utility.ListUtility.SubsetEqualSorted(set, liveVertices);
                                    }).toList(System.Collections.Generic.List$1(System.Int32));

                                    $t1 = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, liveVertices), System.Collections.Generic.List$1(System.Int32));
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    if ($t1.moveNext()) {
                                        V = $t1.Current;
                                        $step = 8;
                                        continue;
                                    }
                                    $step = 11;
                                    continue;
                                }
                                case 8: {
                                    if (V.Count <= 1) {
                                        $step = 7;
                                        continue;
                                    }

                                    if (System.Linq.Enumerable.from(independentSets).any((function ($me, V) {
                                        return function (ss) {
                                            return Algorithms.Utility.ListUtility.SubsetEqualSorted(V, ss);
                                        };
                                    })(this, V))) {
                                        $step = 7;
                                        continue;
                                    }

                                    $t2 = Bridge.getEnumerator(V);
                                    try {
                                        while ($t2.moveNext()) {
                                            v1 = $t2.Current;
                                            f[System.Array.index(v1, f)] = (f[System.Array.index(v1, f)] - 1) | 0;
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }
                                    maximalIndependentSets = Algorithms.Utility.ListUtility.MaximalElementsSorted$1(System.Linq.Enumerable.from(independentSets).where((function ($me, V) {
                                        return function (set) {
                                            return Algorithms.Utility.ListUtility.SubsetEqualSorted(set, V);
                                        };
                                    })(this, V)).toList(System.Collections.Generic.List$1(System.Int32)));

                                    choosable = false;
                                    $t3 = Bridge.getEnumerator(maximalIndependentSets);
                                    try {
                                        while ($t3.moveNext()) {
                                            C = $t3.Current;
                                            $t4 = Bridge.getEnumerator(C);
                                            try {
                                                while ($t4.moveNext()) {
                                                    v2 = $t4.Current;
                                                    g[System.Array.index(v2, g)] = (g[System.Array.index(v2, g)] - 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t4, System.IDisposable)) {
                                                    $t4.System$IDisposable$dispose();
                                                }
                                            }
                                            choosable = this.IsOnlineFChoosable$1(f, g, cache);

                                            $t5 = Bridge.getEnumerator(C);
                                            try {
                                                while ($t5.moveNext()) {
                                                    v3 = $t5.Current;
                                                    g[System.Array.index(v3, g)] = (g[System.Array.index(v3, g)] + 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t5, System.IDisposable)) {
                                                    $t5.System$IDisposable$dispose();
                                                }
                                            }
                                            if (choosable) {
                                                break;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t3, System.IDisposable)) {
                                            $t3.System$IDisposable$dispose();
                                        }
                                    }
                                    $t6 = Bridge.getEnumerator(V);
                                    try {
                                        while ($t6.moveNext()) {
                                            v4 = $t6.Current;
                                            f[System.Array.index(v4, f)] = (f[System.Array.index(v4, f)] + 1) | 0;
                                        }
                                    } finally {
                                        if (Bridge.is($t6, System.IDisposable)) {
                                            $t6.System$IDisposable$dispose();
                                        }
                                    }
                                    if (!choosable) {
                                        $step = 9;
                                        continue;
                                    } 
                                    $step = 10;
                                    continue;
                                }
                                case 9: {
                                    result = false;
                                    $step = 12;
                                    continue;
                                }
                                case 10: {
                                    $step = 7;
                                    continue;
                                }
                                case 11: {

                                }
                                case 12: {
                                    if (gClone != null) {
                                        System.Array.copy(gClone, 0, g, 0, g.length);
                                    }

                                    if (key != null) {
                                        cache.set(key, result);
                                    }

                                    return result;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                return $asyncBody();
            },
            IsOnlineFGChoosable: function (f, g) {
                Algorithms.Graph.NodesVisited = System.Int64(0);
                Algorithms.Graph.CacheHits = System.Int64(0);

                var cache = new (System.Collections.Generic.Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean))();
                return this.IsOnlineFGChoosable$1(System.Linq.Enumerable.from(this._vertices).select(function (v) {
                        return f(v);
                    }).toArray(System.Int32), System.Linq.Enumerable.from(this._vertices).select(function (v) {
                        return g(v);
                    }).toArray(System.Int32), cache);
            },
            IsOnlineFGChoosable$1: function (f, g, cache) {
                var $step = 0,
                    $jumpFromFinally, 
                    key, 
                    result, 
                    gClone, 
                    changed, 
                    $t, 
                    v, 
                    need, 
                    liveVertices, 
                    cachedResult, 
                    independentSets, 
                    $t1, 
                    V, 
                    $t2, 
                    v1, 
                    maximalIndependentSets, 
                    choosable, 
                    $t3, 
                    C, 
                    $t4, 
                    v2, 
                    $t5, 
                    v3, 
                    $t6, 
                    v4, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                            switch ($step) {
                                case 0: {
                                    Algorithms.Graph.NodesVisited = Algorithms.Graph.NodesVisited.inc();
                                    key = null;

                                    result = true;
                                    gClone = System.Array.init(g.length, 0, System.Int32);
                                    System.Array.copy(g, 0, gClone, 0, g.length);

                                    while (true) {
                                        changed = false;
                                        $t = Bridge.getEnumerator(this._vertices);
                                        try {
                                            while ($t.moveNext()) {
                                                v = $t.Current;
                                                if (g[System.Array.index(v, g)] <= 0) {
                                                    continue;
                                                }

                                                need = (g[System.Array.index(v, g)] + System.Linq.Enumerable.from(this.Neighbors.getItem(v)).sum(function (w) {
                                                    return g[System.Array.index(w, g)];
                                                })) | 0;
                                                if (f[System.Array.index(v, f)] >= need) {
                                                    g[System.Array.index(v, g)] = 0;
                                                    changed = true;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$dispose();
                                            }
                                        }
                                        if (!changed) {
                                            break;
                                        }
                                    }

                                    liveVertices = System.Linq.Enumerable.from(Algorithms.GenericExtensions.IndicesWhere(System.Int32, g, $asm.$.Algorithms.Graph.f30)).toList(System.Int32);
                                    if (liveVertices.Count <= 0) {
                                        $step = 1;
                                        continue;
                                    } 
                                    $step = 2;
                                    continue;
                                }
                                case 1: {
                                    result = true;
                                    $step = 12;
                                    continue;
                                }
                                case 2: {
                                    if (System.Linq.Enumerable.from(liveVertices).any(function (v1) {
                                        return f[System.Array.index(v1, f)] < g[System.Array.index(v1, g)];
                                    })) {
                                        $step = 3;
                                        continue;
                                    } 
                                    $step = 4;
                                    continue;
                                }
                                case 3: {
                                    result = false;
                                    $step = 12;
                                    continue;
                                }
                                case 4: {
                                    key = new Algorithms.OnlineChoiceHashGraph(f, g);
                                    cachedResult = { };
                                    if (cache.tryGetValue(key, cachedResult)) {
                                        $step = 5;
                                        continue;
                                    } 
                                    $step = 6;
                                    continue;
                                }
                                case 5: {
                                    Algorithms.Graph.CacheHits = Algorithms.Graph.CacheHits.inc();

                                    key = null;
                                    result = cachedResult.v;
                                    $step = 12;
                                    continue;
                                }
                                case 6: {
                                    independentSets = System.Linq.Enumerable.from(this._independentSets.Value).where(function (set) {
                                        return set.Count >= 1 && Algorithms.Utility.ListUtility.SubsetEqualSorted(set, liveVertices);
                                    }).toList(System.Collections.Generic.List$1(System.Int32));

                                    $t1 = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, liveVertices), System.Collections.Generic.List$1(System.Int32));
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    if ($t1.moveNext()) {
                                        V = $t1.Current;
                                        $step = 8;
                                        continue;
                                    }
                                    $step = 11;
                                    continue;
                                }
                                case 8: {
                                    if (V.Count <= 1) {
                                        $step = 7;
                                        continue;
                                    }

                                    if (System.Linq.Enumerable.from(independentSets).any((function ($me, V) {
                                        return function (ss) {
                                            return Algorithms.Utility.ListUtility.SubsetEqualSorted(V, ss);
                                        };
                                    })(this, V))) {
                                        $step = 7;
                                        continue;
                                    }

                                    $t2 = Bridge.getEnumerator(V);
                                    try {
                                        while ($t2.moveNext()) {
                                            v1 = $t2.Current;
                                            f[System.Array.index(v1, f)] = (f[System.Array.index(v1, f)] - 1) | 0;
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }
                                    maximalIndependentSets = Algorithms.Utility.ListUtility.MaximalElementsSorted$1(System.Linq.Enumerable.from(independentSets).where((function ($me, V) {
                                        return function (set) {
                                            return Algorithms.Utility.ListUtility.SubsetEqualSorted(set, V);
                                        };
                                    })(this, V)).toList(System.Collections.Generic.List$1(System.Int32)));

                                    choosable = false;
                                    $t3 = Bridge.getEnumerator(maximalIndependentSets);
                                    try {
                                        while ($t3.moveNext()) {
                                            C = $t3.Current;
                                            $t4 = Bridge.getEnumerator(C);
                                            try {
                                                while ($t4.moveNext()) {
                                                    v2 = $t4.Current;
                                                    g[System.Array.index(v2, g)] = (g[System.Array.index(v2, g)] - 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t4, System.IDisposable)) {
                                                    $t4.System$IDisposable$dispose();
                                                }
                                            }
                                            choosable = this.IsOnlineFGChoosable$1(f, g, cache);

                                            $t5 = Bridge.getEnumerator(C);
                                            try {
                                                while ($t5.moveNext()) {
                                                    v3 = $t5.Current;
                                                    g[System.Array.index(v3, g)] = (g[System.Array.index(v3, g)] + 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t5, System.IDisposable)) {
                                                    $t5.System$IDisposable$dispose();
                                                }
                                            }
                                            if (choosable) {
                                                break;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t3, System.IDisposable)) {
                                            $t3.System$IDisposable$dispose();
                                        }
                                    }
                                    $t6 = Bridge.getEnumerator(V);
                                    try {
                                        while ($t6.moveNext()) {
                                            v4 = $t6.Current;
                                            f[System.Array.index(v4, f)] = (f[System.Array.index(v4, f)] + 1) | 0;
                                        }
                                    } finally {
                                        if (Bridge.is($t6, System.IDisposable)) {
                                            $t6.System$IDisposable$dispose();
                                        }
                                    }
                                    if (!choosable) {
                                        $step = 9;
                                        continue;
                                    } 
                                    $step = 10;
                                    continue;
                                }
                                case 9: {
                                    result = false;
                                    $step = 12;
                                    continue;
                                }
                                case 10: {
                                    $step = 7;
                                    continue;
                                }
                                case 11: {

                                }
                                case 12: {
                                    if (gClone != null) {
                                        System.Array.copy(gClone, 0, g, 0, g.length);
                                    }

                                    if (key != null) {
                                        cache.set(key, result);
                                    }

                                    return result;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                return $asyncBody();
            },
            Direction: function (e) {
                if (!this._adjacent.get([e.item1, e.item2])) {
                    return 0;
                }

                return this.Directed.get([e.item2, e.item1]) ? -1 : 1;
            },
            MatchesOutMinusIn: function (outMinusIn) {
                return System.Linq.Enumerable.from(this._vertices).all(Bridge.fn.bind(this, function (v) {
                        return ((this.OutDegree(v) - this.InDegree(v)) | 0) === outMinusIn.getItem(v);
                    }));
            },
            SpanningOutMinusInSubgraphs: function (outMinusIn, edges, spanningEulerianOrientationsCache) {
                Algorithms.Graph.NodesVisited = Algorithms.Graph.NodesVisited.inc();

                var graphs = new (System.Collections.Generic.List$1(Algorithms.Graph))();

                if (System.Linq.Enumerable.from(this._vertices).any(Bridge.fn.bind(this, function (v) {
                        return outMinusIn.getItem(v) > this.OutDegree(v) || ((-outMinusIn.getItem(v)) | 0) > this.InDegree(v);
                    }))) {
                    return graphs;
                }

                var key = new Algorithms.OrientationHashGraph(this, outMinusIn);

                if (Algorithms.Graph.MemoizeEulerianSubgraphCounting) {
                    var spanners = { };
                    if (spanningEulerianOrientationsCache.tryGetValue(key, spanners)) {
                        Algorithms.Graph.CacheHits = Algorithms.Graph.CacheHits.inc();
                        return spanners.v;
                    }
                }

                if (edges.Count <= 0) {
                    if (this.MatchesOutMinusIn(outMinusIn)) {
                        graphs.add(this);
                    }

                    return graphs;
                }

                var e = System.Linq.Enumerable.from(edges).last();

                edges.remove(e);
                var g = this.RemoveEdge$1(e);

                graphs.addRange(g.SpanningOutMinusInSubgraphs(outMinusIn, edges, spanningEulerianOrientationsCache));

                var outMinusInPrime = System.Linq.Enumerable.from(outMinusIn).toList(System.Int32);
                var v1 = e.item1;
                var v2 = e.item2;

                if (this.Direction(e) === 1) {
                    outMinusInPrime.setItem(e.item1, (outMinusInPrime.getItem(e.item1) - 1) | 0);
                    outMinusInPrime.setItem(e.item2, (outMinusInPrime.getItem(e.item2) + 1) | 0);
                } else {
                    outMinusInPrime.setItem(e.item1, (outMinusInPrime.getItem(e.item1) + 1) | 0);
                    outMinusInPrime.setItem(e.item2, (outMinusInPrime.getItem(e.item2) - 1) | 0);

                    v1 = e.item2;
                    v2 = e.item1;
                }

                graphs.addRange(System.Linq.Enumerable.from(g.SpanningOutMinusInSubgraphs(outMinusInPrime, edges, spanningEulerianOrientationsCache)).select(function (graph) {
                        return graph.AddEdge$1(v1, v2, true);
                    }));

                if (Algorithms.Graph.MemoizeEulerianSubgraphCounting) {
                    spanningEulerianOrientationsCache.set(key, graphs);
                }

                edges.add(e);
                return graphs;
            },
            SpanningEulerianSubgraphs: function (edges, spanningEulerianOrientationsCache) {
                return this.SpanningOutMinusInSubgraphs(System.Linq.Enumerable.from(System.Array.init(this.N, 0, System.Int32)).toList(System.Int32), edges, spanningEulerianOrientationsCache);
            },
            CountSpanningEulerianSubgraphs: function (even, odd) {
                var $t;
                Algorithms.Graph.CacheHits = System.Int64(0);
                Algorithms.Graph.NodesVisited = System.Int64(0);
                var spanningEulerianOrientationsCache = new (System.Collections.Generic.Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph)))();
                var edges = this.GetEdgeTuples();

                even.v = 0;
                odd.v = 0;
                $t = Bridge.getEnumerator(this.SpanningEulerianSubgraphs(edges, spanningEulerianOrientationsCache));
                try {
                    while ($t.moveNext()) {
                        var g = $t.Current;
                        if (g.Size % 2 === 0) {
                            even.v = (even.v + 1) | 0;
                        } else {
                            odd.v = (odd.v + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            CountSpanningEulerianSubgraphsUsingVertices: function (vertices, even, odd) {
                var $step = 0,
                    $jumpFromFinally, 
                    spanningEulerianOrientationsCache, 
                    edges, 
                    $t, 
                    g, 
                    $t1, 
                    v, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                            switch ($step) {
                                case 0: {
                                    Algorithms.Graph.CacheHits = System.Int64(0);
                                    Algorithms.Graph.NodesVisited = System.Int64(0);

                                    if (vertices == null) {
                                        vertices = new (System.Collections.Generic.List$1(System.Int32))();
                                    }

                                    spanningEulerianOrientationsCache = new (System.Collections.Generic.Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph)))();
                                    edges = this.GetEdgeTuples();

                                    even.v = 0;
                                    odd.v = 0;
                                    $t = Bridge.getEnumerator(this.SpanningEulerianSubgraphs(edges, spanningEulerianOrientationsCache));
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ($t.moveNext()) {
                                        g = $t.Current;
                                        $step = 2;
                                        continue;
                                    }
                                    $step = 9;
                                    continue;
                                }
                                case 2: {
                                    $t1 = Bridge.getEnumerator(vertices);
                                    $step = 3;
                                    continue;
                                }
                                case 3: {
                                    if ($t1.moveNext()) {
                                        v = $t1.Current;
                                        $step = 4;
                                        continue;
                                    }
                                    $step = 7;
                                    continue;
                                }
                                case 4: {
                                    if (g.Degree(v) <= 0) {
                                        $step = 5;
                                        continue;
                                    } 
                                    $step = 6;
                                    continue;
                                }
                                case 5: {
                                    $step = 8;
                                    continue;
                                }
                                case 6: {
                                    $step = 3;
                                    continue;
                                }
                                case 7: {
                                    if (g.Size % 2 === 0) {
                                        even.v = (even.v + 1) | 0;
                                    } else {
                                        odd.v = (odd.v + 1) | 0;
                                    }
                                }
                                case 8: {
                                    ;
                                    $step = 1;
                                    continue;
                                }
                                case 9: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                return $asyncBody();
            },
            CountSpanningEulerianSubgraphsUsingEdges: function (edges, even, odd) {
                var $step = 0,
                    $jumpFromFinally, 
                    spanningEulerianOrientationsCache, 
                    edgeTuples, 
                    $t, 
                    g, 
                    $t1, 
                    e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                            switch ($step) {
                                case 0: {
                                    Algorithms.Graph.CacheHits = System.Int64(0);
                                    Algorithms.Graph.NodesVisited = System.Int64(0);

                                    if (edges == null) {
                                        edges = new (System.Collections.Generic.List$1(System.Object))();
                                    }

                                    spanningEulerianOrientationsCache = new (System.Collections.Generic.Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph)))();
                                    edgeTuples = this.GetEdgeTuples();

                                    even.v = 0;
                                    odd.v = 0;
                                    $t = Bridge.getEnumerator(this.SpanningEulerianSubgraphs(edgeTuples, spanningEulerianOrientationsCache));
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ($t.moveNext()) {
                                        g = $t.Current;
                                        $step = 2;
                                        continue;
                                    }
                                    $step = 9;
                                    continue;
                                }
                                case 2: {
                                    $t1 = Bridge.getEnumerator(edges);
                                    $step = 3;
                                    continue;
                                }
                                case 3: {
                                    if ($t1.moveNext()) {
                                        e = $t1.Current;
                                        $step = 4;
                                        continue;
                                    }
                                    $step = 7;
                                    continue;
                                }
                                case 4: {
                                    if (!g._adjacent.get([e.item1, e.item2])) {
                                        $step = 5;
                                        continue;
                                    } 
                                    $step = 6;
                                    continue;
                                }
                                case 5: {
                                    $step = 8;
                                    continue;
                                }
                                case 6: {
                                    $step = 3;
                                    continue;
                                }
                                case 7: {
                                    if (g.Size % 2 === 0) {
                                        even.v = (even.v + 1) | 0;
                                    } else {
                                        odd.v = (odd.v + 1) | 0;
                                    }
                                }
                                case 8: {
                                    ;
                                    $step = 1;
                                    continue;
                                }
                                case 9: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                return $asyncBody();
            },
            EnumerateOrientations$1: function (requiredIndegree) {
                return new (Bridge.GeneratorEnumerable$1(Algorithms.Graph))(Bridge.fn.bind(this, function (requiredIndegree) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        gain,
                        $t,
                        inNeighborList,
                        adjacent,
                        directed,
                        i,
                        v,
                        $t1,
                        w,
                        outNeighbors,
                        $t2,
                        w1,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.Graph))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        gain = System.Array.init(this.N, 0, System.Int32);

                                            $t = Bridge.getEnumerator(this.EnumerateOrientationsFor(0, requiredIndegree, gain), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                inNeighborList = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        adjacent = System.Array.create(false, null, System.Boolean, this.N, this.N);
                                            directed = System.Array.create(false, null, System.Boolean, this.N, this.N);

                                            for (i = 0; i < inNeighborList.Count; i = (i + 1) | 0) {
                                                v = (((inNeighborList.Count - 1) | 0) - i) | 0;

                                                $t1 = Bridge.getEnumerator(inNeighborList.getItem(i));
                                                try {
                                                    while ($t1.moveNext()) {
                                                        w = $t1.Current;
                                                        adjacent.set([v, w], true);
                                                        adjacent.set([w, v], true);

                                                        directed.set([w, v], true);
                                                    }
                                                } finally {
                                                    if (Bridge.is($t1, System.IDisposable)) {
                                                        $t1.System$IDisposable$dispose();
                                                    }
                                                }
                                                outNeighbors = Algorithms.Utility.ListUtility.Difference(System.Int32, this._laterNeighbors.Value.getItem(v), inNeighborList.getItem(i));

                                                $t2 = Bridge.getEnumerator(outNeighbors);
                                                try {
                                                    while ($t2.moveNext()) {
                                                        w1 = $t2.Current;
                                                        adjacent.set([v, w1], true);
                                                        adjacent.set([w1, v], true);

                                                        directed.set([v, w1], true);
                                                    }
                                                } finally {
                                                    if (Bridge.is($t2, System.IDisposable)) {
                                                        $t2.System$IDisposable$dispose();
                                                    }
                                                }}

                                            $enumerator.current = new Algorithms.Graph.$ctor1(this.GetEdgeWeights$1(adjacent, directed));
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            EnumerateOrientations: function (fast) {
                return new (Bridge.GeneratorEnumerable$1(Algorithms.Graph))(Bridge.fn.bind(this, function (fast) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        undirectedWeights,
                        edgeIndices,
                        undirected,
                        $t,
                        list,
                        weights,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.Graph))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (fast === void 0) { fast = false; }
                                            undirectedWeights = System.Linq.Enumerable.from(this.GetEdgeWeights()).select($asm.$.Algorithms.Graph.f31).toList(System.Int32);
                                            edgeIndices = System.Linq.Enumerable.from(undirectedWeights).select($asm.$.Algorithms.Graph.f32).where($asm.$.Algorithms.Graph.f33).toList(System.Int32);

                                            undirected = new Algorithms.Graph.$ctor1(undirectedWeights);

                                            $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, edgeIndices), System.Collections.Generic.List$1(System.Int32));
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                list = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        weights = System.Linq.Enumerable.from(undirectedWeights).select((function ($me, list) {
                                                    return function (w, i) {
                                                        return list.contains(i) ? ((-w) | 0) : w;
                                                    };
                                                })(this, list)).toList(System.Int32);

                                            $enumerator.current = new Algorithms.Graph.$ctor1(weights);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            EnumerateOrientationsFor: function (v, requiredIndegree, gain) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function (v, requiredIndegree, gain) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        $t,
                        ins,
                        outs,
                        $t1,
                        x,
                        $t2,
                        o,
                        $t3,
                        x1,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (v >= ((this.N - 1) | 0)) {
                                                $step = 1;
                                                continue;
                                            } else  {
                                                $step = 6;
                                                continue;
                                            }
                                    }
                                    case 1: {
                                        if (gain[System.Array.index(v, gain)] < requiredIndegree(v)) {
                                                $step = 2;
                                                continue;
                                            } else  {
                                                $step = 3;
                                                continue;
                                            }
                                    }
                                    case 2: {
                                        return false;
                                    }
                                    case 3: {
                                        $enumerator.current = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 14;
                                        continue;
                                    }
                                    case 6: {
                                        $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, this._laterNeighbors.Value.getItem(v)), System.Collections.Generic.List$1(System.Int32));
                                            $step = 7;
                                            continue;
                                    }
                                    case 7: {
                                        if ($t.moveNext()) {
                                                ins = $t.Current;
                                                $step = 8;
                                                continue;
                                            }
                                        $step = 13;
                                        continue;
                                    }
                                    case 8: {
                                        if (ins.Count < ((requiredIndegree(v) - gain[System.Array.index(v, gain)]) | 0)) {
                                                $step = 7;
                                                continue;
                                            }

                                            outs = Algorithms.Utility.ListUtility.Difference(System.Int32, this._laterNeighbors.Value.getItem(v), ins);

                                            $t1 = Bridge.getEnumerator(outs);
                                            try {
                                                while ($t1.moveNext()) {
                                                    x = $t1.Current;
                                                    gain[System.Array.index(x, gain)] = (gain[System.Array.index(x, gain)] + 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$dispose();
                                                }
                                            }
                                            $t2 = Bridge.getEnumerator(this.EnumerateOrientationsFor(((v + 1) | 0), requiredIndegree, gain), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                            $step = 9;
                                            continue;
                                    }
                                    case 9: {
                                        if ($t2.moveNext()) {
                                                o = $t2.Current;
                                                $step = 10;
                                                continue;
                                            }
                                        $step = 12;
                                        continue;
                                    }
                                    case 10: {
                                        o.add(ins);

                                            $enumerator.current = o;
                                            $step = 11;
                                            return true;
                                    }
                                    case 11: {
                                        $step = 9;
                                        continue;
                                    }
                                    case 12: {
                                        $t3 = Bridge.getEnumerator(outs);
                                            try {
                                                while ($t3.moveNext()) {
                                                    x1 = $t3.Current;
                                                    gain[System.Array.index(x1, gain)] = (gain[System.Array.index(x1, gain)] - 1) | 0;
                                                }
                                            } finally {
                                                if (Bridge.is($t3, System.IDisposable)) {
                                                    $t3.System$IDisposable$dispose();
                                                }
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 13: {
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            GenerateRandomOrientation: function () {
                var $t;
                var undirectedWeights = System.Linq.Enumerable.from(this.GetEdgeWeights()).select($asm.$.Algorithms.Graph.f31).toList(System.Int32);
                var edgeIndices = System.Linq.Enumerable.from(undirectedWeights).select($asm.$.Algorithms.Graph.f32).where($asm.$.Algorithms.Graph.f33).toList(System.Int32);

                var list = new (System.Collections.Generic.List$1(System.Int32))(((Bridge.Int.div(this.E, 2)) | 0));
                $t = Bridge.getEnumerator(edgeIndices);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        if (Algorithms.Graph.RNG.next$1(2) === 0) {
                            list.add(i);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                var weights = System.Linq.Enumerable.from(undirectedWeights).select(function (w, i1) {
                        return list.contains(i1) ? ((-w) | 0) : w;
                    }).toList(System.Int32);

                return new Algorithms.Graph.$ctor1(weights);
            },
            EnumerateAcyclicOrientations: function () {
                return this.EnumerateAcyclicOrientations$1(0, new (System.Collections.Generic.Dictionary$2(System.Int32, System.Collections.Generic.List$1(System.Int32)))());
            },
            EnumerateAcyclicOrientations$1: function (i, outNeighbors) {
                return new (Bridge.GeneratorEnumerable$1(Algorithms.Graph))(Bridge.fn.bind(this, function (i, outNeighbors) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        neighbors,
                        clone,
                        $t,
                        g,
                        sortedNeighbors,
                        $t1,
                        d,
                        clone1,
                        $t2,
                        v,
                        $t3,
                        g1,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.Graph))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        if (i >= this.N) {
                                                $step = 1;
                                                continue;
                                            } else  {
                                                $step = 3;
                                                continue;
                                            }
                                    }
                                    case 1: {
                                        $enumerator.current = this.FromOutNeighborLists(outNeighbors);
                                            $step = 2;
                                            return true;
                                    }
                                    case 2: {
                                        $step = 18;
                                        continue;
                                    }
                                    case 3: {
                                        neighbors = this.NeighborsInSubgraph(i, System.Linq.Enumerable.range(0, i).toList(System.Int32));
                                            if (neighbors.Count <= 0) {
                                                $step = 4;
                                                continue;
                                            } else  {
                                                $step = 9;
                                                continue;
                                            }
                                    }
                                    case 4: {
                                        clone = this.CloneOutNeighbors(outNeighbors);

                                            clone.set(i, new (System.Collections.Generic.List$1(System.Int32))());
                                            $t = Bridge.getEnumerator(this.EnumerateAcyclicOrientations$1(((i + 1) | 0), clone), Algorithms.Graph);
                                            $step = 5;
                                            continue;
                                    }
                                    case 5: {
                                        if ($t.moveNext()) {
                                                g = $t.Current;
                                                $step = 6;
                                                continue;
                                            }
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $enumerator.current = g;
                                            $step = 7;
                                            return true;
                                    }
                                    case 7: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 17;
                                        continue;
                                    }
                                    case 9: {
                                        sortedNeighbors = this.TopologicalSort(i, neighbors, outNeighbors);
                                            $t1 = Bridge.getEnumerator(this.EnumerateLegalDirectionAssignments(i, sortedNeighbors, outNeighbors), System.Int64);
                                            $step = 10;
                                            continue;
                                    }
                                    case 10: {
                                        if ($t1.moveNext()) {
                                                d = $t1.Current;
                                                $step = 11;
                                                continue;
                                            }
                                        $step = 16;
                                        continue;
                                    }
                                    case 11: {
                                        clone1 = this.CloneOutNeighbors(outNeighbors);

                                            clone1.set(i, System.Linq.Enumerable.from(Algorithms.Int64Usage.EnumerateBits(d)).select(function (b) {
                                                    return sortedNeighbors.getItem(((((sortedNeighbors.Count - 1) | 0) - b) | 0));
                                                }).toList(System.Int32));
                                            $t2 = Bridge.getEnumerator(Algorithms.Utility.ListUtility.Difference(System.Int32, neighbors, clone1.get(i)));
                                            try {
                                                while ($t2.moveNext()) {
                                                    v = $t2.Current;
                                                    clone1.get(v).add(i);
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$dispose();
                                                }
                                            }
                                            $t3 = Bridge.getEnumerator(this.EnumerateAcyclicOrientations$1(((i + 1) | 0), clone1), Algorithms.Graph);
                                            $step = 12;
                                            continue;
                                    }
                                    case 12: {
                                        if ($t3.moveNext()) {
                                                g1 = $t3.Current;
                                                $step = 13;
                                                continue;
                                            }
                                        $step = 15;
                                        continue;
                                    }
                                    case 13: {
                                        $enumerator.current = g1;
                                            $step = 14;
                                            return true;
                                    }
                                    case 14: {
                                        $step = 12;
                                        continue;
                                    }
                                    case 15: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 16: {
                                        $step = 17;
                                        continue;
                                    }
                                    case 17: {
                                        $step = 18;
                                        continue;
                                    }
                                    case 18: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            CloneOutNeighbors: function (outNeighbors) {
                var $t;
                var clone = new (System.Collections.Generic.Dictionary$2(System.Int32, System.Collections.Generic.List$1(System.Int32)))();

                $t = Bridge.getEnumerator(outNeighbors);
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        clone.set(kvp.key, System.Linq.Enumerable.from(kvp.value).toList(System.Int32));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return clone;
            },
            TopologicalSort: function (i, vertices, outNeighbors) {
                var $t, $t1, $t2;
                var inNeighborCount = System.Array.init(i, 0, System.Int32);
                $t = Bridge.getEnumerator(outNeighbors);
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        if (!vertices.contains(kvp.key)) {
                            continue;
                        }

                        $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(kvp.value).intersect(vertices));
                        try {
                            while ($t1.moveNext()) {
                                var v = $t1.Current;
                                inNeighborCount[System.Array.index(v, inNeighborCount)] = (inNeighborCount[System.Array.index(v, inNeighborCount)] + 1) | 0;
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                var sorted = new (System.Collections.Generic.List$1(System.Int32))(i);
                var sources = System.Linq.Enumerable.from(vertices).where(function (v1) {
                        return inNeighborCount[System.Array.index(v1, inNeighborCount)] === 0;
                    }).toList(System.Int32);

                while (sources.Count > 0) {
                    var source = sources.getItem(((sources.Count - 1) | 0));
                    sources.removeAt(((sources.Count - 1) | 0));

                    sorted.add(source);
                    $t2 = Bridge.getEnumerator(System.Linq.Enumerable.from(outNeighbors.get(source)).intersect(vertices));
                    try {
                        while ($t2.moveNext()) {
                            var v1 = $t2.Current;
                            inNeighborCount[System.Array.index(v1, inNeighborCount)] = (inNeighborCount[System.Array.index(v1, inNeighborCount)] - 1) | 0;
                            if (inNeighborCount[System.Array.index(v1, inNeighborCount)] === 0) {
                                sources.add(v1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$dispose();
                        }
                    }}

                return sorted;
            },
            EnumerateLegalDirectionAssignments: function (i, sortedNeighbors, outNeighbors) {
                return new (Bridge.GeneratorEnumerable$1(System.Int64))(Bridge.fn.bind(this, function (i, sortedNeighbors, outNeighbors) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        d,
                        ancestorLists,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int64))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        d = System.Int64(0);

                                            ancestorLists = this.GetAncestorLists(i, outNeighbors);
                                            
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( true ) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                    }
                                    case 2: {
                                        $enumerator.current = d;
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        if (Algorithms.Int64Usage.AllSet(d, System.Int64(sortedNeighbors.Count))) {
                                                $step = 4;
                                                continue;
                                            }

                                            d = this.Closure(d.add(System.Int64(1)), sortedNeighbors, ancestorLists);

                                            $step = 1;
                                            continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            Closure: function (d, sortedNeighbors, ancestorLists) {
                var $t, $t1;
                var done = false;

                while (!done) {
                    done = true;

                    $t = Bridge.getEnumerator(sortedNeighbors);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            var vBit = (((sortedNeighbors.Count - 1) | 0) - sortedNeighbors.indexOf(v)) | 0;
                            $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(ancestorLists.get(v)).intersect(sortedNeighbors));
                            try {
                                while ($t1.moveNext()) {
                                    var w = $t1.Current;
                                    var wBit = (((sortedNeighbors.Count - 1) | 0) - sortedNeighbors.indexOf(w)) | 0;
                                    if (Algorithms.Int64Usage.IsBitSet(d, System.Int64(wBit)) && !Algorithms.Int64Usage.IsBitSet(d, System.Int64(vBit))) {
                                        d = Algorithms.Int64Usage.SetBit(d, System.Int64(vBit));
                                        done = false;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return d;
            },
            GetAncestorLists: function (i, outNeighbors) {
                var $t;
                var ancestorLists = new (System.Collections.Generic.Dictionary$2(System.Int32, System.Collections.Generic.List$1(System.Int32)))();

                for (var v = 0; v < i; v = (v + 1) | 0) {
                    ancestorLists.set(v, function (_o16) {
                            _o16.add(v);
                            return _o16;
                        }(new (System.Collections.Generic.List$1(System.Int32))()));
                }

                var done = false;
                while (!done) {
                    done = true;

                    for (var v1 = 0; v1 < i; v1 = (v1 + 1) | 0) {
                        $t = Bridge.getEnumerator(outNeighbors.get(v1));
                        try {
                            while ($t.moveNext()) {
                                var w = $t.Current;
                                if (w >= i) {
                                    continue;
                                }

                                var c = ancestorLists.get(w).Count;
                                ancestorLists.set(w, Algorithms.Utility.ListUtility.Union$1(System.Int32, ancestorLists.get(w), ancestorLists.get(v1)));

                                if (ancestorLists.get(w).Count > c) {
                                    done = false;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}
                }

                return ancestorLists;
            },
            FindFactors: function () {
                var equivalenceRelation = new (Algorithms.Utility.EquivalenceRelation$1(System.Int32))();

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    equivalenceRelation.AddElement(i);

                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (!this._adjacent.get([i, j])) {
                            equivalenceRelation.Relate(i, j);
                        }
                    }
                }

                return equivalenceRelation;
            },
            FindComponents: function () {
                var equivalenceRelation = new (Algorithms.Utility.EquivalenceRelation$1(System.Int32))();

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    equivalenceRelation.AddElement(i);

                    for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                        if (this._adjacent.get([i, j])) {
                            equivalenceRelation.Relate(i, j);
                        }
                    }
                }

                return equivalenceRelation;
            },
            FindComponents$1: function (v) {
                var equivalenceRelation = new (Algorithms.Utility.EquivalenceRelation$1(System.Int32))();

                for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                    equivalenceRelation.AddElement(v.getItem(i));

                    for (var j = (i + 1) | 0; j < v.Count; j = (j + 1) | 0) {
                        if (this._adjacent.get([v.getItem(i), v.getItem(j)])) {
                            equivalenceRelation.Relate(v.getItem(i), v.getItem(j));
                        }
                    }
                }

                return equivalenceRelation;
            },
            ComputeDiameter: function () {
                var $t, $t1;
                var distance = { };
                var next = { };
                this.FloydWarshall(distance, next);
                var diameter = 0;
                $t = Bridge.getEnumerator(this.Vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        $t1 = Bridge.getEnumerator(this.Vertices);
                        try {
                            while ($t1.moveNext()) {
                                var w = $t1.Current;
                                if (distance.v.get([v, w]) > diameter) {
                                    diameter = distance.v.get([v, w]);
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return diameter;
            },
            FloydWarshall: function (distance, next) {
                distance.v = System.Array.create(0, null, System.Int32, this.N, this.N);
                next.v = System.Array.create(0, null, System.Int32, this.N, this.N);

                for (var i = 0; i < this.N; i = (i + 1) | 0) {
                    for (var j = 0; j < this.N; j = (j + 1) | 0) {
                        distance.v.set([i, j], 715827882);
                    }
                }

                for (var i1 = 0; i1 < this.N; i1 = (i1 + 1) | 0) {
                    for (var j1 = 0; j1 < this.N; j1 = (j1 + 1) | 0) {
                        if (i1 === j1) {
                            distance.v.set([i1, j1], 0);
                        } else {
                            if (this._adjacent.get([i1, j1])) {
                                /* if (Directed[i, j])
                                   distance[i, j] = 1;

                                if (Directed[j, i])
                                   distance[j, i] = 1;*/

                                distance.v.set([i1, j1], 1);
                                distance.v.set([j1, i1], 1);
                            }
                        }
                    }
                }

                for (var i2 = 0; i2 < this.N; i2 = (i2 + 1) | 0) {
                    for (var j2 = 0; j2 < this.N; j2 = (j2 + 1) | 0) {
                        next.v.set([i2, j2], -1);
                    }
                }

                for (var k = 0; k < this.N; k = (k + 1) | 0) {
                    for (var i3 = 0; i3 < this.N; i3 = (i3 + 1) | 0) {
                        for (var j3 = 0; j3 < this.N; j3 = (j3 + 1) | 0) {
                            if (((distance.v.get([i3, k]) + distance.v.get([k, j3])) | 0) < distance.v.get([i3, j3])) {
                                distance.v.set([i3, j3], (distance.v.get([i3, k]) + distance.v.get([k, j3])) | 0);
                                next.v.set([i3, j3], k);
                            }
                        }
                    }
                }
            },
            FloydWarshallShortestPath: function (v, w, distance, next) {
                if (distance.get([v, w]) === 2147483647) {
                    return null;
                }

                if (next.get([v, w]) === -1) {
                    return System.Array.init([v, w], System.Int32);
                }

                return System.Linq.Enumerable.from(this.FloydWarshallShortestPath(v, next.get([v, w]), distance, next)).union(System.Linq.Enumerable.from(this.FloydWarshallShortestPath(next.get([v, w]), w, distance, next)).skip(1));
            }
        }
    });

    Bridge.define("$AnonymousType$2", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (range, index) {
                this.range = range;
                this.index = index;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$2)) {
                    return false;
                }
                return Bridge.equals(this.range, o.range) && Bridge.equals(this.index, o.index);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196187, this.range, this.index]);
                return h;
            },
            toJSON: function () {
                return {
                    range : this.range,
                    index : this.index
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"index","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_index","t":8,"rt":System.Int32,"fg":"index"},"fn":"index"},{"a":2,"n":"range","t":16,"rt":System.Collections.Generic.IEnumerable$1(System.Int32),"g":{"a":2,"n":"get_range","t":8,"rt":System.Collections.Generic.IEnumerable$1(System.Int32),"fg":"range"},"fn":"range"}]}; }
            }
        }
    });

    Bridge.ns("Algorithms.Graph", $asm.$);

    Bridge.apply($asm.$.Algorithms.Graph, {
        f1: function (_o11) {
            _o11.add("cadetblue");
            _o11.add("brown");
            _o11.add("dodgerblue");
            _o11.add("turquoise");
            _o11.add("orchid");
            _o11.add("blue");
            _o11.add("red");
            _o11.add("green");
            _o11.add("yellow");
            _o11.add("cyan");
            _o11.add("limegreen");
            _o11.add("pink");
            _o11.add("orange");
            _o11.add("goldenrod");
            _o11.add("aquamarine");
            _o11.add("black");
            return _o11;
        },
        f2: function (_o12) {
            _o12.add("blue");
            _o12.add("red");
            _o12.add("green");
            _o12.add("Orchid");
            _o12.add("yellow");
            _o12.add("cyan");
            _o12.add("Turquoise");
            _o12.add("CadetBlue");
            _o12.add("LimeGreen");
            _o12.add("brown");
            _o12.add("pink");
            _o12.add("orange");
            _o12.add("Cerulean");
            _o12.add("Goldenrod");
            _o12.add("Aquamarine");
            _o12.add("black");
            return _o12;
        },
        f3: function () {
            var e = 0;

            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                for (var j = (i + 1) | 0; j < this.N; j = (j + 1) | 0) {
                    if (this._adjacent.get([i, j])) {
                        e = (e + 1) | 0;
                    }
                }
            }

            return e;
        },
        f4: function () {
            var neighbors = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                neighbors.add(new (System.Collections.Generic.List$1(System.Int32))());
            }

            for (var i1 = 0; i1 < this.N; i1 = (i1 + 1) | 0) {
                for (var j = 0; j < this.N; j = (j + 1) | 0) {
                    if (this._adjacent.get([i1, j])) {
                        neighbors.getItem(i1).add(j);
                    }
                }
            }

            return neighbors;
        },
        f5: function () {
            var nn = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                nn.add(new (System.Collections.Generic.List$1(System.Int32))());
            }

            for (var i1 = 0; i1 < this.N; i1 = (i1 + 1) | 0) {
                for (var j = 0; j < this.N; j = (j + 1) | 0) {
                    if (i1 !== j && !this._adjacent.get([i1, j])) {
                        nn.getItem(i1).add(j);
                    }
                }
            }

            return nn;
        },
        f6: function () {
            var neighbors = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                neighbors.add(new (System.Collections.Generic.List$1(System.Int32))());
            }

            for (var i1 = 0; i1 < this.N; i1 = (i1 + 1) | 0) {
                for (var j = 0; j < this.N; j = (j + 1) | 0) {
                    if (this._adjacent.get([i1, j]) && this.Directed.get([i1, j])) {
                        neighbors.getItem(i1).add(j);
                    }
                }
            }

            return neighbors;
        },
        f7: function () {
            var neighbors = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                neighbors.add(new (System.Collections.Generic.List$1(System.Int32))());
            }

            for (var i1 = 0; i1 < this.N; i1 = (i1 + 1) | 0) {
                for (var j = 0; j < this.N; j = (j + 1) | 0) {
                    if (this._adjacent.get([i1, j]) && this.Directed.get([i1, j])) {
                        neighbors.getItem(j).add(i1);
                    }
                }
            }

            return neighbors;
        },
        f8: function () {
            var later = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))(this.Neighbors.Count);

            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                later.add(System.Linq.Enumerable.from(this.Neighbors.getItem(i)).where(function (n) {
                        return n > i;
                    }).toList(System.Int32));
            }

            return later;
        },
        f9: function () {
            return System.Linq.Enumerable.from(this.IndependentSetsInSubgraph(0)).toList(System.Collections.Generic.List$1(System.Int32));
        },
        f10: function (set) {
            return set.Count === 2;
        },
        f11: function () {
            return System.Linq.Enumerable.from(this._independentSets.Value).where($asm.$.Algorithms.Graph.f10).toList(System.Collections.Generic.List$1(System.Int32));
        },
        f12: function (set) {
            return set.Count === 3;
        },
        f13: function () {
            return System.Linq.Enumerable.from(this._independentSets.Value).where($asm.$.Algorithms.Graph.f12).toList(System.Collections.Generic.List$1(System.Int32));
        },
        f14: function () {
            return Algorithms.Utility.ListUtility.GenerateSublists(System.Int32, this._vertices);
        },
        f15: function () {
            return Algorithms.Utility.ListUtility.MaximalElements(System.Int32, this._independentSets.Value);
        },
        f16: function (x) {
            return x.toString();
        },
        f17: function (_, __, ___, ____) {
            return true;
        },
        f18: function (t) {
            return t;
        },
        f19: function (r, i) {
            return new $asm.$AnonymousType$2(r, i);
        },
        f20: function (i, j) {
            return { item1: i, item2: j };
        },
        f21: function (vertices) {
            return this.IsProperFactor(vertices);
        },
        f22: function (_o13) {
            _o13.add(this.Clone());
            return _o13;
        },
        f23: function (n) {
            return n.Count === this.Neighbors.getItem(0).Count;
        },
        f24: function (_o14) {
            _o14.add(new (System.Collections.Generic.List$1(System.Int32))());
            return _o14;
        },
        f25: function (c) {
            return c.ne(System.Int64(0));
        },
        f26: function (v) {
            return this.Degree(v);
        },
        f27: function (v, i) {
        return v > 0 ? i : -1;
    },
        f28: function (i) {
        return i >= 0;
    },
        f29: function (v1, i) {
        return v1 > 0 ? i : -1;
    },
        f30: function (v1) {
        return v1 > 0;
    },
        f31: function (w) {
            return Math.abs(w);
        },
        f32: function (w, i) {
            return w !== 0 ? i : -1;
        },
        f33: function (x) {
            return x > 0;
        }
    });

    Bridge.define("Algorithms.Graphs", {
        statics: {
            props: {
                Diamond: {
                    get: function () {
                        return Algorithms.Graph.op_Multiply(Algorithms.Graphs.E(2), Algorithms.Graphs.K(2));
                    }
                },
                Bull: {
                    get: function () {
                        return Algorithms.Graphs.K(3).AttachNewVertex$1([1]).AttachNewVertex$1([2]);
                    }
                },
                Kite: {
                    get: function () {
                        return Algorithms.Graphs.Diamond.AttachNewVertex$1([1]);
                    }
                },
                Dart: {
                    get: function () {
                        return Algorithms.Graphs.Diamond.AttachNewVertex$1([2]);
                    }
                },
                Chair: {
                    get: function () {
                        return Algorithms.Graphs.P(4).AttachNewVertex$1([2]);
                    }
                },
                Empty: {
                    get: function () {
                        return new Algorithms.Graph.ctor(System.Array.create(false, null, System.Boolean, 0, 0));
                    }
                },
                Paw: {
                    get: function () {
                        return Algorithms.Graphs.P(4).AddEdge(0, 2);
                    }
                },
                H: {
                    get: function () {
                        return Algorithms.Graphs.P(4).AttachNewVertex$1([1]).AttachNewVertex$1([2]);
                    }
                }
            },
            methods: {
                E: function (n) {
                    return new Algorithms.Graph.ctor(System.Array.create(false, null, System.Boolean, n, n));
                },
                K: function (n) {
                    return Algorithms.Graphs.E(n).Complement();
                },
                P: function (n) {
                    var G = Algorithms.Graphs.E(n);
                    for (var i = 0; i < ((n - 1) | 0); i = (i + 1) | 0) {
                        G = G.AddEdge(i, ((i + 1) | 0));
                    }

                    return G;
                },
                Star: function (n) {
                    var G = Algorithms.Graphs.E(n);
                    for (var i = 1; i < n; i = (i + 1) | 0) {
                        G = G.AddEdge(0, i);
                    }

                    return G;
                },
                C: function (n) {
                    return Algorithms.Graphs.P(n).AddEdge(((n - 1) | 0), 0);
                }
            }
        }
    });

    Bridge.define("Algorithms.HashGraph", {
        fields: {
            _values: null,
            _outMinusIn: null,
            _hashCode: 0
        },
        ctors: {
            ctor: function (g, outMinusIn) {
                this.$initialize();                var $t;

                this._values = System.Array.init(((Bridge.Int.div(Bridge.Int.mul(g.N, (((g.N - 1) | 0))), 2)) | 0), 0, System.Byte);
                this._outMinusIn = outMinusIn;

                var k = 0;
                for (var i = 0; i < g.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < g.N; j = (j + 1) | 0) {
                        var value = (g.getItem(i, j) ? 1 : 0) & 255;
                        this._values[System.Array.index(k, this._values)] = value;

                        if (g.getItem(i, j)) {
                            this._hashCode = (this._hashCode + (1 << (k % 32))) | 0;
                        }

                        k = (k + 1) | 0;
                    }
                }

                $t = Bridge.getEnumerator(outMinusIn);
                try {
                    while ($t.moveNext()) {
                        var i1 = $t.Current;
                        this._hashCode = (Bridge.Int.mul(this._hashCode, 33) + i1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
    },
    methods: {
        equals: function (obj) {
            var other = Bridge.as(obj, Algorithms.HashGraph);
            if (other == null) {
                return false;
            }

            return System.Linq.Enumerable.from(this._outMinusIn).sequenceEqual(other._outMinusIn) && System.Linq.Enumerable.from(this._values).sequenceEqual(other._values);
        },
        getHashCode: function () {
            return this._hashCode;
        }
    }
    });

    Bridge.define("Algorithms.HereditaryClassEnumeration", {
        statics: {
            fields: {
                _sizeComparer: null
            },
            ctors: {
                init: function () {
                    this._sizeComparer = new Algorithms.HereditaryClassEnumeration.SizeComparer();
                }
            },
            methods: {
                EnumerateClass: function (excluded) {
                    if (excluded === void 0) { excluded = []; }
                    return Algorithms.HereditaryClassEnumeration.EnumerateClass$1(System.Linq.Enumerable.from(excluded).toList(Algorithms.Graph));
                },
                EnumerateClass$1: function (excluded, maxVertices) {
                    return new (Bridge.GeneratorEnumerable$1(Algorithms.Graph))(Bridge.fn.bind(this, function (excluded, maxVertices) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            lastLevel,
                            currentLevel,
                            $t,
                            G,
                            neighborSets,
                            $t1,
                            neighborSet,
                            H,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.Graph))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (maxVertices === void 0) { maxVertices = 2147483647; }
                                                excluded.sort($asm.$.Algorithms.HereditaryClassEnumeration.f1);

                                                if (excluded.Count > 0 && excluded.getItem(0).N <= 1) {
                                                    $step = 1;
                                                    continue;
                                                } 
                                                $step = 2;
                                                continue;
                                        }
                                        case 1: {
                                            return false;
                                        }
                                        case 2: {
                                            $enumerator.current = new Algorithms.Graph.$ctor1(new (System.Collections.Generic.List$1(System.Int32))());
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            lastLevel = $asm.$.Algorithms.HereditaryClassEnumeration.f2(new (System.Collections.Generic.List$1(Algorithms.Graph))());

                                                
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            if ( lastLevel.Count > 0 ) {
                                                    $step = 5;
                                                    continue;
                                                } 
                                                $step = 15;
                                                continue;
                                        }
                                        case 5: {
                                            currentLevel = new (System.Collections.Generic.List$1(Algorithms.Graph))();

                                                $t = Bridge.getEnumerator(lastLevel);
                                                $step = 6;
                                                continue;
                                        }
                                        case 6: {
                                            if ($t.moveNext()) {
                                                    G = $t.Current;
                                                    $step = 7;
                                                    continue;
                                                }
                                            $step = 12;
                                            continue;
                                        }
                                        case 7: {
                                            if (G.IsComplete()) {
                                                    neighborSets = System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, System.Linq.Enumerable.range(0, G.N).toList(System.Int32))).distinct(Algorithms.HereditaryClassEnumeration._sizeComparer).toList(System.Collections.Generic.List$1(System.Int32));
                                                } else {
                                                    neighborSets = Algorithms.Utility.ListUtility.GenerateSublists(System.Int32, System.Linq.Enumerable.range(0, G.N).toList(System.Int32));
                                                }

                                                $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(neighborSets).where($asm.$.Algorithms.HereditaryClassEnumeration.f3));
                                                $step = 8;
                                                continue;
                                        }
                                        case 8: {
                                            if ($t1.moveNext()) {
                                                    neighborSet = $t1.Current;
                                                    $step = 9;
                                                    continue;
                                                }
                                            $step = 11;
                                            continue;
                                        }
                                        case 9: {
                                            H = { v : G.AttachNewVertex(neighborSet) };

                                                if (System.Linq.Enumerable.from(currentLevel).any((function ($me, H) {
                                                        return function (W) {
                                                            return Algorithms.Graph.Isomorphic(H.v, W);
                                                        };
                                                    })(this, H))) {
                                                    $step = 8;
                                                    continue;
                                                }
                                                if (System.Linq.Enumerable.from(excluded).any((function ($me, H) {
                                                        return function (W) {
                                                            return H.v.ContainsInduced(W);
                                                        };
                                                    })(this, H))) {
                                                    $step = 8;
                                                    continue;
                                                }

                                                currentLevel.add(H.v);
                                                $enumerator.current = H.v;
                                                $step = 10;
                                                return true;
                                        }
                                        case 10: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 11: {
                                            $step = 6;
                                            continue;
                                        }
                                        case 12: {
                                            if (currentLevel.Count > 0 && currentLevel.getItem(0).N >= maxVertices) {
                                                    $step = 13;
                                                    continue;
                                                } 
                                                $step = 14;
                                                continue;
                                        }
                                        case 13: {
                                            return false;
                                        }
                                        case 14: {
                                            lastLevel = currentLevel;

                                                $step = 4;
                                                continue;
                                        }
                                        case 15: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.ns("Algorithms.HereditaryClassEnumeration", $asm.$);

    Bridge.apply($asm.$.Algorithms.HereditaryClassEnumeration, {
        f1: function (g1, g2) {
            return Bridge.compare(g1.N, g2.N);
        },
        f2: function (_o17) {
            _o17.add(new Algorithms.Graph.$ctor1(new (System.Collections.Generic.List$1(System.Int32))()));
            return _o17;
        },
        f3: function (l) {
            return l.Count > 0;
        }
    });

    Bridge.define("Algorithms.HereditaryClassEnumeration.SizeComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Collections.Generic.List$1(System.Int32))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$System$Int32$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$System$Int32$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return x.Count === y.Count;
            },
            getHashCode2: function (obj) {
                return Bridge.getHashCode(obj.Count);
            }
        }
    });

    Bridge.define("Algorithms.Hypergraph$1", function (T) { return {
        fields: {
            _listComparer: null
        },
        props: {
            E: null
        },
        ctors: {
            init: function () {
                this._listComparer = new (Algorithms.Hypergraph$1.SortedListComparer(T))();
            },
            ctor: function (edges) {
                if (edges === void 0) { edges = null; }

                this.$initialize();                var $t;

                if (edges != null) {
                    $t = Bridge.getEnumerator(edges);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            e.sort();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }this.E = new (System.Collections.Generic.HashSet$1(System.Collections.Generic.List$1(T))).$ctor2(edges, this._listComparer);
                } else {
                    this.E = new (System.Collections.Generic.HashSet$1(System.Collections.Generic.List$1(T))).$ctor3(this._listComparer);
                }
        }
    },
    methods: {
        Min: function () {
            var $t;
            var chainHeads = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();

            $t = Bridge.getEnumerator(this.E);
            try {
                while ($t.moveNext()) {
                    var set = $t.Current;
                    var removed = Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), chainHeads, (function ($me, set) {
                        return function (head) {
                            return Algorithms.Utility.ListUtility.SubsetEqualSorted$1(T, set, head);
                        };
                    })(this, set), $asm.$.Algorithms.Hypergraph$1.f1);
                    if (removed > 0 || System.Linq.Enumerable.from(chainHeads).all((function ($me, set) {
                            return function (head) {
                                return !Algorithms.Utility.ListUtility.SubsetEqualSorted$1(T, head, set);
                            };
                        })(this, set))) {
                        chainHeads.add(set);
                    }
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            return new (Algorithms.Hypergraph$1(T))(chainHeads);
        },
        Tr: function () {
            var $t;
            var H = new (Algorithms.Hypergraph$1(T))(function (_o18) {
                    _o18.add(new (System.Collections.Generic.List$1(T))());
                    return _o18;
                }(new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))()));

            $t = Bridge.getEnumerator(this.E);
            try {
                while ($t.moveNext()) {
                    var e = $t.Current;
                    H = H.Product(this.EdgeHypergraph(e)).Min();
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            return H;
        },
        EdgeHypergraph: function (e) {
            return new (Algorithms.Hypergraph$1(T))(System.Linq.Enumerable.from(e).select(function (v) {
                    return Algorithms.GenericExtensions.EnList(T, v);
                }).toList(System.Collections.Generic.List$1(T)));
        },
        Union: function (other) {
            return new (Algorithms.Hypergraph$1(T))(System.Linq.Enumerable.from(this.E).union(other.E).toList(System.Collections.Generic.List$1(T)));
        },
        Product: function (other) {
            return new (Algorithms.Hypergraph$1(T))(System.Linq.Enumerable.from(this.E).selectMany(function (e_i) {
                    return System.Linq.Enumerable.from(other.E).select(function (e_j) {
                            return Algorithms.Utility.ListUtility.Union$1(T, e_i, e_j);
                        }).toList(System.Collections.Generic.List$1(T));
                }).toList(System.Collections.Generic.List$1(T)));
        }
    }
    }; });

    Bridge.ns("Algorithms.Hypergraph$1", $asm.$);

    Bridge.apply($asm.$.Algorithms.Hypergraph$1, {
        f1: function (x) { }
    });

    Bridge.define("Algorithms.Hypergraph$1.SortedListComparer", function (T) { return {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Collections.Generic.List$1(T))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$" + Bridge.getTypeAlias(T) + "$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return System.Linq.Enumerable.from(x).sequenceEqual(y);
            },
            getHashCode2: function (list) {
                var $t;
                var hash = 19;
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        hash = (((hash * 31) | 0) + Bridge.getHashCode(x)) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return hash;
            }
        }
    }; });

    Bridge.define("Algorithms.IndependenceRatio.MinorFinder", {
        statics: {
            methods: {
                FindWithJ: function (g, J) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Object)))(Bridge.fn.bind(this, function (g, J) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            triple,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Object)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (J.Count !== 3) {
                                                    $step = 1;
                                                    continue;
                                                } 
                                                $step = 2;
                                                continue;
                                        }
                                        case 1: {
                                            return false;
                                        }
                                        case 2: {
                                            $t = Bridge.getEnumerator(Algorithms.IndependenceRatio.MinorFinder.EnumerateConnectedThreePartPartitions(g, J), System.Object);
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ($t.moveNext()) {
                                                    triple = $t.Current;
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            if (g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item1, J)) < 4) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item2, J)) < 4) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item3, J)) < 4) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (g.EdgesBetween(triple.item1, triple.item2) <= 0 && g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item1, triple.item2), J)) < 5) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (g.EdgesBetween(triple.item1, triple.item3) <= 0 && g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item1, triple.item3), J)) < 5) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (g.EdgesBetween(triple.item2, triple.item3) <= 0 && g.IndependenceNumber$1(Algorithms.Utility.ListUtility.Union$1(System.Int32, Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item2, triple.item2), J)) < 5) {
                                                    $step = 3;
                                                    continue;
                                                }

                                                $enumerator.current = (function ($me, triple) {
                                                        return function (_o19) {
                                                            _o19.add({ item1: System.Linq.Enumerable.from(triple.item1).toList(System.Int32), item2: g.MaximumIndependentSubset(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item1, J)) });
                                                            _o19.add({ item1: System.Linq.Enumerable.from(triple.item2).toList(System.Int32), item2: g.MaximumIndependentSubset(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item2, J)) });
                                                            _o19.add({ item1: System.Linq.Enumerable.from(triple.item3).toList(System.Int32), item2: g.MaximumIndependentSubset(Algorithms.Utility.ListUtility.Union$1(System.Int32, triple.item3, J)) });
                                                            return _o19;
                                                        };
                                                    })(this, triple)(new (System.Collections.Generic.List$1(System.Object))());
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumerateConnectedThreePartPartitions: function (g, J) {
                    return new (Bridge.GeneratorEnumerable$1(System.Object))(Bridge.fn.bind(this, function (g, J) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            rest,
                            $t,
                            first,
                            rest2,
                            $t1,
                            second,
                            third,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Object))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            rest = System.Linq.Enumerable.from(g.Vertices).except(J).toList(System.Int32);
                                                Algorithms.GenericExtensions.Shuffle(System.Int32, rest);
                                                $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, rest), System.Collections.Generic.List$1(System.Int32));
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    first = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 7;
                                            continue;
                                        }
                                        case 2: {
                                            first.add(J.getItem(0));
                                                if (System.Linq.Enumerable.from(g.FindComponents$1(first).GetEquivalenceClasses()).count() !== 1) {
                                                    $step = 1;
                                                    continue;
                                                }

                                                rest2 = System.Linq.Enumerable.from(rest).except(first).toList(System.Int32);
                                                $t1 = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, rest2), System.Collections.Generic.List$1(System.Int32));
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ($t1.moveNext()) {
                                                    second = $t1.Current;
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            second.add(J.getItem(1));
                                                if (System.Linq.Enumerable.from(g.FindComponents$1(second).GetEquivalenceClasses()).count() !== 1) {
                                                    $step = 3;
                                                    continue;
                                                }

                                                third = System.Linq.Enumerable.from(rest2).except(second).toList(System.Int32);
                                                third.add(J.getItem(2));
                                                if (System.Linq.Enumerable.from(g.FindComponents$1(third).GetEquivalenceClasses()).count() !== 1) {
                                                    $step = 3;
                                                    continue;
                                                }

                                                $enumerator.current = { item1: first, item2: second, item3: third };
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 6: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 7: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Algorithms.Int32Usage", {
        statics: {
            fields: {
                DeBruijnMultiplier: 0,
                DeBruijnLookup: null
            },
            ctors: {
                init: function () {
                    this.DeBruijnMultiplier = 125613361;
                    this.DeBruijnLookup = System.Array.init([0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9], System.Int32);
                }
            },
            methods: {
                LeastSignificantBit: function (x) {
                    return Algorithms.Int32Usage.DeBruijnLookup[System.Array.index((((((x & ((-x) | 0))) >>> 0) * Algorithms.Int32Usage.DeBruijnMultiplier) >>> 0) >>> 27, Algorithms.Int32Usage.DeBruijnLookup)];
                },
                GetAndClearLeastSignificantBit: function (x) {
                    var m = x.v & ((-x.v) | 0);
                    x.v = x.v ^ m;
                    return Algorithms.Int32Usage.DeBruijnLookup[System.Array.index((((m >>> 0) * Algorithms.Int32Usage.DeBruijnMultiplier) >>> 0) >>> 27, Algorithms.Int32Usage.DeBruijnLookup)];
                },
                PopulationCount: function (b) {
                    var q = 0;
                    while (b > 0) {
                        q = (q + 1) | 0;
                        b = (b & (((b - 1) >>> 0))) >>> 0;
                    }
                    return q;
                },
                ToSet: function (x) {
                    var onBits = new (System.Collections.Generic.List$1(System.Int32))(10);
                    while (x !== 0) {
                        var lsb = (x & (((0 - x) >>> 0))) >>> 0;
                        onBits.add(Algorithms.Int32Usage.DeBruijnLookup[System.Array.index(((lsb * Algorithms.Int32Usage.DeBruijnMultiplier) >>> 0) >>> 27, Algorithms.Int32Usage.DeBruijnLookup)]);

                        x = (x ^ lsb) >>> 0;
                    }

                    return onBits;
                }
            }
        }
    });

    Bridge.define("Algorithms.Int64Usage", {
        statics: {
            fields: {
                DeBruijnMultiplier: System.UInt64(0),
                DeBruijnLookup: null,
                BitMask: null,
                NotBitMask: null
            },
            ctors: {
                init: function () {
                    this.DeBruijnMultiplier = System.UInt64(System.Int64([-1706153790,133027301]));
                    this.DeBruijnLookup = System.Array.init([
                        63, 
                        0, 
                        58, 
                        1, 
                        59, 
                        47, 
                        53, 
                        2, 
                        60, 
                        39, 
                        48, 
                        27, 
                        54, 
                        33, 
                        42, 
                        3, 
                        61, 
                        51, 
                        37, 
                        40, 
                        49, 
                        18, 
                        28, 
                        20, 
                        55, 
                        30, 
                        34, 
                        11, 
                        43, 
                        14, 
                        22, 
                        4, 
                        62, 
                        57, 
                        46, 
                        52, 
                        38, 
                        26, 
                        32, 
                        41, 
                        50, 
                        36, 
                        17, 
                        19, 
                        29, 
                        10, 
                        13, 
                        21, 
                        56, 
                        45, 
                        25, 
                        31, 
                        35, 
                        16, 
                        9, 
                        12, 
                        44, 
                        24, 
                        15, 
                        8, 
                        23, 
                        7, 
                        6, 
                        5
                    ], System.Int32);
                    this.BitMask = System.Array.init(64, System.Int64(0), System.Int64);
                    this.NotBitMask = System.Array.init(64, System.Int64(0), System.Int64);
                },
                ctor: function () {
                    var $t;
                    $t = Bridge.getEnumerator(System.Linq.Enumerable.range(0, 64));
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)] = (System.Int64(1)).shl(bit);
                            Algorithms.Int64Usage.NotBitMask[System.Array.index(bit, Algorithms.Int64Usage.NotBitMask)] = ((System.Int64(1)).shl(bit)).not();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}
        },
        methods: {
            GeneratePairMasks: function (n) {
                var maskMap = new (System.Collections.Generic.Dictionary$2(System.Int64,System.Int64))();

                for (var i = 0; i < n; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        maskMap.set(Algorithms.Int64Usage.BitMask[System.Array.index(i, Algorithms.Int64Usage.BitMask)].or(Algorithms.Int64Usage.BitMask[System.Array.index(j, Algorithms.Int64Usage.BitMask)]), Algorithms.Int64Usage.BitMask[System.Array.index(j, Algorithms.Int64Usage.BitMask)]);
                    }
                }

                return maskMap;
            },
            ClearBit: function (x, bit) {
                return x.and(Algorithms.Int64Usage.NotBitMask[System.Array.index(bit, Algorithms.Int64Usage.NotBitMask)]);
            },
            SetBit: function (x, bit) {
                return x.or(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)]);
            },
            IsBitSet: function (x, bit) {
                return (x.and(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)])).ne(System.Int64(0));
            },
            FlipBits: function (x, bit) {
                return x.xor(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)]);
            },
            FlipBits$1: function (x, bit1, bit2) {
                return x.xor((Algorithms.Int64Usage.BitMask[System.Array.index(bit1, Algorithms.Int64Usage.BitMask)].or(Algorithms.Int64Usage.BitMask[System.Array.index(bit2, Algorithms.Int64Usage.BitMask)])));
            },
            FlipBits$2: function (x, bits) {
                var $t;
                if (bits === void 0) { bits = []; }
                if (bits == null) {
                    return x;
                }

                var mask = System.Int64(0);
                $t = Bridge.getEnumerator(bits);
                try {
                    while ($t.moveNext()) {
                        var bit = $t.Current;
                        mask = mask.or(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)]);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return x.xor(mask);
            },
            LeastSignificantBit: function (b) {
                return Algorithms.Int64Usage.DeBruijnLookup[System.Array.index(System.Int64.clipu64((b.and(b.neg()))).mul(Algorithms.Int64Usage.DeBruijnMultiplier).shru(58), Algorithms.Int64Usage.DeBruijnLookup)];
            },
            GetAndClearLeastSignificantBit: function (x) {
                var m = x.v.and(x.v.neg());
                x.v = x.v.xor(m);
                return Algorithms.Int64Usage.DeBruijnLookup[System.Array.index(System.Int64.toNumber((System.Int64.clipu64(m).mul(Algorithms.Int64Usage.DeBruijnMultiplier)).shru(58)), Algorithms.Int64Usage.DeBruijnLookup)];
            },
            PopulationCount: function (b) {
                var q = 0;
                while (b.gt(System.Int64(0))) {
                    q = (q + 1) | 0;
                    b = b.and((b.sub(System.Int64(1))));
                }
                return q;
            },
            PopulationCount$1: function (x) {
                var k1 = System.UInt64([1431655765,1431655765]);
                var k2 = System.UInt64([858993459,858993459]);
                var k4 = System.UInt64([252645135,252645135]);
                x = x.sub(((x.shru(1)).and(k1)));
                x = (x.and(k2)).add(((x.shru(2)).and(k2)));
                x = (x.add((x.shru(4)))).and(k4);
                x = (x.mul(System.UInt64([16843009,16843009]))).shru(56);
                return System.Int64.clip32(x);
            },
            RightFillToMSB: function (x) {
                x = x.or((x.shru(1)));
                x = x.or((x.shru(2)));
                x = x.or((x.shru(4)));
                x = x.or((x.shru(8)));
                x = x.or((x.shru(16)));
                x = x.or((x.shru(32)));

                return x;
            },
            ToBitString: function (x, length) {
                if (length === void 0) { length = 64; }
                return Bridge.toArray(System.Linq.Enumerable.range(0, length).select(function (bit) {
                        return Algorithms.Int64Usage.IsBitSet(x, System.Int64(bit)) ? "1" : "0";
                    })).join("");
            },
            ToSet: function (x) {
                x = {v:x};
                var onBits = new (System.Collections.Generic.List$1(System.Int32))(10);
                while (x.v.ne(System.Int64(0))) {
                    onBits.add(Algorithms.Int64Usage.GetAndClearLeastSignificantBit(x));
                }

                return onBits;
            },
            ToSet$1: function (x) {
                var onBits = new (System.Collections.Generic.List$1(System.Int32))(10);
                while (x.ne(System.UInt64(0))) {
                    var lsb = x.and((System.UInt64(0).sub(x)));
                    onBits.add(Algorithms.Int64Usage.DeBruijnLookup[System.Array.index(lsb.mul(Algorithms.Int64Usage.DeBruijnMultiplier).shru(58), Algorithms.Int64Usage.DeBruijnLookup)]);

                    x = x.xor(lsb);
                }

                return onBits;
            },
            EnumerateBits: function (x) {
                return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (x) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        lsb,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        x = {v:x};
                                            
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( x.v.ne(System.Int64(0)) ) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                    }
                                    case 2: {
                                        lsb = Algorithms.Int64Usage.GetAndClearLeastSignificantBit(x);
                                            $enumerator.current = lsb;
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        
                                            $step = 1;
                                            continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            ToInt64$1: function (bits) {
                var $t;
                if (bits === void 0) { bits = []; }
                var total = System.Int64(0);
                $t = Bridge.getEnumerator(bits);
                try {
                    while ($t.moveNext()) {
                        var bit = $t.Current;
                        total = total.or(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)]);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return total;
            },
            ToInt64: function (set) {
                var $t;
                var total = System.Int64(0);
                $t = Bridge.getEnumerator(set, System.Int32);
                try {
                    while ($t.moveNext()) {
                        var bit = $t.Current;
                        total = total.or(Algorithms.Int64Usage.BitMask[System.Array.index(bit, Algorithms.Int64Usage.BitMask)]);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return total;
            },
            ToUInt64: function (set) {
                var $t;
                var total = System.UInt64(0);
                $t = Bridge.getEnumerator(set, System.Int32);
                try {
                    while ($t.moveNext()) {
                        var bit = $t.Current;
                        total = total.or((System.UInt64(1).shl(bit)));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return total;
            },
            ExpandIntoLists: function (xs) {
                return System.Linq.Enumerable.from(xs).select($asm.$.Algorithms.Int64Usage.f1).toList(System.Collections.Generic.List$1(System.Int32));
            },
            ToSetString$2: function (x) {
                return Algorithms.Int64Usage.ToSetString(Algorithms.Int64Usage.ToSet(x));
            },
            ToSetString$1: function (list) {
                return System.String.concat("{", Bridge.toArray(System.Linq.Enumerable.from(list).select($asm.$.Algorithms.Int64Usage.f2)).join(", "), "}");
            },
            ToSetString: function (list) {
                return System.String.concat("{", Bridge.toArray(list).join(", "), "}");
            },
            ToSetStringSmall: function (x) {
                return [Bridge.toArray(Algorithms.Int64Usage.ToSet(x)).join("")].join("|");
            },
            AllSet: function (x, i) {
                return Algorithms.Int64Usage.IsBitSet((x.xor((x.add(System.Int64(1))))), System.Int64(i));
            },
            GetBits: function (x) {
                var setBits = new (System.Collections.Generic.List$1(System.Int64))();

                while (x.ne(System.Int64(0))) {
                    var lsb = x.and(x.neg());

                    setBits.add(lsb);

                    x = x.xor(lsb);
                }

                return setBits;
            },
            GetBits$1: function (x) {
                var setBits = new (System.Collections.Generic.List$1(System.UInt64))(16);

                while (x.ne(System.UInt64(0))) {
                    var lsb = x.and((System.UInt64(0).sub(x)));
                    setBits.add(lsb);
                    x = x.xor(lsb);
                }

                return setBits;
            }
        }
    }
    });

    Bridge.ns("Algorithms.Int64Usage", $asm.$);

    Bridge.apply($asm.$.Algorithms.Int64Usage, {
        f1: function (x) {
            return System.Linq.Enumerable.from(Algorithms.Int64Usage.ToSet(x)).toList(System.Int32);
        },
        f2: function (l) {
            return Algorithms.Int64Usage.ToSetString$2(l);
        }
    });

    Bridge.define("Algorithms.Lazy$1", function (T) { return {
        statics: {
            methods: {
                op_Implicit: function (da) {
                    return da.Value;
                }
            }
        },
        fields: {
            _creator: null,
            _value: null,
            _token: null
        },
        props: {
            Value: {
                get: function () {
                    if (this._value == null) {
                        this._token;
                        {
                            if (this._value == null) {
                                this._value = this._creator();
                            }
                        }
                    }

                    return this._value;
                }
            }
        },
        ctors: {
            init: function () {
                this._value = Bridge.getDefaultValue(T);
                this._token = {  };
            },
            ctor: function (creator) {
                this.$initialize();
                this._creator = creator;
            },
            $ctor1: function (creator, threadSafe) {
                Algorithms.Lazy$1(T).ctor.call(this, creator);
            }
        },
        methods: {
            Forget: function () {
                this._token;
                this._value = Bridge.getDefaultValue(T);
            }
        }
    }; });

    Bridge.define("Algorithms.OneFactorizationsOfCompleteGraph", {
        statics: {
            methods: {
                EnumerateOneFactorizations: function (n) {
                    var list = System.Int64(0);
                    for (var i = 0; i < ((n - 1) | 0); i = (i + 1) | 0) {
                        list = list.or((System.Int64(1).shl(i)));
                    }

                    var coloring = System.Array.init(((Bridge.Int.div(Bridge.Int.mul(n, (((n - 1) | 0))), 2)) | 0), 0, System.Int32);
                    for (var i1 = 0; i1 < ((n - 1) | 0); i1 = (i1 + 1) | 0) {
                        coloring[System.Array.index(i1, coloring)] = i1;
                    }

                    var lists = System.Array.init(n, System.Int64(0), System.Int64);
                    for (var i2 = 1; i2 < n; i2 = (i2 + 1) | 0) {
                        lists[System.Array.index(i2, lists)] = list.xor(System.Int64((1 << (((i2 - 1) | 0)))));
                    }

                    var priorNeighbors = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();


                    return Algorithms.OneFactorizationsOfCompleteGraph.EnumerateOneFactorizations$1(1, 2, n, lists, coloring);
                },
                EnumerateOneFactorizations$1: function (i, j, n, lists, coloring) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.Int32)))(Bridge.fn.bind(this, function (i, j, n, lists, coloring) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            copy,
                            $t,
                            of,
                            $t1,
                            c,
                            $t2,
                            of1,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.Int32)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (i >= n) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 3;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            copy = System.Array.init(coloring.length, 0, System.Int32);
                                                System.Array.copy(coloring, 0, copy, 0, coloring.length);
                                                $enumerator.current = copy;
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 3: {
                                            if (j >= n) {
                                                    $step = 4;
                                                    continue;
                                                } else  {
                                                    $step = 9;
                                                    continue;
                                                }
                                        }
                                        case 4: {
                                            $t = Bridge.getEnumerator(Algorithms.OneFactorizationsOfCompleteGraph.EnumerateOneFactorizations$1(((i + 1) | 0), ((i + 2) | 0), n, lists, coloring), System.Array.type(System.Int32));
                                                $step = 5;
                                                continue;
                                        }
                                        case 5: {
                                            if ($t.moveNext()) {
                                                    of = $t.Current;
                                                    $step = 6;
                                                    continue;
                                                }
                                            $step = 8;
                                            continue;
                                        }
                                        case 6: {
                                            $enumerator.current = of;
                                                $step = 7;
                                                return true;
                                        }
                                        case 7: {
                                            $step = 5;
                                            continue;
                                        }
                                        case 8: {
                                            $step = 17;
                                            continue;
                                        }
                                        case 9: {
                                            $t1 = Bridge.getEnumerator(Algorithms.Int64Usage.EnumerateBits((lists[System.Array.index(i, lists)].and(lists[System.Array.index(j, lists)]))), System.Int32);
                                                $step = 10;
                                                continue;
                                        }
                                        case 10: {
                                            if ($t1.moveNext()) {
                                                    c = $t1.Current;
                                                    $step = 11;
                                                    continue;
                                                }
                                            $step = 16;
                                            continue;
                                        }
                                        case 11: {
                                            lists[System.Array.index(i, lists)] = Algorithms.Int64Usage.ClearBit(lists[System.Array.index(i, lists)], System.Int64(c));
                                                lists[System.Array.index(j, lists)] = Algorithms.Int64Usage.ClearBit(lists[System.Array.index(j, lists)], System.Int64(c));

                                                coloring[System.Array.index(((((((((Bridge.Int.mul(i, n) - ((Bridge.Int.div(Bridge.Int.mul(i, (((i + 1) | 0))), 2)) | 0)) | 0) + j) | 0) - i) | 0) - 1) | 0), coloring)] = c;
                                                $t2 = Bridge.getEnumerator(Algorithms.OneFactorizationsOfCompleteGraph.EnumerateOneFactorizations$1(i, ((j + 1) | 0), n, lists, coloring), System.Array.type(System.Int32));
                                                $step = 12;
                                                continue;
                                        }
                                        case 12: {
                                            if ($t2.moveNext()) {
                                                    of1 = $t2.Current;
                                                    $step = 13;
                                                    continue;
                                                }
                                            $step = 15;
                                            continue;
                                        }
                                        case 13: {
                                            $enumerator.current = of1;
                                                $step = 14;
                                                return true;
                                        }
                                        case 14: {
                                            $step = 12;
                                            continue;
                                        }
                                        case 15: {
                                            lists[System.Array.index(i, lists)] = Algorithms.Int64Usage.SetBit(lists[System.Array.index(i, lists)], System.Int64(c));
                                                lists[System.Array.index(j, lists)] = Algorithms.Int64Usage.SetBit(lists[System.Array.index(j, lists)], System.Int64(c));
                                            $step = 10;
                                            continue;
                                        }
                                        case 16: {
                                            $step = 17;
                                            continue;
                                        }
                                        case 17: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 18: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                GetSignSum: function (n, plus, minus, progress) {
                    var $t;
                    plus.v = 0;
                    minus.v = 0;

                    var list = 0;
                    for (var i = 0; i < ((n - 1) | 0); i = (i + 1) | 0) {
                        list = list | (1 << i);
                    }

                    var of = System.Array.create(0, null, System.Int32, n, n);
                    for (var i1 = 1; i1 < n; i1 = (i1 + 1) | 0) {
                        of.set([0, i1], ($t = (i1 - 1) | 0, of.set([i1, 0], $t), $t));
                    }

                    var lists = System.Array.init(n, 0, System.Int32);
                    for (var i2 = 1; i2 < n; i2 = (i2 + 1) | 0) {
                        lists[System.Array.index(i2, lists)] = list ^ (1 << (((i2 - 1) | 0)));
                    }

                    var term = { v : Bridge.Int.mul(n, (((n - 1) | 0))) % 4 === 0 ? 1 : -1 };

                    Algorithms.OneFactorizationsOfCompleteGraph.DoSignSum(1, 2, n, lists, of, term, plus, minus, progress);

                    return ((plus.v - minus.v) | 0);
                },
                DoTerm: function (term, plus, minus, progress) {
                    if (term > 0) {
                        plus.v = (plus.v + 1) | 0;
                    } else {
                        minus.v = (minus.v + 1) | 0;
                    }

                    if ((((plus.v + minus.v) | 0)) % 1000000 === 0) {
                        if (!Bridge.staticEquals(progress, null)) {
                            progress(plus.v, minus.v);
                        }
                    }
                },
                DoSignSum: function (i, j, n, lists, of, term, plus, minus, progress) {
                    if (i >= ((n - 1) | 0)) {
                        Algorithms.OneFactorizationsOfCompleteGraph.DoTerm(term.v, plus, minus, progress);
                    } else {
                        var x = lists[System.Array.index(i, lists)] & lists[System.Array.index(j, lists)];
                        while (x !== 0) {
                            var c = x & ((-x) | 0);
                            x = x ^ c;
                            lists[System.Array.index(i, lists)] = lists[System.Array.index(i, lists)] ^ c;
                            lists[System.Array.index(j, lists)] = lists[System.Array.index(j, lists)] ^ c;

                            of.set([i, j], (of.set([j, i], c), c));

                            var factor = 1;
                            for (var k = 0; k < i; k = (k + 1) | 0) {
                                factor = Bridge.Int.mul(factor, (1 | ((((c - of.get([k, j])) | 0)) >> 31)));
                            }
                            for (var k1 = 0; k1 < j; k1 = (k1 + 1) | 0) {
                                factor = Bridge.Int.mul(factor, (1 | ((((c - of.get([i, k1])) | 0)) >> 31)));
                            }

                            term.v = Bridge.Int.mul(term.v, factor);
                            if (j >= ((n - 1) | 0)) {
                                Algorithms.OneFactorizationsOfCompleteGraph.DoSignSum(((i + 1) | 0), ((i + 2) | 0), n, lists, of, term, plus, minus, progress);
                            } else {
                                Algorithms.OneFactorizationsOfCompleteGraph.DoSignSum(i, ((j + 1) | 0), n, lists, of, term, plus, minus, progress);
                            }
                            term.v = Bridge.Int.mul(term.v, factor);

                            lists[System.Array.index(i, lists)] = lists[System.Array.index(i, lists)] ^ c;
                            lists[System.Array.index(j, lists)] = lists[System.Array.index(j, lists)] ^ c;
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Algorithms.OnFactorizationsOfCompleteGraph", {
        statics: {
            methods: {
                EnumerateOneFactorizations: function (n) {
                    var list = System.Int64(0);
                    for (var i = 0; i < ((n - 1) | 0); i = (i + 1) | 0) {
                        list = list.or((System.Int64(1).shl(i)));
                    }

                    var coloring = System.Array.init(((Bridge.Int.div(Bridge.Int.mul(n, (((n - 1) | 0))), 2)) | 0), 0, System.Int32);
                    for (var i1 = 0; i1 < ((n - 1) | 0); i1 = (i1 + 1) | 0) {
                        coloring[System.Array.index(i1, coloring)] = i1;
                    }

                    var lists = System.Array.init(n, System.Int64(0), System.Int64);
                    for (var i2 = 1; i2 < n; i2 = (i2 + 1) | 0) {
                        lists[System.Array.index(i2, lists)] = list.xor(System.Int64((1 << (((i2 - 1) | 0)))));

                        coloring[System.Array.index(((Bridge.Int.mul(i2, n) - ((Bridge.Int.div(Bridge.Int.mul(i2, (((i2 + 1) | 0))), 2)) | 0)) | 0), coloring)] = (i2 - 1) | 0;
                    }

                    return Algorithms.OnFactorizationsOfCompleteGraph.EnumerateOneFactorizations$1(1, 2, n, lists, coloring);
                },
                EnumerateOneFactorizations$1: function (i, j, n, lists, coloring) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.Int32)))(Bridge.fn.bind(this, function (i, j, n, lists, coloring) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            copy,
                            $t,
                            of,
                            $t1,
                            c,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.Int32)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (i >= n) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 3;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            copy = System.Array.init(coloring.length, 0, System.Int32);
                                                System.Array.copy(coloring, 0, copy, 0, coloring.length);
                                                $enumerator.current = copy;
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $step = 11;
                                            continue;
                                        }
                                        case 3: {
                                            if (j >= n) {
                                                    $step = 4;
                                                    continue;
                                                } else  {
                                                    $step = 9;
                                                    continue;
                                                }
                                        }
                                        case 4: {
                                            $t = Bridge.getEnumerator(Algorithms.OnFactorizationsOfCompleteGraph.EnumerateOneFactorizations$1(((i + 1) | 0), ((i + 2) | 0), n, lists, coloring), System.Array.type(System.Int32));
                                                $step = 5;
                                                continue;
                                        }
                                        case 5: {
                                            if ($t.moveNext()) {
                                                    of = $t.Current;
                                                    $step = 6;
                                                    continue;
                                                }
                                            $step = 8;
                                            continue;
                                        }
                                        case 6: {
                                            $enumerator.current = of;
                                                $step = 7;
                                                return true;
                                        }
                                        case 7: {
                                            $step = 5;
                                            continue;
                                        }
                                        case 8: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 9: {
                                            $t1 = Bridge.getEnumerator(Algorithms.Int64Usage.EnumerateBits((lists[System.Array.index(i, lists)].and(lists[System.Array.index(j, lists)]))), System.Int32);
                                                try {
                                                    while ($t1.moveNext()) {
                                                        c = $t1.Current;

                                                    }
                                                } finally {
                                                    if (Bridge.is($t1, System.IDisposable)) {
                                                        $t1.System$IDisposable$dispose();
                                                    }
                                                }
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            $step = 11;
                                            continue;
                                        }
                                        case 11: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Algorithms.OnlineChoiceHashGraph", {
        fields: {
            _f: null,
            _g: null,
            _hashCode: 0
        },
        ctors: {
            ctor: function (f, g) {
                this.$initialize();                var $t, $t1;

                this._f = Bridge.cast(System.Array.clone(f), System.Array.type(System.Int32));
                this._g = Bridge.cast(System.Array.clone(g), System.Array.type(System.Int32));

                for (var i = 0; i < this._g.length; i = (i + 1) | 0) {
                    if (this._g[System.Array.index(i, this._g)] === 0) {
                        this._f[System.Array.index(i, this._f)] = 0;
                    }
                }

                $t = Bridge.getEnumerator(this._f);
                try {
                    while ($t.moveNext()) {
                        var i1 = $t.Current;
                        this._hashCode = (Bridge.Int.mul(this._hashCode, 33) + i1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(this._g);
                try {
                    while ($t1.moveNext()) {
                        var i2 = $t1.Current;
                        this._hashCode = (Bridge.Int.mul(this._hashCode, 33) + i2) | 0;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }}
    },
    methods: {
        equals: function (obj) {
            var other = Bridge.as(obj, Algorithms.OnlineChoiceHashGraph);
            if (other == null) {
                return false;
            }

            return System.Linq.Enumerable.from(this._g).sequenceEqual(other._g) && System.Linq.Enumerable.from(this._f).sequenceEqual(other._f);
        },
        getHashCode: function () {
            return this._hashCode;
        }
    }
    });

    Bridge.define("Algorithms.OrientationHashGraph", {
        fields: {
            _values: null,
            _outMinusIn: null,
            _hashCode: 0
        },
        ctors: {
            ctor: function (g, outMinusIn) {
                this.$initialize();                var $t;

                this._values = System.Array.init(((Bridge.Int.div(Bridge.Int.mul(g.N, (((g.N - 1) | 0))), 2)) | 0), 0, System.Byte);
                this._outMinusIn = outMinusIn;

                var k = 0;
                for (var i = 0; i < g.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < g.N; j = (j + 1) | 0) {
                        var value = (g.getItem(i, j) ? 1 : 0) & 255;
                        this._values[System.Array.index(k, this._values)] = value;

                        if (g.getItem(i, j)) {
                            this._hashCode = (this._hashCode + (1 << (k % 32))) | 0;
                        }

                        k = (k + 1) | 0;
                    }
                }

                $t = Bridge.getEnumerator(outMinusIn);
                try {
                    while ($t.moveNext()) {
                        var i1 = $t.Current;
                        this._hashCode = (Bridge.Int.mul(this._hashCode, 33) + i1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
    },
    methods: {
        equals: function (obj) {
            var other = Bridge.as(obj, Algorithms.OrientationHashGraph);
            if (other == null) {
                return false;
            }

            return System.Linq.Enumerable.from(this._outMinusIn).sequenceEqual(other._outMinusIn) && System.Linq.Enumerable.from(this._values).sequenceEqual(other._values);
        },
        getHashCode: function () {
            return this._hashCode;
        }
    }
    });

    Bridge.define("Algorithms.OrientationResult", {
        props: {
            Graph: null,
            Even: 0,
            Odd: 0
        }
    });

    Bridge.define("Algorithms.Polynomials.FactoredRational", {
        statics: {
            fields: {
                Zero: null
            },
            ctors: {
                init: function () {
                    var $t;
                    this.Zero = ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.Sign = 0, $t);
                }
            },
            methods: {
                op_Multiply: function (fi, fi2) {
                    var $t;
                    var sign = Bridge.Int.mul(fi.Sign, fi2.Sign);
                    var k = new (System.Collections.Generic.List$1(System.Int32))(Math.max(fi.K.Count, fi2.K.Count));

                    if (sign !== 0) {
                        for (var i = 0; i < Math.max(fi.K.Count, fi2.K.Count); i = (i + 1) | 0) {
                            k.add(0);
                            if (i < fi.K.Count) {
                                k.setItem(i, (k.getItem(i) + fi.K.getItem(i)) | 0);
                            }
                            if (i < fi2.K.Count) {
                                k.setItem(i, (k.getItem(i) + fi2.K.getItem(i)) | 0);
                            }
                        }
                    }

                    return ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = k, $t.Sign = sign, $t);
                },
                op_Division: function (fi, fi2) {
                    var $t;
                    var sign = Bridge.Int.mul(fi.Sign, fi2.Sign);
                    var k = new (System.Collections.Generic.List$1(System.Int32))(Math.max(fi.K.Count, fi2.K.Count));

                    if (sign !== 0) {
                        for (var i = 0; i < Math.max(fi.K.Count, fi2.K.Count); i = (i + 1) | 0) {
                            k.add(0);
                            if (i < fi.K.Count) {
                                k.setItem(i, (k.getItem(i) + fi.K.getItem(i)) | 0);
                            }
                            if (i < fi2.K.Count) {
                                k.setItem(i, (k.getItem(i) - fi2.K.getItem(i)) | 0);
                            }
                        }
                    }

                    return ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = k, $t.Sign = sign, $t);
                }
            }
        },
        fields: {
            Sign: 0,
            K: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (n) {
                this.$initialize();
                var vv = System.Array.init(11, 0, System.Int32);
                for (var jj = 0; jj <= 10; jj = (jj + 1) | 0) {
                    vv[System.Array.index(jj, vv)] = this.Power(2, jj);
                }

                this.Sign = System.Decimal(n).sign();
                n = Bridge.Int.mul(n, this.Sign);

                this.K = new (System.Collections.Generic.List$1(System.Int32))();
                var i = 0;

                while (n > 1) {
                    this.K.add(0);
                    var p = Algorithms.Polynomials.PrimeNumbers.Get(i);
                    while (n % p === 0) {
                        this.K.setItem(i, (this.K.getItem(i) + 1) | 0);
                        n = (Bridge.Int.div(n, p)) | 0;
                    }

                    i = (i + 1) | 0;
                }
            }
        },
        methods: {
            ToRational: function (top, bottom) {
                if (this.K == null || this.Sign === 0) {
                    top.v = 0;
                    bottom.v = 1;
                    return;
                }

                top.v = this.Sign;
                bottom.v = 1;
                for (var i = 0; i < this.K.Count; i = (i + 1) | 0) {
                    if (this.K.getItem(i) > 0) {
                        top.v = Bridge.Int.mul(top.v, (this.Power(Algorithms.Polynomials.PrimeNumbers.Get(i), this.K.getItem(i))));
                    } else {
                        bottom.v = Bridge.Int.mul(bottom.v, (this.Power(Algorithms.Polynomials.PrimeNumbers.Get(i), ((-this.K.getItem(i)) | 0))));
                    }
                }
            },
            Power: function (p, k) {
                var m = 1;
                while (k > 0) {
                    var e = 1;
                    var n = p;
                    while (e <= k >> 1) {
                        n = Bridge.Int.mul(n, n);
                        e = e << 1;
                    }

                    k = (k - e) | 0;
                    m = Bridge.Int.mul(m, n);
                }

                return m;
            }
        }
    });

    Bridge.define("Algorithms.Polynomials.GraphPolynomial", {
        fields: {
            _g: null,
            _priorNeighbors: null,
            _normalizer: null,
            _signLookup: null
        },
        ctors: {
            ctor: function (g) {
                this.$initialize();
                this._g = g;

                this._priorNeighbors = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                for (var w = 0; w < this._g.N; w = (w + 1) | 0) {
                    this._priorNeighbors.add(new (System.Collections.Generic.List$1(System.Int32))());
                    for (var v = 0; v < w; v = (v + 1) | 0) {
                        if (g.getItem(v, w)) {
                            this._priorNeighbors.getItem(w).add(v);
                        }
                    }
                }
            }
        },
        methods: {
            GetCoefficient: function (power) {
                var $t;
                this._normalizer = new Algorithms.Polynomials.Normalizer(power);

                var a = System.Array.init(power.length, 0, System.Int32);
                var top = { v : System.Int64(0) };
                var bottom = { v : System.Int64(1) };
                var partialProduct = { v : ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = new (System.Collections.Generic.List$1(System.Int32))(), $t.Sign = 1, $t) };
                this.SumTerms(0, a, power, partialProduct, top, bottom);

                return System.Int64.clip32(top.v.div(bottom.v));
            },
            GetSignSum: function (power) {
                this._signLookup = new Algorithms.Polynomials.SignLookup(power);

                var a = System.Array.init(power.length, 0, System.Int32);
                var sum = { v : 0 };
                var partialProduct = { v : 1 };
                this.SumSigns(0, a, power, partialProduct, sum);

                return sum.v;
            },
            SumSigns: function (w, a, power, partialProduct, sum) {
                var $t;
                if (w === power.length) {
                    sum.v = (sum.v + partialProduct.v) | 0;
                } else {
                    for (var j = 0; j <= power[System.Array.index(w, power)]; j = (j + 1) | 0) {
                        a[System.Array.index(w, a)] = j;

                        var current = 1;
                        $t = Bridge.getEnumerator(this._priorNeighbors.getItem(w));
                        try {
                            while ($t.moveNext()) {
                                var v = $t.Current;
                                current = Bridge.Int.mul(current, this._signLookup.Sign.get([a[System.Array.index(v, a)], a[System.Array.index(w, a)]]));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        if (current === 0) {
                            continue;
                        }

                        partialProduct.v = Bridge.Int.mul(partialProduct.v, current);
                        this.SumSigns(((w + 1) | 0), a, power, partialProduct, sum);
                        partialProduct.v = (Bridge.Int.div(partialProduct.v, current)) | 0;
                    }
                }
            },
            SumTerms: function (w, a, power, partialProduct, top, bottom) {
                var $t;
                if (w === power.length) {
                    var r = Algorithms.Polynomials.FactoredRational.op_Division(partialProduct.v, this._normalizer.Get(a));
                    var top2 = { };
                    var bottom2 = { };
                    r.ToRational(top2, bottom2);

                    top.v = top.v.mul(System.Int64(bottom2.v)).add(bottom.v.mul(System.Int64(top2.v)));
                    bottom.v = bottom.v.mul(System.Int64(bottom2.v));

                    var gcd = this.GCD(top.v, bottom.v);
                    top.v = top.v.div(gcd);
                    bottom.v = bottom.v.div(gcd);
                } else {
                    for (var j = 0; j <= power[System.Array.index(w, power)]; j = (j + 1) | 0) {
                        a[System.Array.index(w, a)] = j;

                        var current = ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = new (System.Collections.Generic.List$1(System.Int32))(), $t.Sign = 1, $t);
                        $t = Bridge.getEnumerator(this._priorNeighbors.getItem(w));
                        try {
                            while ($t.moveNext()) {
                                var v = $t.Current;
                                current = Algorithms.Polynomials.FactoredRational.op_Multiply(current, this._normalizer.FactoredDifference.get([a[System.Array.index(v, a)], a[System.Array.index(w, a)]]));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        if (current.Sign === 0) {
                            continue;
                        }

                        partialProduct.v = Algorithms.Polynomials.FactoredRational.op_Multiply(partialProduct.v, current);
                        this.SumTerms(((w + 1) | 0), a, power, partialProduct, top, bottom);
                        partialProduct.v = Algorithms.Polynomials.FactoredRational.op_Division(partialProduct.v, current);
                    }
                }
            },
            GCD: function (x, y) {
                var tmp;
                x = x.abs();
                y = y.abs();
                while (x.gt(System.Int64(0))) {
                    tmp = x;
                    x = y.mod(x);
                    y = tmp;
                }
                return y;
            }
        }
    });

    Bridge.define("Algorithms.Polynomials.GraphPolynomialExtensions", {
        statics: {
            methods: {
                GetCoefficient: function (g, power) {
                    var gp = new Algorithms.Polynomials.GraphPolynomial(g);
                    return gp.GetCoefficient(power);
                },
                GetSignSum: function (g, power) {
                    var gp = new Algorithms.Polynomials.GraphPolynomial(g);
                    return gp.GetSignSum(power);
                }
            }
        }
    });

    Bridge.define("Algorithms.Polynomials.Normalizer", {
        fields: {
            FactoredDifference: null,
            InsideProduct: null
        },
        ctors: {
            ctor: function (height) {
                this.$initialize();                var $t;

                var m = System.Linq.Enumerable.from(height).max();

                this.FactoredDifference = System.Array.create(null, null, Algorithms.Polynomials.FactoredRational, ((m + 1) | 0), ((m + 1) | 0));
                for (var i = 0; i <= m; i = (i + 1) | 0) {
                    for (var j = 0; j <= m; j = (j + 1) | 0) {
                        this.FactoredDifference.set([i, j], new Algorithms.Polynomials.FactoredRational.$ctor1(((i - j) | 0)));
                    }
                }

                this.InsideProduct = System.Array.create(null, null, Algorithms.Polynomials.FactoredRational, height.length, ((m + 1) | 0));
                for (var i1 = 0; i1 < height.length; i1 = (i1 + 1) | 0) {
                    for (var j1 = 0; j1 <= height[System.Array.index(i1, height)]; j1 = (j1 + 1) | 0) {
                        this.InsideProduct.set([i1, j1], ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = new (System.Collections.Generic.List$1(System.Int32))(), $t.Sign = 1, $t));
                        for (var k = 0; k <= height[System.Array.index(i1, height)]; k = (k + 1) | 0) {
                            if (k === j1) {
                                continue;
                            }

                            this.InsideProduct.set([i1, j1], Algorithms.Polynomials.FactoredRational.op_Multiply(this.InsideProduct.get([i1, j1]), this.FactoredDifference.get([j1, k])));
                        }
                    }
                }
        }
    },
    methods: {
        Get: function (a) {
            var $t;
            var normalizer = ($t = new Algorithms.Polynomials.FactoredRational.ctor(), $t.K = new (System.Collections.Generic.List$1(System.Int32))(), $t.Sign = 1, $t);
            for (var i = 0; i < a.length; i = (i + 1) | 0) {
                normalizer = Algorithms.Polynomials.FactoredRational.op_Multiply(normalizer, this.InsideProduct.get([i, a[System.Array.index(i, a)]]));
            }

            return normalizer;
        }
    }
    });

    Bridge.define("Algorithms.Polynomials.PrimeNumbers", {
        statics: {
            fields: {
                _primes: null
            },
            ctors: {
                init: function () {
                    this._primes = $asm.$.Algorithms.Polynomials.PrimeNumbers.f1(new (System.Collections.Generic.List$1(System.Int32))());
                }
            },
            methods: {
                Get: function (i) {
                    if (i >= Algorithms.Polynomials.PrimeNumbers._primes.Count) {
                        Algorithms.Polynomials.PrimeNumbers.ComputeMorePrimes(i);
                    }

                    return Algorithms.Polynomials.PrimeNumbers._primes.getItem(i);
                },
                ComputeMorePrimes: function (i) {
                    var m = Math.max(i, Bridge.Int.mul(2, Algorithms.Polynomials.PrimeNumbers._primes.Count));
                    var p = (Algorithms.Polynomials.PrimeNumbers._primes.getItem(((Algorithms.Polynomials.PrimeNumbers._primes.Count - 1) | 0)) + 2) | 0;

                    while (Algorithms.Polynomials.PrimeNumbers._primes.Count <= m) {
                        if (Algorithms.Polynomials.PrimeNumbers.IsPrime(p)) {
                            Algorithms.Polynomials.PrimeNumbers._primes.add(p);
                        }

                        p = (p + 2) | 0;
                    }
                },
                IsPrime: function (p) {
                    for (var k = 0; Bridge.Int.mul(Algorithms.Polynomials.PrimeNumbers._primes.getItem(k), Algorithms.Polynomials.PrimeNumbers._primes.getItem(k)) <= p; k = (k + 1) | 0) {
                        if (p % Algorithms.Polynomials.PrimeNumbers._primes.getItem(k) === 0) {
                            return false;
                        }
                    }

                    return true;
                }
            }
        }
    });

    Bridge.ns("Algorithms.Polynomials.PrimeNumbers", $asm.$);

    Bridge.apply($asm.$.Algorithms.Polynomials.PrimeNumbers, {
        f1: function (_o20) {
            _o20.add(2);
            _o20.add(3);
            _o20.add(5);
            _o20.add(7);
            _o20.add(11);
            _o20.add(13);
            _o20.add(17);
            _o20.add(19);
            return _o20;
        }
    });

    Bridge.define("Algorithms.Polynomials.SignLookup", {
        fields: {
            Sign: null
        },
        ctors: {
            ctor: function (height) {
                this.$initialize();
                var m = System.Linq.Enumerable.from(height).max();

                this.Sign = System.Array.create(0, null, System.Int32, ((m + 1) | 0), ((m + 1) | 0));
                for (var i = 0; i <= m; i = (i + 1) | 0) {
                    for (var j = 0; j <= m; j = (j + 1) | 0) {
                        this.Sign.set([i, j], System.Decimal(((i - j) | 0)).sign());
                    }
                }
            }
        }
    });

    Bridge.define("Algorithms.SubsetEnumerator", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Int64)],
        fields: {
            _setSize: 0,
            _subsetSize: 0
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Int64$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            ctor: function (setSize, subsetSize) {
                this.$initialize();
                this._setSize = setSize;
                this._subsetSize = subsetSize;
            }
        },
        methods: {
            getEnumerator: function () {
                return new Algorithms.SubsetEnumerator.Enumerator(this._setSize, this._subsetSize);
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            }
        }
    });

    Bridge.define("Algorithms.SubsetEnumerator.Enumerator", {
        inherits: [System.Collections.Generic.IEnumerator$1(System.Int64)],
        fields: {
            _isFirst: false,
            _setSize: 0,
            _subsetSize: 0,
            _current: System.Int64(0)
        },
        props: {
            Current: {
                get: function () {
                    return this._current;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current;
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Int64$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "dispose", "System$IDisposable$dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "reset", "System$Collections$IEnumerator$reset"
        ],
        ctors: {
            init: function () {
                this._isFirst = true;
            },
            ctor: function (setSize, subsetSize) {
                this.$initialize();
                this._setSize = setSize;
                this._subsetSize = subsetSize;
            }
        },
        methods: {
            dispose: function () { },
            moveNext: function () {
                if (this._isFirst) {
                    if (this._subsetSize > this._setSize) {
                        return false;
                    }

                    this._current = System.Int64(((((1 << this._subsetSize) - 1) | 0)) << (((this._setSize - this._subsetSize) | 0)));

                    this._isFirst = false;
                    return true;
                }

                var lsb = this._current.and(this._current.neg());

                if (lsb.gt(System.Int64(1))) {
                    this._current = this._current.xor(lsb).xor((lsb.shr(1)));

                    return true;
                }

                var high = this._current.and((this._current.add(System.Int64(1))));

                if (high.equals(System.Int64(0))) {
                    return false;
                }

                var low = this._current.xor(high);
                low = (low.shl(2)).add(System.Int64(3));

                while ((low.and(high)).equals(System.Int64(0))) {
                    low = low.shl(1);
                }

                this._current = high.xor(low);

                return true;
            },
            reset: function () {
                this._isFirst = true;
            }
        }
    });

    Bridge.define("Algorithms.TransitivePartition", {
        props: {
            Parts: null
        },
        ctors: {
            ctor: function (set) {
                this.$initialize();
                this.Parts = function (_o21) {
                        var $t;
                        _o21.add(($t = new Algorithms.TransitivePartition.Part(), $t.Set = set, $t.Scores = new (System.Collections.Generic.List$1(System.Int32))(), $t));
                        return _o21;
                    }(new (System.Collections.Generic.List$1(Algorithms.TransitivePartition.Part))());
            }
        },
        methods: {
            Refine: function (score, scoreNumber) {
                var $t, $t1;
                if (this.Parts.getItem(0).Scores.Count >= scoreNumber) {
                    return;
                }

                var refined = new (System.Collections.Generic.List$1(Algorithms.TransitivePartition.Part))(this.Parts.Count);
                $t = Bridge.getEnumerator(this.Parts);
                try {
                    while ($t.moveNext()) {
                        var part = $t.Current;
                        var map = this.RefinePart(part, score);
                        $t1 = Bridge.getEnumerator(map);
                        try {
                            while ($t1.moveNext()) {
                                var kvp = $t1.Current;
                                var p = new Algorithms.TransitivePartition.Part();
                                p.Set = kvp.value;
                                p.Scores = new (System.Collections.Generic.List$1(System.Int32))(part.Scores);
                                p.Scores.add(kvp.key);

                                refined.add(p);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.Parts = refined;
            },
            RefinePart: function (part, score) {
                var $t;
                var map = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)))();
                $t = Bridge.getEnumerator(part.Set);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        var x = score[System.Array.index(v, score)];
                        var l = { };
                        if (!map.tryGetValue(x, l)) {
                            l.v = new (System.Collections.Generic.List$1(System.Int32))();
                            map.set(x, l.v);
                        }

                        l.v.add(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return map;
            },
            equals: function (obj) {
                var $t;
                var tp = Bridge.as(obj, Algorithms.TransitivePartition);
                if (tp == null) {
                    return false;
                }

                $t = Bridge.getEnumerator(this.Parts);
                try {
                    while ($t.moveNext()) {
                        var part = $t.Current;
                        var p = tp.FindPartWithScores(part.Scores);
                        if (p == null) {
                            return false;
                        }

                        if (p.Set.Count !== part.Set.Count) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this);
            },
            FindPartWithScores: function (scores) {
                var $t;
                $t = Bridge.getEnumerator(this.Parts);
                try {
                    while ($t.moveNext()) {
                        var part = $t.Current;
                        if (System.Linq.Enumerable.from(part.Scores).sequenceEqual(scores)) {
                            return part;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return null;
            }
        }
    });

    Bridge.define("Algorithms.TransitivePartition.Part", {
        props: {
            Set: null,
            Scores: null
        }
    });

    Bridge.define("Algorithms.UnpermutedAssignmentEnumerator", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int64))],
        fields: {
            _vertexCount: 0,
            _f: null,
            _potSize: 0,
            _start: 0,
            _step: 0,
            _pairMaskToBadMask: null
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$List$1$System$Int64$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            ctor: function (vertexCount, f, potSize, start, step) {
                if (start === void 0) { start = 0; }
                if (step === void 0) { step = 1; }

                this.$initialize();
                this._vertexCount = vertexCount;
                this._f = f;
                this._potSize = potSize;
                this._start = start;
                this._step = step;

                this._pairMaskToBadMask = Algorithms.Int64Usage.GeneratePairMasks(this._potSize);
            }
        },
        methods: {
            getEnumerator: function () {
                return System.Linq.Enumerable.from(this.GetEnumerable(this._vertexCount)).where(Bridge.fn.bind(this, $asm.$.Algorithms.UnpermutedAssignmentEnumerator.f1)).getEnumerator();
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            },
            GetEnumerableRecursive: function (vertexCount) {
                if (vertexCount === 1) {
                    return Algorithms.GenericExtensions.EnList(System.Collections.Generic.List$1(System.Int64), Algorithms.GenericExtensions.EnList(System.Int64, ((System.Int64(1).shl(this._f(0))).sub(System.Int64(1)))));
                }

                return System.Linq.Enumerable.from(this.GetEnumerableRecursive(((vertexCount - 1) | 0))).selectMany(Bridge.fn.bind(this, $asm.$.Algorithms.UnpermutedAssignmentEnumerator.f2));
            },
            GetEnumerable: function (vertexCount) {
                var enumerable = Algorithms.GenericExtensions.EnList(System.Collections.Generic.List$1(System.Int64), Algorithms.GenericExtensions.EnList(System.Int64, ((System.Int64(1).shl(this._f(0))).sub(System.Int64(1)))));

                for (var i = 1; i < vertexCount; i = (i + 1) | 0) {
                    enumerable = System.Linq.Enumerable.from(enumerable).selectMany(Bridge.fn.bind(this, $asm.$.Algorithms.UnpermutedAssignmentEnumerator.f2));
                }

                return enumerable;
            },
            GetExtensions: function (list) {
                var restricted = System.Linq.Enumerable.from(this._pairMaskToBadMask).where(Bridge.fn.bind(this, function (kvp) {
                        return this.IsRestricted(kvp.key, list);
                    }));

                var size = this._f(list.Count);

                return System.Linq.Enumerable.from(new Algorithms.SubsetEnumerator(this._potSize, size)).where(function (subset) {
                        return restricted.all(function (kvp) {
                            return (subset.and(kvp.key)).ne(kvp.value);
                        });
                    }).select(function (subset) {
                    return System.Linq.Enumerable.from(list).concat(System.Array.init([subset], System.Int64)).toList(System.Int64);
                });
            },
            IsRestricted: function (p, list) {
                var $t;
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        var intersection = x.and(p);
                        if (intersection.ne(System.Int64(0)) && intersection.ne(x)) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            }
        }
    });

    Bridge.ns("Algorithms.UnpermutedAssignmentEnumerator", $asm.$);

    Bridge.apply($asm.$.Algorithms.UnpermutedAssignmentEnumerator, {
        f1: function (list, i) {
            return (((i - this._start) | 0)) % this._step === 0;
        },
        f2: function (list) {
            return this.GetExtensions(list);
        }
    });

    Bridge.define("Algorithms.Utility.EquivalenceRelation$1", function (T) { return {
        fields: {
            _nodeLookup: null
        },
        ctors: {
            init: function () {
                this._nodeLookup = new (System.Collections.Generic.Dictionary$2(T,Algorithms.Utility.EquivalenceRelation$1.Node(T)))();
            }
        },
        methods: {
            AddElement: function (t) {
                this.LookupNode(t);
            },
            Relate: function (x, y) {
                var nx = this.LookupNode(x);
                var ny = this.LookupNode(y);

                var xRoot = this.Find(nx);
                var yRoot = this.Find(ny);

                if (Bridge.referenceEquals(xRoot, yRoot)) {
                    return;
                }

                if (xRoot.Rank < yRoot.Rank) {
                    xRoot.Parent = yRoot;
                } else {
                    if (xRoot.Rank > yRoot.Rank) {
                        yRoot.Parent = xRoot;
                    } else {
                        yRoot.Parent = xRoot;
                        xRoot.Rank = (xRoot.Rank + 1) | 0;
                    }
                }
            },
            AreRelated: function (x, y) {
                var nx = this.LookupNode(x);
                var ny = this.LookupNode(y);

                return Bridge.referenceEquals(this.Find(nx), this.Find(ny));
            },
            GetEquivalenceClass: function (x) {
                var nx = this.LookupNode(x);
                var xRoot = this.Find(nx);

                return System.Linq.Enumerable.from(this._nodeLookup.getValues()).where(Bridge.fn.bind(this, function (node) {
                        return Bridge.referenceEquals(this.Find(node), xRoot);
                    })).select($asm.$.Algorithms.Utility.EquivalenceRelation$1.f1);
            },
            GetEquivalenceClasses: function () {
                return System.Linq.Enumerable.from(this._nodeLookup.getValues()).groupBy(Bridge.fn.bind(this, function (node) {
                        return this.Find(node);
                    })).select(function (group) {
                    return group.select($asm.$.Algorithms.Utility.EquivalenceRelation$1.f1);
                });
            },
            Find: function (n) {
                if (!Bridge.referenceEquals(n.Parent, n)) {
                    n.Parent = this.Find(n.Parent);
                }

                return n.Parent;
            },
            LookupNode: function (t) {
                var node = { };
                if (!this._nodeLookup.tryGetValue(t, node)) {
                    node.v = new (Algorithms.Utility.EquivalenceRelation$1.Node(T))();
                    node.v.Parent = node.v;
                    node.v.Rank = 0;
                    node.v.T = t;

                    this._nodeLookup.set(t, node.v);
                }

                return node.v;
            }
        }
    }; });

    Bridge.ns("Algorithms.Utility.EquivalenceRelation$1", $asm.$);

    Bridge.apply($asm.$.Algorithms.Utility.EquivalenceRelation$1, {
        f1: function (node) {
            return node.T;
        }
    });

    Bridge.define("Algorithms.Utility.EquivalenceRelation$1.Node", function (T) { return {
        props: {
            Parent: null,
            Rank: 0,
            T: Bridge.getDefaultValue(T)
        }
    }; });

    Bridge.define("Algorithms.Utility.Factoradic", {
        props: {
            Digits: null,
            Value: System.Int64(0)
        },
        ctors: {
            $ctor1: function (value, n) {
                this.$initialize();
                this.Value = value;

                this.Digits = new (System.Collections.Generic.List$1(System.Int32))(n);
                this.Digits.add(0);

                var i = 1;
                while (value.gt(System.Int64(0))) {
                    this.Digits.add(System.Int64.clip32(value.mod(System.Int64(((i = (i + 1) | 0))))));
                    value = value.div(System.Int64(i));
                }

                for (i = this.Digits.Count; i < n; i = (i + 1) | 0) {
                    this.Digits.add(0);
                }
            },
            ctor: function (p) {
                this.$initialize();
                this.Digits = new (System.Collections.Generic.List$1(System.Int32))(p.N);

                var elements = new (System.Collections.Generic.List$1(System.Int32))(p.N);
                for (var i = 0; i < p.N; i = (i + 1) | 0) {
                    elements.add(i);
                }

                for (var i1 = 0; i1 < p.N; i1 = (i1 + 1) | 0) {
                    this.Digits.add(elements.indexOf(p.getItem(i1)));
                    elements.remove(p.getItem(i1));
                }

                this.Digits.reverse();

                this.Value = System.Int64(0);
                var n = 1;
                for (var i2 = 0; i2 < this.Digits.Count; i2 = (i2 + 1) | 0) {
                    this.Value = this.Value.add(System.Int64((Bridge.Int.mul(this.Digits.getItem(i2), n))));
                    n = Bridge.Int.mul(n, (((i2 + 1) | 0)));
                }

            }
        }
    });

    Bridge.define("Algorithms.Utility.Flows", {
        statics: {
            methods: {
                BipartiteMaximumMatching: function (n, adjacencies) {
                    var $t;
                    var capacity = System.Array.create(0, null, System.Int32, ((n + 2) | 0), ((n + 2) | 0));
                    var source = 0;
                    var target = 1;

                    var lo = 2;
                    var ro = (lo + adjacencies.Count) | 0;

                    for (var i = 0; i < adjacencies.Count; i = (i + 1) | 0) {
                        capacity.set([source, ((lo + i) | 0)], 1);

                        $t = Bridge.getEnumerator(adjacencies.getItem(i));
                        try {
                            while ($t.moveNext()) {
                                var j = $t.Current;
                                capacity.set([((lo + i) | 0), ((ro + j) | 0)], 1);
                                capacity.set([((ro + j) | 0), target], 1);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}

                    return Algorithms.Utility.Flows.MaxFlow(capacity, source, target);
                },
                MaxFlow: function (capacity, source, target) {
                    return new Algorithms.Utility.Flows.FordFulkerson(capacity, source, target).MaxFlow();
                }
            }
        }
    });

    Bridge.define("Algorithms.Utility.Flows.FordFulkerson", {
        fields: {
            _n: 0,
            _source: 0,
            _target: 0,
            _capacity: null,
            _flow: null
        },
        ctors: {
            ctor: function (capacity, source, target) {
                this.$initialize();
                this._capacity = capacity;
                this._source = source;
                this._target = target;

                this._n = System.Array.getLength(capacity, 0);
                this._flow = System.Array.create(0, null, System.Int32, this._n, this._n);
            }
        },
        methods: {
            MaxFlow: function () {
                while (true) {
                    var path = $asm.$.Algorithms.Utility.Flows.FordFulkerson.f1(new (System.Collections.Generic.List$1(System.Int32))());
                    var done = !this.FindAugmentingPath(path);
                    if (done) {
                        break;
                    }

                    this.AddFlow(path);
                }

                return System.Linq.Enumerable.range(0, this._n).sum(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.Flows.FordFulkerson.f2));
            },
            FindAugmentingPath: function (path) {
                var $t;
                var last = path.getItem(((path.Count - 1) | 0));

                if (last === this._target) {
                    return true;
                }

                $t = Bridge.getEnumerator(this.OutNeighbors(last), System.Int32);
                try {
                    while ($t.moveNext()) {
                        var j = $t.Current;
                        if (path.contains(j)) {
                            continue;
                        }

                        path.add(j);

                        var isAugmenting = this.FindAugmentingPath(path);
                        if (isAugmenting) {
                            return true;
                        }

                        path.remove(j);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            OutNeighbors: function (i) {
                return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (i) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        j,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        j = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( j < this._n ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        if (((this._capacity.get([i, j]) - this._flow.get([i, j])) | 0) > 0) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 5;
                                            continue;
                                    }
                                    case 3: {
                                        $enumerator.current = j;
                                            $step = 4;
                                            return true;
                                    }
                                    case 4: {
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            AddFlow: function (path) {
                var gain = this.FindGain(path);

                for (var i = 0; i < ((path.Count - 1) | 0); i = (i + 1) | 0) {
                    this._flow.set([path.getItem(i), path.getItem(((i + 1) | 0))], (this._flow.get([path.getItem(i), path.getItem(((i + 1) | 0))]) + gain) | 0);
                    this._flow.set([path.getItem(((i + 1) | 0)), path.getItem(i)], (-this._flow.get([path.getItem(i), path.getItem(((i + 1) | 0))])) | 0);
                }
            },
            FindGain: function (path) {
                var gain = 2147483647;

                for (var i = 0; i < ((path.Count - 1) | 0); i = (i + 1) | 0) {
                    gain = Math.min(gain, ((this._capacity.get([path.getItem(i), path.getItem(((i + 1) | 0))]) - this._flow.get([path.getItem(i), path.getItem(((i + 1) | 0))])) | 0));
                }

                return gain;
            }
        }
    });

    Bridge.ns("Algorithms.Utility.Flows.FordFulkerson", $asm.$);

    Bridge.apply($asm.$.Algorithms.Utility.Flows.FordFulkerson, {
        f1: function (_o22) {
            _o22.add(0);
            return _o22;
        },
        f2: function (i) {
            return this._flow.get([this._source, i]);
        }
    });

    Bridge.define("Algorithms.Utility.LinqExtensions", {
        statics: {
            methods: {
                CartesianProduct$2: function (T, a, b) {
                    return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct(T, System.Array.init([a, b], System.Collections.Generic.IEnumerable$1(T)))).select(function (s) {
                            return { item1: System.Linq.Enumerable.from(s).elementAt(0), item2: System.Linq.Enumerable.from(s).elementAt(1) };
                        });
                },
                CartesianProduct: function (T, sequences) {
                    var emptyProduct = System.Array.init([System.Linq.Enumerable.empty()], System.Linq.EnumerableInstance$1);

                    return System.Linq.Enumerable.from(sequences).aggregate(emptyProduct, function (accumulator, sequence) {
                            return System.Linq.Enumerable.from(accumulator).selectMany(function (accseq) {
                                    return sequence;
                                }, function (accseq, item) {
                                    return System.Linq.Enumerable.from(accseq).concat(System.Array.init([item], T));
                                });
                        });
                },
                CartesianProduct$1: function (T, sequences) {
                    var emptyProduct = System.Array.init([System.Linq.Enumerable.empty()], System.Linq.EnumerableInstance$1);

                    return System.Linq.Enumerable.from(sequences).aggregate(emptyProduct, function (accumulator, sequence) {
                            return System.Linq.Enumerable.from(accumulator).selectMany(function (accseq) {
                                    return sequence;
                                }, function (accseq, item) {
                                    return System.Linq.Enumerable.from(accseq).concat(System.Array.init([item], T));
                                });
                        });
                },
                Concat: function (T, e, value) {
                    return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, e, value) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            $t,
                            v,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            $t = Bridge.getEnumerator(e, T);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    v = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = v;
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {
                                            $enumerator.current = value;
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                Distinct: function (T, source, areEqual) {
                    return new (Bridge.GeneratorEnumerable$1(T))(Bridge.fn.bind(this, function (T, source, areEqual) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            yielded,
                            $t,
                            t,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            yielded = new (System.Collections.Generic.List$1(T))();

                                                $t = Bridge.getEnumerator(source, T);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    t = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 2: {
                                            if (System.Linq.Enumerable.from(yielded).all((function ($me, t) {
                                                        return function (x) {
                                                            return !areEqual(x, t);
                                                        };
                                                    })(this, t))) {
                                                    $step = 3;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 3: {
                                            yielded.add(t);
                                                $enumerator.current = t;
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Algorithms.Utility.ListUtility", {
        statics: {
            methods: {
                DifferenceSorted: function (T, A, B) {
                    if (B == null) {
                        return System.Linq.Enumerable.from(A).toList(T);
                    }

                    var C = new (System.Collections.Generic.List$1(T))(Math.max(4, ((A.Count - B.Count) | 0)));
                    var j = 0;
                    for (var i = 0; i < A.Count; i = (i + 1) | 0) {
                        while (j < B.Count && Bridge.compare(A.getItem(i), B.getItem(j)) > 0) {
                            j = (j + 1) | 0;
                        }

                        if (j >= B.Count || Bridge.compare(A.getItem(i), B.getItem(j)) < 0) {
                            C.add(A.getItem(i));
                        }
                    }

                    return C;
                },
                DifferenceSorted$1: function (A, B) {
                    if (B == null) {
                        return System.Linq.Enumerable.from(A).toList(System.Int32);
                    }

                    var C = new (System.Collections.Generic.List$1(System.Int32))(Math.max(4, ((A.Count - B.Count) | 0)));
                    var j = 0;
                    for (var i = 0; i < A.Count; i = (i + 1) | 0) {
                        while (j < B.Count && A.getItem(i) > B.getItem(j)) {
                            j = (j + 1) | 0;
                        }

                        if (j >= B.Count || A.getItem(i) < B.getItem(j)) {
                            C.add(A.getItem(i));
                        }
                    }

                    return C;
                },
                IntersectionSorted: function (T, A, B) {
                    if (A == null || B == null) {
                        return new (System.Collections.Generic.List$1(T))();
                    }

                    var C = new (System.Collections.Generic.List$1(T))(Math.min(A.Count, B.Count));
                    var i = 0;
                    var j = 0;

                    while (i < A.Count && j < B.Count) {
                        var compare = Bridge.compare(A.getItem(i), B.getItem(j));

                        if (compare === 0) {
                            C.add(A.getItem(i));
                        }
                        if (compare <= 0) {
                            i = (i + 1) | 0;
                        }
                        if (compare >= 0) {
                            j = (j + 1) | 0;
                        }
                    }

                    return C;
                },
                IntersectionSorted$1: function (A, B) {
                    if (A == null || B == null) {
                        return new (System.Collections.Generic.List$1(System.Int32))();
                    }

                    var C = new (System.Collections.Generic.List$1(System.Int32))(Math.min(A.Count, B.Count));
                    var i = 0;
                    var j = 0;

                    var ac = A.Count;
                    var bc = B.Count;
                    while (i < ac && j < bc) {
                        var a = A.getItem(i);
                        var b = B.getItem(j);

                        if (a === b) {
                            C.add(a);
                        }
                        if (a <= b) {
                            i = (i + 1) | 0;
                        }
                        if (a >= b) {
                            j = (j + 1) | 0;
                        }
                    }

                    return C;
                },
                IntersectionCountSorted$1: function (T, A, B) {
                    if (A == null || B == null) {
                        return 0;
                    }

                    var count = 0;
                    var i = 0;
                    var j = 0;

                    while (i < A.Count && j < B.Count) {
                        var compare = Bridge.compare(A.getItem(i), B.getItem(j));

                        if (compare === 0) {
                            count = (count + 1) | 0;
                        }
                        if (compare <= 0) {
                            i = (i + 1) | 0;
                        }
                        if (compare >= 0) {
                            j = (j + 1) | 0;
                        }
                    }

                    return count;
                },
                IntersectionCountSorted: function (A, B) {
                    if (A == null || B == null) {
                        return 0;
                    }

                    var count = 0;
                    var i = 0;
                    var j = 0;

                    var ac = A.Count;
                    var bc = B.Count;
                    while (i < ac && j < bc) {
                        var a = A.getItem(i);
                        var b = B.getItem(j);

                        if (a === b) {
                            count = (count + 1) | 0;
                        }
                        if (a <= b) {
                            i = (i + 1) | 0;
                        }
                        if (a >= b) {
                            j = (j + 1) | 0;
                        }
                    }

                    return count;
                },
                UnionSorted: function (T, A, B) {
                    var list = Algorithms.Utility.ListUtility.DifferenceSorted(T, A, B);
                    list.addRange(Algorithms.Utility.ListUtility.DifferenceSorted(T, B, A));

                    return list;
                },
                UnionSorted$1: function (A, B) {
                    var list = Algorithms.Utility.ListUtility.DifferenceSorted$1(A, B);
                    list.addRange(Algorithms.Utility.ListUtility.DifferenceSorted$1(B, A));

                    return list;
                },
                EqualSorted$1: function (T, A, B) {
                    return A.Count === B.Count && Algorithms.Utility.ListUtility.IntersectionCountSorted$1(T, A, B) === A.Count;
                },
                EqualSorted: function (A, B) {
                    return A.Count === B.Count && Algorithms.Utility.ListUtility.IntersectionCountSorted(A, B) === A.Count;
                },
                SubsetEqualSorted$1: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.IntersectionCountSorted$1(T, A, B) === A.Count;
                },
                SubsetEqualSorted: function (A, B) {
                    return Algorithms.Utility.ListUtility.IntersectionCountSorted(A, B) === A.Count;
                },
                SubsetSorted$1: function (T, A, B) {
                    return A.Count < B.Count && Algorithms.Utility.ListUtility.IntersectionCountSorted$1(T, A, B) === A.Count;
                },
                SubsetSorted: function (A, B) {
                    return A.Count < B.Count && Algorithms.Utility.ListUtility.IntersectionCountSorted(A, B) === A.Count;
                },
                MaximalElementsSorted: function (T, A) {
                    var $t;
                    if (A == null || A.Count <= 0) {
                        return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                    }

                    var chainHeads = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();

                    $t = Bridge.getEnumerator(A);
                    try {
                        while ($t.moveNext()) {
                            var set = $t.Current;
                            var removed = Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), chainHeads, (function ($me, set) {
                                return function (head) {
                                    return Algorithms.Utility.ListUtility.SubsetEqualSorted$1(T, head, set);
                                };
                            })(this, set), $asm.$.Algorithms.Utility.ListUtility.f1);
                            if (removed > 0 || System.Linq.Enumerable.from(chainHeads).all((function ($me, set) {
                                    return function (head) {
                                        return !Algorithms.Utility.ListUtility.SubsetEqualSorted$1(T, set, head);
                                    };
                                })(this, set))) {
                                chainHeads.add(set);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return chainHeads;
                },
                MaximalElementsSorted$1: function (A) {
                    var $t;
                    if (A == null || A.Count <= 0) {
                        return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                    }

                    var chainHeads = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();

                    $t = Bridge.getEnumerator(A);
                    try {
                        while ($t.moveNext()) {
                            var set = $t.Current;
                            var removed = Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(System.Int32), chainHeads, (function ($me, set) {
                                return function (head) {
                                    return Algorithms.Utility.ListUtility.SubsetEqualSorted(head, set);
                                };
                            })(this, set), $asm.$.Algorithms.Utility.ListUtility.f1);
                            if (removed > 0 || System.Linq.Enumerable.from(chainHeads).all((function ($me, set) {
                                    return function (head) {
                                        return !Algorithms.Utility.ListUtility.SubsetEqualSorted(set, head);
                                    };
                                })(this, set))) {
                                chainHeads.add(set);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return chainHeads;
                },
                MultiSetIntersection: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).MultiSetIntersection(A, B);
                },
                MultiSetIntersectionCount: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).MultiSetIntersectionCount(A, B);
                },
                MultiSetEqual: function (T, A, B) {
                    return A.Count === B.Count && Algorithms.Utility.ListUtility.MultiSetIntersectionCount(T, A, B) === A.Count;
                },
                MultiSetSubsetEqual: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.MultiSetIntersectionCount(T, A, B) === A.Count;
                },
                MultiSetSubset: function (T, A, B) {
                    return A.Count < B.Count && Algorithms.Utility.ListUtility.MultiSetIntersectionCount(T, A, B) === A.Count;
                },
                BinomialCoefficient: function (n, k) {
                    if (k.lt(System.Int64(0))) {
                        return System.Int64(1);
                    }

                    var max = System.Int64.max(k, n.sub(k));
                    var min = System.Int64.min(k, n.sub(k));

                    var result = System.Int64(1);
                    while (n.gt(max)) {
                        result = result.mul(n);
                        n = n.dec();
                    }

                    while (min.gt(System.Int64(0))) {
                        result = result.div(min);

                        min = min.dec();
                    }

                    return result;
                },
                ToString: function (T, A) {
                    var $t;
                    var sb = new System.Text.StringBuilder();

                    $t = Bridge.getEnumerator(A);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            sb.appendFormat("{0}, ", t.toString());
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return System.String.trimEnd(sb.toString(), [32, 44]);
                },
                Difference: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).Difference(A, B);
                },
                Intersection: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).Intersection(A, B);
                },
                IntersectionCount: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).IntersectionCount(A, B);
                },
                Union$1: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).Union$1(A, B);
                },
                Union: function (T, A, b) {
                    return Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T).Union(A, b);
                },
                Equal: function (T, A, B) {
                    return A.Count === B.Count && Algorithms.Utility.ListUtility.IntersectionCount(T, A, B) === A.Count;
                },
                SubsetEqual: function (T, A, B) {
                    return Algorithms.Utility.ListUtility.IntersectionCount(T, A, B) === A.Count;
                },
                Subset: function (T, A, B) {
                    return A.Count < B.Count && Algorithms.Utility.ListUtility.IntersectionCount(T, A, B) === A.Count;
                },
                MaximalElements: function (T, A) {
                    var $t;
                    if (A == null || A.Count <= 0) {
                        return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                    }

                    var chainHeads = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();

                    $t = Bridge.getEnumerator(A);
                    try {
                        while ($t.moveNext()) {
                            var set = $t.Current;
                            var removed = Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), chainHeads, (function ($me, set) {
                                return function (head) {
                                    return Algorithms.Utility.ListUtility.SubsetEqual(T, head, set);
                                };
                            })(this, set), $asm.$.Algorithms.Utility.ListUtility.f1);
                            if (removed > 0 || System.Linq.Enumerable.from(chainHeads).all((function ($me, set) {
                                    return function (head) {
                                        return !Algorithms.Utility.ListUtility.SubsetEqual(T, set, head);
                                    };
                                })(this, set))) {
                                chainHeads.add(set);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return chainHeads;
                },
                GenerateSublists: function (T, list) {
                    var sublists = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                    sublists.add(new (System.Collections.Generic.List$1(T))());

                    var clone = new (System.Collections.Generic.List$1(T))(list);

                    while (clone.Count > 0) {
                        var head = clone.getItem(0);

                        var count = sublists.Count;
                        for (var i = 0; i < count; i = (i + 1) | 0) {
                            var union = new (System.Collections.Generic.List$1(T))(sublists.getItem(i));
                            union.add(head);

                            sublists.add(union);
                        }

                        clone.removeAt(0);
                    }

                    return sublists;
                },
                GenerateSublists$1: function (T, list, size) {
                    var $t;
                    var sublists = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                    var n = list.Count;
                    $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateShortLex$1(n, size), System.Collections.Generic.List$1(System.Boolean));
                    try {
                        while ($t.moveNext()) {
                            var inOut = $t.Current;
                            sublists.add(Algorithms.Utility.ListUtility.ExtractSublist(T, list, inOut));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return sublists;
                },
                EnumerateSublists: function (T, list) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(T)))(Bridge.fn.bind(this, function (T, list) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            n,
                            $t,
                            inOut,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(T)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            n = list.Count;
                                                $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateShortLex(n), System.Collections.Generic.List$1(System.Boolean));
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    inOut = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = Algorithms.Utility.ListUtility.ExtractSublist(T, list, inOut);
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumerateSublists$1: function (T, list, size) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(T)))(Bridge.fn.bind(this, function (T, list, size) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            n,
                            $t,
                            inOut,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(T)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            n = list.Count;
                                                $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateShortLex$1(n, size), System.Collections.Generic.List$1(System.Boolean));
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    inOut = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = Algorithms.Utility.ListUtility.ExtractSublist(T, list, inOut);
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                NextSublist: function (T, list, size, state) {
                    var n = list.Count;
                    var areMore = Algorithms.Utility.ListUtility.NextShortLex$1(n, size, state);

                    var sublist = Algorithms.Utility.ListUtility.ExtractSublist(T, list, state.v);

                    if (!areMore) {
                        state.v = null;
                    }

                    return sublist;
                },
                ExtractSublist: function (T, list, inOut) {
                    var sublist = new (System.Collections.Generic.List$1(T))();
                    for (var i = 0; i < inOut.Count; i = (i + 1) | 0) {
                        if (inOut.getItem(i)) {
                            sublist.add(list.getItem(i));
                        }
                    }

                    return sublist;
                },
                EnumerateShortLex$1: function (n, k) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function (n, k) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            list,
                            i,
                            i1,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            k = Math.max(0, k);

                                                list = new (System.Collections.Generic.List$1(System.Boolean))(n);
                                                for (i = 0; i < k; i = (i + 1) | 0) {
                                                    list.add(true);
                                                }
                                                for (i1 = k; i1 < n; i1 = (i1 + 1) | 0) {
                                                    list.add(false);
                                                }

                                                
                                        }
                                        case 1: {
                                            $enumerator.current = list;
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            if ( Algorithms.Utility.ListUtility.NextSameTrueCount(list, k) ) {

                                                    $step = 1;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumerateShortLex: function (n) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function (n) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            list,
                            i,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            list = new (System.Collections.Generic.List$1(System.Boolean))(n);
                                                for (i = 0; i < n; i = (i + 1) | 0) {
                                                    list.add(false);
                                                }

                                                
                                        }
                                        case 1: {
                                            $enumerator.current = list;
                                                $step = 2;
                                                return true;
                                        }
                                        case 2: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 3: {
                                            if ( Algorithms.Utility.ListUtility.Next(list) ) {

                                                    $step = 1;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                EnumerateShortLexNonempty: function (n) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function (n) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            k,
                            $t,
                            list,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Boolean)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            k = 1;
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ( k <= n ) {
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumerateShortLex$1(n, k), System.Collections.Generic.List$1(System.Boolean));
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ($t.moveNext()) {
                                                    list = $t.Current;
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            $enumerator.current = list;
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 6: {
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            k = (k + 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 8: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                NextShortLex$1: function (n, k, state) {
                    if (state.v == null) {
                        k = Math.max(0, k);

                        state.v = new (System.Collections.Generic.List$1(System.Boolean))(n);
                        for (var i = 0; i < k; i = (i + 1) | 0) {
                            state.v.add(true);
                        }
                        for (var i1 = k; i1 < n; i1 = (i1 + 1) | 0) {
                            state.v.add(false);
                        }

                        return k > 0 && k < n;
                    }

                    return Algorithms.Utility.ListUtility.NextSameTrueCount(state.v, k);
                },
                NextShortLex: function (n, k, state) {
                    if (state.v == null) {
                        k = Math.max(0, k);

                        state.v = System.Array.init(n, 0, System.Int32);
                        for (var i = 0; i < k; i = (i + 1) | 0) {
                            state.v[System.Array.index(i, state.v)] = 1;
                        }

                        return k <= 0 || k >= n;
                    }

                    var done = !Algorithms.Utility.ListUtility.NextSameOnCount(state.v, k);

                    if (done) {
                        for (var i1 = 0; i1 < k; i1 = (i1 + 1) | 0) {
                            state.v[System.Array.index(i1, state.v)] = 1;
                        }

                        for (var i2 = k; i2 < n; i2 = (i2 + 1) | 0) {
                            state.v[System.Array.index(i2, state.v)] = 0;
                        }
                    }

                    return done;
                },
                Next: function (list) {
                    var trueCount = System.Linq.Enumerable.from(Bridge.cast(list, System.Collections.Generic.IEnumerable$1(System.Boolean))).count($asm.$.Algorithms.Utility.ListUtility.f2);
                    if (trueCount === list.Count) {
                        return false;
                    }

                    var firstHole = Algorithms.Utility.ListUtility.FindFirstHole(list);

                    if (firstHole >= list.Count) {
                        for (var i = 0; i < ((trueCount + 1) | 0); i = (i + 1) | 0) {
                            list.setItem(i, true);
                        }
                        for (var i1 = (trueCount + 1) | 0; i1 < list.Count; i1 = (i1 + 1) | 0) {
                            list.setItem(i1, false);
                        }
                    } else {
                        list.setItem(firstHole, true);

                        var initialTrues = trueCount;
                        for (var i2 = firstHole; i2 < list.Count; i2 = (i2 + 1) | 0) {
                            if (list.getItem(i2)) {
                                initialTrues = (initialTrues - 1) | 0;
                            }
                        }

                        for (var i3 = 0; i3 < initialTrues; i3 = (i3 + 1) | 0) {
                            list.setItem(i3, true);
                        }
                        for (var i4 = initialTrues; i4 < firstHole; i4 = (i4 + 1) | 0) {
                            list.setItem(i4, false);
                        }
                    }

                    return true;
                },
                NextSameTrueCount: function (list, trueCount) {
                    var firstHole = Algorithms.Utility.ListUtility.FindFirstHole(list);

                    if (firstHole >= list.Count) {
                        return false;
                    }

                    list.setItem(firstHole, true);

                    var initialTrues = trueCount;
                    for (var i = firstHole; i < list.Count; i = (i + 1) | 0) {
                        if (list.getItem(i)) {
                            initialTrues = (initialTrues - 1) | 0;
                        }
                    }

                    for (var i1 = 0; i1 < initialTrues; i1 = (i1 + 1) | 0) {
                        list.setItem(i1, true);
                    }
                    for (var i2 = initialTrues; i2 < firstHole; i2 = (i2 + 1) | 0) {
                        list.setItem(i2, false);
                    }

                    return true;
                },
                FindFirstHole: function (list) {
                    var i = 0;
                    while (i < ((list.Count - 1) | 0)) {
                        if (list.getItem(i) && !list.getItem(((i + 1) | 0))) {
                            break;
                        }

                        i = (i + 1) | 0;
                    }

                    return ((i + 1) | 0);
                },
                FindFirstHole$1: function (list) {
                    var i = 0;
                    while (i < ((list.length - 1) | 0)) {
                        if (list[System.Array.index(i, list)] === 1 && list[System.Array.index(((i + 1) | 0), list)] === 0) {
                            break;
                        }

                        i = (i + 1) | 0;
                    }

                    return ((i + 1) | 0);
                },
                NextSameOnCount: function (list, trueCount) {
                    var firstHole = Algorithms.Utility.ListUtility.FindFirstHole$1(list);

                    if (firstHole >= list.length) {
                        return false;
                    }

                    list[System.Array.index(firstHole, list)] = 1;

                    var initialOnes = trueCount;
                    for (var i = firstHole; i < list.length; i = (i + 1) | 0) {
                        initialOnes = (initialOnes - list[System.Array.index(i, list)]) | 0;
                    }

                    for (var i1 = 0; i1 < initialOnes; i1 = (i1 + 1) | 0) {
                        list[System.Array.index(i1, list)] = 1;
                    }
                    for (var i2 = initialOnes; i2 < firstHole; i2 = (i2 + 1) | 0) {
                        list[System.Array.index(i2, list)] = 0;
                    }

                    return true;
                },
                EnumeratePartitionsUnordered: function (sizes) {
                    return Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)), Algorithms.Utility.ListUtility.EnumeratePartitions$1(sizes, 0), $asm.$.Algorithms.Utility.ListUtility.f4);
                },
                EnumeratePartitions: function (sizes) {
                    return Algorithms.Utility.ListUtility.EnumeratePartitions$1(sizes, 0);
                },
                EnumeratePartitions$1: function (sizes, item) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function (sizes, item) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            childless,
                            i,
                            $t,
                            partition,
                            partition1,
                            i1,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            childless = true;
                                                i = 0;
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ( i < sizes.length ) {
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (sizes[System.Array.index(i, sizes)] <= 0) {
                                                    $step = 7;
                                                    continue;
                                                }

                                                childless = false;

                                                sizes[System.Array.index(i, sizes)] = (sizes[System.Array.index(i, sizes)] - 1) | 0;

                                                $t = Bridge.getEnumerator(Algorithms.Utility.ListUtility.EnumeratePartitions$1(sizes, ((item + 1) | 0)), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ($t.moveNext()) {
                                                    partition = $t.Current;
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            partition.getItem(i).add(item);
                                                $enumerator.current = partition;
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 6: {
                                            sizes[System.Array.index(i, sizes)] = (sizes[System.Array.index(i, sizes)] + 1) | 0;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            i = (i + 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 8: {
                                            if (childless) {
                                                    $step = 9;
                                                    continue;
                                                } 
                                                $step = 11;
                                                continue;
                                        }
                                        case 9: {
                                            partition1 = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                                                for (i1 = 0; i1 < sizes.length; i1 = (i1 + 1) | 0) {
                                                    partition1.add(new (System.Collections.Generic.List$1(System.Int32))());
                                                }

                                                $enumerator.current = partition1;
                                                $step = 10;
                                                return true;
                                        }
                                        case 10: {
                                            $step = 11;
                                            continue;
                                        }
                                        case 11: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.ns("Algorithms.Utility.ListUtility", $asm.$);

    Bridge.apply($asm.$.Algorithms.Utility.ListUtility, {
        f1: function (x) { },
        f2: function (b) {
            return b;
        },
        f3: function (a, b) {
            var $t;
            return Algorithms.Utility.ListUtility.Equal(System.Int32, a, b) ? ($t = new Algorithms.Utility.PartialOrderResult(), $t.AtMost = true, $t.AtLeast = true, $t) : new Algorithms.Utility.PartialOrderResult();
        },
        f4: function (aa, bb) {
            return Algorithms.Utility.PartialOrder.Embeds(System.Collections.Generic.List$1(System.Int32), aa, bb, $asm.$.Algorithms.Utility.ListUtility.f3);
        }
    });

    Bridge.define("Algorithms.Utility.ListUtility.ListUtilityGeneric$1", function (T) { return {
        statics: {
            fields: {
                _set: null,
                _multiSet: null
            },
            ctors: {
                init: function () {
                    this._set = new (System.Collections.Generic.HashSet$1(T)).ctor();
                    this._multiSet = new (System.Collections.Generic.Dictionary$2(T,System.Int32))();
                }
            },
            methods: {
                Intersection: function (A, B) {
                    var $t, $t1;
                    if (A == null || B == null) {
                        return new (System.Collections.Generic.List$1(T))();
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._set;
                    inB.clear();

                    $t = Bridge.getEnumerator(B, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            inB.add(t);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var intersection = new (System.Collections.Generic.List$1(T))(inB.Count);
                    $t1 = Bridge.getEnumerator(A, T);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            if (inB.contains(t1)) {
                                intersection.add(t1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return intersection;
                },
                IntersectionCount: function (A, B) {
                    var $t, $t1;
                    if (A == null || B == null) {
                        return 0;
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._set;
                    inB.clear();

                    $t = Bridge.getEnumerator(B, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            inB.add(t);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var count = 0;
                    $t1 = Bridge.getEnumerator(A, T);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            if (inB.contains(t1)) {
                                count = (count + 1) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return count;
                },
                Difference: function (A, B) {
                    var $t, $t1;
                    if (A == null) {
                        return new (System.Collections.Generic.List$1(T))();
                    }
                    if (B == null) {
                        B = new (System.Collections.Generic.List$1(T))();
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._set;
                    inB.clear();

                    $t = Bridge.getEnumerator(B, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            inB.add(t);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var difference = new (System.Collections.Generic.List$1(T))(inB.Count);
                    $t1 = Bridge.getEnumerator(A, T);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            if (!inB.contains(t1)) {
                                difference.add(t1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return difference;
                },
                Union$1: function (A, B) {
                    var $t, $t1;
                    if (A == null && B == null) {
                        return new (System.Collections.Generic.List$1(T))();
                    }
                    if (A == null) {
                        return B;
                    }
                    if (B == null) {
                        return A;
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._set;
                    inB.clear();

                    $t = Bridge.getEnumerator(B);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            inB.add(t);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var union = new (System.Collections.Generic.List$1(T))(B);
                    $t1 = Bridge.getEnumerator(A);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            if (!inB.contains(t1)) {
                                union.add(t1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return union;
                },
                Union: function (A, b) {
                    var union = new (System.Collections.Generic.List$1(T))(A);
                    if (!union.contains(b)) {
                        union.add(b);
                    }

                    return union;
                },
                MultiSetIntersection: function (A, B) {
                    var $t, $t1;
                    if (A == null || B == null) {
                        return new (System.Collections.Generic.List$1(T))();
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._multiSet;
                    inB.clear();

                    $t = Bridge.getEnumerator(B, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            var count = { };
                            inB.tryGetValue(t, count);

                            inB.set(t, (count.v + 1) | 0);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var intersection = new (System.Collections.Generic.List$1(T))(inB.count);
                    $t1 = Bridge.getEnumerator(A, T);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            var count1 = { };
                            inB.tryGetValue(t1, count1);

                            if (count1.v > 0) {
                                intersection.add(t1);
                                inB.set(t1, (count1.v - 1) | 0);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return intersection;
                },
                MultiSetIntersectionCount: function (A, B) {
                    var $t, $t1;
                    if (A == null || B == null) {
                        return 0;
                    }

                    var inB = Algorithms.Utility.ListUtility.ListUtilityGeneric$1(T)._multiSet;
                    inB.clear();

                    $t = Bridge.getEnumerator(B, T);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            var count = { };
                            inB.tryGetValue(t, count);

                            inB.set(t, (count.v + 1) | 0);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    var total = 0;
                    $t1 = Bridge.getEnumerator(A, T);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            var count1 = { };
                            inB.tryGetValue(t1, count1);

                            if (count1.v > 0) {
                                total = (total + 1) | 0;
                                inB.set(t1, (count1.v - 1) | 0);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return total;
                }
            }
        }
    }; });

    Bridge.define("Algorithms.Utility.PartialOrder", {
        statics: {
            methods: {
                Embeds: function (T, A, B, order) {
                    var $t;
                    if (A.Count > B.Count) {
                        return false;
                    }

                    var n = (A.Count + B.Count) | 0;
                    var adjacencies = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))(A.Count);

                    $t = Bridge.getEnumerator(A);
                    try {
                        while ($t.moveNext()) {
                            var a = $t.Current;
                            var neighbors = new (System.Collections.Generic.List$1(System.Int32))();
                            for (var i = 0; i < B.Count; i = (i + 1) | 0) {
                                var result = order(a, B.getItem(i));
                                if (result.AtMost) {
                                    neighbors.add(i);
                                }
                            }

                            adjacencies.add(neighbors);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return Algorithms.Utility.Flows.BipartiteMaximumMatching(n, adjacencies) === A.Count;
                }
            }
        }
    });

    Bridge.define("Algorithms.Utility.PartialOrderResult", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Algorithms.Utility.PartialOrderResult(); }
            }
        },
        fields: {
            AtMost: false,
            AtLeast: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7175930089, this.AtMost, this.AtLeast]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Algorithms.Utility.PartialOrderResult)) {
                    return false;
                }
                return Bridge.equals(this.AtMost, o.AtMost) && Bridge.equals(this.AtLeast, o.AtLeast);
            },
            $clone: function (to) {
                var s = to || new Algorithms.Utility.PartialOrderResult();
                s.AtMost = this.AtMost;
                s.AtLeast = this.AtLeast;
                return s;
            }
        }
    });

    Bridge.define("Algorithms.Utility.Permutation", {
        statics: {
            methods: {
                EnumerateAll: function (n) {
                    return new (Bridge.GeneratorEnumerable$1(Algorithms.Utility.Permutation))(Bridge.fn.bind(this, function (n) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            count,
                            i,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.Utility.Permutation))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            count = Algorithms.Counting.Factorial(n);

                                                i = System.Int64(0);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ( i.lt(count) ) {
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 5;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = new Algorithms.Utility.Permutation.ctor(new Algorithms.Utility.Factoradic.$ctor1(i, n));
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            i = i.inc();
                                            $step = 1;
                                            continue;
                                        }
                                        case 5: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                op_Multiply: function (p1, p2) {
                    if (Algorithms.Utility.Permutation.op_Equality(p1, null) || Algorithms.Utility.Permutation.op_Equality(p2, null)) {
                        return null;
                    }

                    if (p1.N !== p2.N) {
                        throw new System.Exception("You tried to multiply permutations of different sets.");
                    }

                    var sequence = new (System.Collections.Generic.List$1(System.Int32))(p2.N);

                    for (var i = 0; i < p2.N; i = (i + 1) | 0) {
                        sequence.add(p1.getItem(p2.getItem(i)));
                    }

                    return new Algorithms.Utility.Permutation.$ctor1(sequence);
                },
                op_Equality: function (p1, p2) {
                    if (p1 == null && p2 == null) {
                        return true;
                    }
                    if (p1 == null || p2 == null) {
                        return false;
                    }

                    return p1.equals(p2);
                },
                op_Inequality: function (p1, p2) {
                    return !(Algorithms.Utility.Permutation.op_Equality(p1, p2));
                }
            }
        },
        props: {
            Sequence: null,
            N: 0
        },
        ctors: {
            ctor: function (f) {
                this.$initialize();
                var sequence = new (System.Collections.Generic.List$1(System.Int32))(f.Digits.Count);
                for (var i = 0; i < f.Digits.Count; i = (i + 1) | 0) {
                    sequence.add(i);
                }

                for (var i1 = 0; i1 < f.Digits.Count; i1 = (i1 + 1) | 0) {
                    var j = (f.Digits.getItem(((((f.Digits.Count - 1) | 0) - i1) | 0)) + i1) | 0;

                    sequence.insert(i1, sequence.getItem(j));
                    sequence.removeAt(((j + 1) | 0));
                }

                this.Sequence = sequence;
                this.N = this.Sequence.Count;
            },
            $ctor1: function (sequence) {
                this.$initialize();                var $t;

                this.Sequence = new (System.Collections.Generic.List$1(System.Int32))(sequence);
                this.N = this.Sequence.Count;

                var hash = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Boolean))();
                $t = Bridge.getEnumerator(sequence);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        if (hash.containsKey(i)) {
                            throw new System.Exception("The supplied sequence has duplicates.");
                        }

                        if (i < 0 || i > ((this.N - 1) | 0)) {
                            throw new System.Exception("The supplied sequence has elements that are out of range.");
                        }

                        hash.set(i, true);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
    },
    methods: {
        getItem: function (i) {
            return this.Sequence.getItem(i);
        },
        Apply: function (T, list) {
            if (list == null || list.Count !== this.N) {
                throw new System.Exception("The permutation cannot be applied to the given list.");
            }

            var permutedList = new (System.Collections.Generic.List$1(T))(this.N);

            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                permutedList.add(list.getItem(this.getItem(i)));
            }

            return permutedList;
        },
        Inverse: function () {
            var sequence = System.Array.init(this.N, 0, System.Int32);

            for (var i = 0; i < this.N; i = (i + 1) | 0) {
                sequence[System.Array.index(this.getItem(i), sequence)] = i;
            }

            return new Algorithms.Utility.Permutation.$ctor1(new (System.Collections.Generic.List$1(System.Int32))(sequence));
        },
        equals: function (obj) {
            if (obj == null) {
                return false;
            }

            return Bridge.referenceEquals(this.toString(), obj.toString());
        },
        toString: function () {
            return System.String.concat("(", Bridge.toArray(System.Linq.Enumerable.from(this.Sequence).select($asm.$.Algorithms.Utility.Permutation.f1)).join(" "), ")");
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.toString());
        }
    }
    });

    Bridge.ns("Algorithms.Utility.Permutation", $asm.$);

    Bridge.apply($asm.$.Algorithms.Utility.Permutation, {
        f1: function (i) {
            return ((i + 1) | 0);
        }
    });

    Bridge.define("Algorithms.Utility.SafeCollection$1", function (T) { return {
        inherits: [System.Collections.Generic.ICollection$1(T)],
        fields: {
            _count: 0,
            _first: null,
            _last: null
        },
        props: {
            Count: {
                get: function () {
                    return this._count;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "getEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._first = new (Algorithms.Utility.SafeCollection$1.Node(T))();
                this._last = this._first;
            }
        },
        methods: {
            add: function (item) {
                var $t;
                this._last.Next = ($t = new (Algorithms.Utility.SafeCollection$1.Node(T))(), $t.Item = item, $t);
                this._last = this._last.Next;
                this._count = (this._count + 1) | 0;
            },
            clear: function () {
                this._first.Next = null;
                this._last = this._first;
                this._count = 0;
            },
            contains: function (item) {
                return this.FindPreviousNode(item) != null;
            },
            copyTo: function (array, arrayIndex) {
                var node = this._first;
                while (true) {
                    var next = node.Next;
                    if (next == null) {
                        break;
                    }

                    array[System.Array.index(Bridge.identity(arrayIndex, (arrayIndex = (arrayIndex + 1) | 0)), array)] = next.Item;
                    node = next;
                }
            },
            remove: function (item) {
                var node = this.FindPreviousNode(item);
                if (node == null) {
                    return false;
                }

                var next = node.Next;
                if (next == null) {
                    return false;
                }

                node.Next = next.Next;
                this._count = (this._count - 1) | 0;
                return true;
            },
            getEnumerator: function () {
                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    node,
                    next,
                    $async_e;

                var $enumerator = new (Bridge.GeneratorEnumerator$1(T))(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    node = this._first;
                                        
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ( true ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                }
                                case 2: {
                                    next = node.Next;
                                        if (next == null) {
                                            $step = 4;
                                            continue;
                                        }

                                        $enumerator.current = next.Item;
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    node = next;

                                        $step = 1;
                                        continue;
                                }
                                case 4: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            },
            FindPreviousNode: function (item) {
                var node = this._first;
                while (true) {
                    var next = node.Next;
                    if (next == null) {
                        break;
                    }

                    if (System.Collections.Generic.EqualityComparer$1(T).def.equals2(next.Item, item)) {
                        return node;
                    }

                    node = next;
                }

                return null;
            }
        }
    }; });

    Bridge.define("Algorithms.Utility.SafeCollection$1.Node", function (T) { return {
        fields: {
            Item: Bridge.getDefaultValue(T),
            Next: null
        }
    }; });

    Bridge.define("Algorithms.Utility.SequenceGeneralizer$1", function (T) { return {
        fields: {
            _length: 0,
            _alphabet: null,
            _matchers: null,
            _generalizers: null,
            _vectorComparer: null
        },
        ctors: {
            init: function () {
                this._matchers = new (System.Collections.Generic.List$1(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T)))();
                this._vectorComparer = new (Algorithms.Utility.SequenceGeneralizer$1.VectorComparer(T))();
            },
            ctor: function (length, alphabet) {
                this.$initialize();                var $t;

                this._length = length;
                this._alphabet = alphabet;

                $t = Bridge.getEnumerator(alphabet);
                try {
                    while ($t.moveNext()) {
                        var t = $t.Current;
                        this.AddMatcher(t.toString(), (function ($me, t) {
                            return function (tt) {
                                return Bridge.equals(t, tt);
                            };
                        })(this, t));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.AddMatcher("*", $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f1);
        }
    },
    methods: {
        AddMatcher: function (name, match) {
            var $t;
            this._matchers.add(($t = new (Algorithms.Utility.SequenceGeneralizer$1.Matcher(T))(), $t.Name = name, $t.Match = match, $t));
        },
        Generalize: function (examples, nonExamples, mostGeneral) {
            var $t, $t1;
            if (mostGeneral === void 0) { mostGeneral = false; }
            this.BuildMatcherLattice();

            var possibles = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            $t = Bridge.getEnumerator(examples);
            try {
                while ($t.moveNext()) {
                    var example = $t.Current;
                    var asMatcherIndices = System.Linq.Enumerable.from(example).select(Bridge.fn.bind(this, function (t) {
                            return Algorithms.GenericExtensions.FirstIndex(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T), this._matchers, function (m) {
                                return Bridge.referenceEquals(m.Name, t.toString());
                            });
                        })).toList(System.Int32);
                    possibles.addRange(System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Int32, System.Linq.Enumerable.from(asMatcherIndices).select(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f2)))).select($asm.$.Algorithms.Utility.SequenceGeneralizer$1.f3));
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            possibles = System.Linq.Enumerable.from(possibles).distinct(this._vectorComparer).toList(System.Collections.Generic.List$1(System.Int32));

            $t1 = Bridge.getEnumerator(nonExamples);
            try {
                while ($t1.moveNext()) {
                    var nonExample = $t1.Current;
                    var asMatcherIndices1 = System.Linq.Enumerable.from(nonExample).select(Bridge.fn.bind(this, function (t) {
                            return Algorithms.GenericExtensions.FirstIndex(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T), this._matchers, function (m) {
                                return Bridge.referenceEquals(m.Name, t.toString());
                            });
                        })).toList(System.Int32);
                    possibles = System.Linq.Enumerable.from(possibles).except(System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Int32, System.Linq.Enumerable.from(asMatcherIndices1).select(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f2)))).select($asm.$.Algorithms.Utility.SequenceGeneralizer$1.f3), this._vectorComparer).toList(System.Collections.Generic.List$1(System.Int32));
                }
            } finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }
            var generalizations = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
            var remaining = System.Linq.Enumerable.from(examples).toList(System.Collections.Generic.List$1(T));
            while (remaining.Count > 0) {
                var ordered = { v : System.Linq.Enumerable.from(possibles).select(Bridge.fn.bind(this, function (pp) {
                        return new $asm.$AnonymousType$3(pp, System.Linq.Enumerable.from(remaining).count(Bridge.fn.bind(this, function (r) {
                                return this.IsMatch(r, pp);
                            })));
                    })).orderByDescending($asm.$.Algorithms.Utility.SequenceGeneralizer$1.f4).toList(System.Object) };
                var maxers = System.Linq.Enumerable.from(ordered.v).takeWhile((function ($me, ordered) {
                        return function (xx) {
                            return xx.Count === ordered.v.getItem(0).Count;
                        };
                    })(this, ordered)).orderByDescending(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f6));

                var best = { v : mostGeneral ? maxers.first().Vector : maxers.last().Vector };

                generalizations.add(best.v);
                Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), remaining, (function ($me, best) {
                    return Bridge.fn.bind($me, function (r) {
                        return this.IsMatch(r, best.v);
                    });
                })(this, best), $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f7);
            }

            return System.Linq.Enumerable.from(generalizations).select(Bridge.fn.bind(this, function (l) {
                    return System.Linq.Enumerable.from(l).select(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f8)).toList(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T));
                })).toList(System.Collections.Generic.List$1(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T)));
        },
        BuildMatcherLattice: function () {
            this._generalizers = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)))();
            for (var i = 0; i < this._matchers.Count; i = (i + 1) | 0) {
                this._generalizers.set(i, new (System.Collections.Generic.List$1(System.Int32))());
                var matches = System.Linq.Enumerable.from(this._alphabet).where(Bridge.fn.bind(this, function (a) {
                        return this._matchers.getItem(i).Match(a);
                    })).toList(T);

                for (var j = { v : 0 }; j.v < this._matchers.Count; j.v = (j.v + 1) | 0) {
                    if (Algorithms.Utility.ListUtility.SubsetEqual(T, matches, System.Linq.Enumerable.from(this._alphabet).where((function ($me, j) {
                            return Bridge.fn.bind($me, function (a) {
                                return this._matchers.getItem(j.v).Match(a);
                            });
                        })(this, j)).toList(T))) {
                        this._generalizers.get(i).add(j.v);
                    }
                }
            }
        },
        IsMatch: function (vector, m) {
            for (var i = 0; i < vector.Count; i = (i + 1) | 0) {
                if (!this._matchers.getItem(m.getItem(i)).Match(vector.getItem(i))) {
                    return false;
                }
            }

            return true;
        }
    }
    }; });

    Bridge.define("$AnonymousType$3", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (vector, count) {
                this.Vector = vector;
                this.Count = count;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$3)) {
                    return false;
                }
                return Bridge.equals(this.Vector, o.Vector) && Bridge.equals(this.Count, o.Count);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196188, this.Vector, this.Count]);
                return h;
            },
            toJSON: function () {
                return {
                    Vector : this.Vector,
                    Count : this.Count
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"Count","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":System.Int32,"fg":"Count"},"fn":"Count"},{"a":2,"n":"Vector","t":16,"rt":System.Collections.Generic.List$1(System.Int32),"g":{"a":2,"n":"get_Vector","t":8,"rt":System.Collections.Generic.List$1(System.Int32),"fg":"Vector"},"fn":"Vector"}]}; }
            }
        }
    });

    Bridge.ns("Algorithms.Utility.SequenceGeneralizer$1", $asm.$);

    Bridge.apply($asm.$.Algorithms.Utility.SequenceGeneralizer$1, {
        f1: function (tt) {
            return true;
        },
        f2: function (i) {
            return this._generalizers.get(i);
        },
        f3: function (v) {
            return System.Linq.Enumerable.from(v).toList(System.Int32);
        },
        f4: function (xx) {
            return xx.Count;
        },
        f5: function (total, x) {
            if (Bridge.referenceEquals(this._matchers.getItem(x).Name, "*")) {
                return Bridge.Int.mul(total, this._alphabet.Count);
            }
            if (System.String.startsWith(this._matchers.getItem(x).Name, "!")) {
                return Bridge.Int.mul(total, (((this._alphabet.Count - 1) | 0)));
            }

            return total;
        },
        f6: function (xx) {
            return System.Linq.Enumerable.from(xx.Vector).aggregate(Bridge.fn.bind(this, $asm.$.Algorithms.Utility.SequenceGeneralizer$1.f5));
        },
        f7: function (x) { },
        f8: function (i) {
            return this._matchers.getItem(i);
        }
    });

    Bridge.define("Algorithms.Utility.SequenceGeneralizer$1.Matcher", function (T) { return {
        fields: {
            Name: null,
            Match: null
        }
    }; });

    Bridge.define("Algorithms.Utility.SequenceGeneralizer$1.VectorComparer", function (T) { return {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Collections.Generic.List$1(System.Int32))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$System$Int32$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$System$Int32$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return System.Linq.Enumerable.from(x).sequenceEqual(y);
            },
            getHashCode2: function (l) {
                var $t;
                var hash = 17;
                $t = Bridge.getEnumerator(l);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        hash = (((hash * 23) | 0) + x) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return hash;
            }
        }
    }; });

    Bridge.define("Algorithms.WordGame.AccessibilityChecker", {
        fields: {
            _alphabet: null
        },
        ctors: {
            ctor: function (alphabet) {
                this.$initialize();
                this._alphabet = System.Linq.Enumerable.from(alphabet).toList(System.Char);
            }
        },
        methods: {
            IsAccessible: function (w, S) {
                var $t, $t1, $t2;
                $t = Bridge.getEnumerator(this._alphabet);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        var goodChoiceAlwaysExists = true;

                        var swappers = System.Linq.Enumerable.from(this._alphabet).except(System.Array.init([c], System.Char)).toList(System.Char);
                        $t1 = Bridge.getEnumerator(this.EnumeratePartitions(w, swappers), System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)));
                        try {
                            while ($t1.moveNext()) {
                                var partition = $t1.Current;
                                var goodChoiceExists = false;
                                $t2 = Bridge.getEnumerator(Algorithms.Utility.ListUtility.GenerateSublists(System.Int32, System.Linq.Enumerable.range(0, partition.Count).toList(System.Int32)));
                                try {
                                    while ($t2.moveNext()) {
                                        var choice = $t2.Current;
                                        if (choice.Count <= 0) {
                                            continue;
                                        }

                                        var ww = this.MakeMove(w, partition, choice, swappers);
                                        if (S.contains(ww)) {
                                            goodChoiceExists = true;
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$dispose();
                                    }
                                }
                                if (!goodChoiceExists) {
                                    goodChoiceAlwaysExists = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        if (goodChoiceAlwaysExists) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            EnumeratePartitions: function (w, swappers) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function (w, swappers) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        chars,
                        indices,
                        indexPartitions,
                        $t,
                        indexPartition,
                        partition,
                        $t1,
                        indexPart,
                        part,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        chars = System.String.toCharArray(w, 0, w.length);
                                            indices = System.Linq.Enumerable.from(Algorithms.GenericExtensions.IndicesWhere(System.Char, chars, function (c) {
                                                    return swappers.contains(c);
                                                })).toList(System.Int32);

                                            indexPartitions = Algorithms.FixerBreaker.Chronicle.BranchGenerator.GetPartitions(indices.Count);
                                            $t = Bridge.getEnumerator(indexPartitions);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                indexPartition = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        partition = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))(indexPartition.Count);
                                            $t1 = Bridge.getEnumerator(indexPartition);
                                            try {
                                                while ($t1.moveNext()) {
                                                    indexPart = $t1.Current;
                                                    part = System.Linq.Enumerable.from(indexPart).select(function (i) {
                                                            return indices.getItem(i);
                                                        }).toList(System.Int32);
                                                    partition.add(part);
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$dispose();
                                                }
                                            }
                                            $enumerator.current = partition;
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            MakeMove: function (w, partition, choice, swappers) {
                var $t;
                var chars = System.String.toCharArray(w, 0, w.length);
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(choice).selectMany(function (i) {
                        return partition.getItem(i);
                    }));
                try {
                    while ($t.moveNext()) {
                        var j = $t.Current;
                        chars[System.Array.index(j, chars)] = swappers.getItem(((1 - swappers.indexOf(chars[System.Array.index(j, chars)])) | 0));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return String.fromCharCode.apply(null, chars);
            }
        }
    });

    Bridge.define("Algorithms.WordGame.Boxification", {
        statics: {
            methods: {
                Split: function (T, allPoints) {
                    var chunks = new (System.Collections.Generic.List$1(System.Object))();

                    var points = System.Linq.Enumerable.from(allPoints).toList(System.Collections.Generic.List$1(T));
                    var n = allPoints.getItem(0).Count;

                    while (points.Count > 0) {
                        var bestT = 1;
                        var bestSplit = { v : 1 };

                        for (var split = { v : 1 }; split.v < ((n - 1) | 0); split.v = (split.v + 1) | 0) {
                            var left = { v : System.Linq.Enumerable.from(points).select((function ($me, split) {
                                    return function (p) {
                                        return System.Linq.Enumerable.from(p).take(split.v).toList(T);
                                    };
                                })(this, split)).toList(System.Collections.Generic.List$1(T)) };
                            var right = { v : System.Linq.Enumerable.from(points).select((function ($me, split) {
                                    return function (p) {
                                        return System.Linq.Enumerable.from(p).skip(split.v).toList(T);
                                    };
                                })(this, split)).toList(System.Collections.Generic.List$1(T)) };

                            var t = (Algorithms.WordGame.Boxification.Binary(1, ((points.Count - 1) | 0), (function ($me, left, right) {
                                return function (i) {
                                    var lefts = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), System.Linq.Enumerable.from(left.v).take(i), function (l1, l2) {
                                            return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                                        })).toList(System.Collections.Generic.List$1(T));
                                    var rights = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), System.Linq.Enumerable.from(right.v).take(i), function (l1, l2) {
                                            return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                                        })).toList(System.Collections.Generic.List$1(T));

                                    var span = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$2(System.Collections.Generic.List$1(T), lefts, rights)).select(function (tup) {
                                            return System.Linq.Enumerable.from(tup.item1).concat(tup.item2).toList(T);
                                        }).toList(System.Collections.Generic.List$1(T));
                                    var allExist = System.Linq.Enumerable.from(span).all(function (p) {
                                            return System.Linq.Enumerable.from(points).any(function (pp) {
                                                    return System.Linq.Enumerable.from(pp).sequenceEqual(p);
                                                });
                                        });

                                    return allExist ? 1 : -1;
                                };
                            })(this, left, right)) - 1) | 0;

                            if (t >= bestT) {
                                if (t > bestT || Math.abs(((((Bridge.Int.div(n, 2)) | 0) - split.v) | 0)) < Math.abs(((((Bridge.Int.div(n, 2)) | 0) - bestSplit.v) | 0))) {
                                    bestT = t;
                                    bestSplit.v = split.v;
                                }
                            }
                        }

                        var l = System.Linq.Enumerable.from(points).select((function ($me, bestSplit) {
                                return function (p) {
                                    return System.Linq.Enumerable.from(p).take(bestSplit.v).toList(T);
                                };
                            })(this, bestSplit)).toList(System.Collections.Generic.List$1(T));
                        var r = System.Linq.Enumerable.from(points).select((function ($me, bestSplit) {
                                return function (p) {
                                    return System.Linq.Enumerable.from(p).skip(bestSplit.v).toList(T);
                                };
                            })(this, bestSplit)).toList(System.Collections.Generic.List$1(T));
                        var ls = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), System.Linq.Enumerable.from(l).take(bestT), function (l1, l2) {
                                return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                            })).toList(System.Collections.Generic.List$1(T));
                        var rs = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), System.Linq.Enumerable.from(r).take(bestT), function (l1, l2) {
                                return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                            })).toList(System.Collections.Generic.List$1(T));
                        var s = { v : System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$2(System.Collections.Generic.List$1(T), ls, rs)).select(function (tup) {
                                return System.Linq.Enumerable.from(tup.item1).concat(tup.item2).toList(T);
                            }).toList(System.Collections.Generic.List$1(T)) };

                        chunks.add({ item1: ls, item2: rs });
                        Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), points, (function ($me, s) {
                            return function (p) {
                                return System.Linq.Enumerable.from(s.v).any(function (pp) {
                                        return System.Linq.Enumerable.from(pp).sequenceEqual(p);
                                    });
                            };
                        })(this, s), $asm.$.Algorithms.WordGame.Boxification.f1);
                    }

                    return chunks;
                },
                SplitMultiway: function (T, allPoints) {
                    var $t;
                    var chunks = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))))();

                    var points = System.Linq.Enumerable.from(allPoints).toList(System.Collections.Generic.List$1(T));
                    var n = allPoints.getItem(0).Count;

                    while (points.Count > 0) {
                        var bestT = 1;
                        var bestSplit = { v : new (System.Collections.Generic.List$1(System.Int32))() };

                        $t = Bridge.getEnumerator(System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.EnumerateSublists(System.Int32, System.Linq.Enumerable.range(0, n).toList(System.Int32))).select($asm.$.Algorithms.WordGame.Boxification.f3));
                        try {
                            while ($t.moveNext()) {
                                var split = $t.Current;
                                if (Algorithms.WordGame.Boxification.ExtractRanges(T, split, points.getItem(0)).Count <= 1) {
                                    continue;
                                }

                                var t = (Algorithms.WordGame.Boxification.Binary(1, ((points.Count - 1) | 0), function (i) {
                                    var ranges = System.Linq.Enumerable.from(points).take(i).select(function (p) {
                                        return Algorithms.WordGame.Boxification.ExtractRanges(T, split, p);
                                    }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                                    var rangeValues = System.Linq.Enumerable.from(ranges).aggregate(System.Linq.Enumerable.range(0, ranges.getItem(0).Count).select(function (__) {
                                            return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                                        }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T))), function (union, next) {
                                            return System.Linq.Enumerable.from(union).zip(next, function (A, B) {
                                                    return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), Algorithms.Utility.LinqExtensions.Concat(System.Collections.Generic.List$1(T), A, B), function (l1, l2) {
                                                            return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                                                        })).toList(System.Collections.Generic.List$1(T));
                                                }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                                        });

                                    var cp = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Collections.Generic.List$1(T), rangeValues)).select(function (ll) {
                                            return System.Linq.Enumerable.from(ll).toList(System.Collections.Generic.List$1(T));
                                        }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                                    var span = System.Linq.Enumerable.from(cp).select(function (ll) {
                                            return System.Linq.Enumerable.from(ll).selectMany($asm.$.Algorithms.WordGame.Boxification.f4).toList(T);
                                        }).toList(System.Collections.Generic.List$1(T));
                                    var allExist = System.Linq.Enumerable.from(span).all(function (p) {
                                            return System.Linq.Enumerable.from(points).any(function (pp) {
                                                    return System.Linq.Enumerable.from(pp).sequenceEqual(p);
                                                });
                                        });

                                    return allExist ? 1 : -1;
                                }) - 1) | 0;

                                if (t > bestT) {
                                    bestT = t;
                                    bestSplit.v = split;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        var rr = System.Linq.Enumerable.from(points).take(bestT).select((function ($me, bestSplit) {
                            return function (p) {
                                return Algorithms.WordGame.Boxification.ExtractRanges(T, bestSplit.v, p);
                            };
                        })(this, bestSplit)).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                        var rrv = System.Linq.Enumerable.from(rr).aggregate(System.Linq.Enumerable.range(0, rr.getItem(0).Count).select(function (__) {
                                return new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();
                            }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T))), function (union, next) {
                                return System.Linq.Enumerable.from(union).zip(next, function (A, B) {
                                        return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.Distinct(System.Collections.Generic.List$1(T), Algorithms.Utility.LinqExtensions.Concat(System.Collections.Generic.List$1(T), A, B), function (l1, l2) {
                                                return System.Linq.Enumerable.from(l1).sequenceEqual(l2);
                                            })).toList(System.Collections.Generic.List$1(T));
                                    }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                            });

                        var s = { v : System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Collections.Generic.List$1(T), rrv)).select(function (ll) {
                                return System.Linq.Enumerable.from(ll).selectMany($asm.$.Algorithms.WordGame.Boxification.f4).toList(T);
                            }).toList(System.Collections.Generic.List$1(T)) };

                        chunks.add(rrv);
                        Algorithms.GenericExtensions.RemoveAll(System.Collections.Generic.List$1(T), points, (function ($me, s) {
                            return function (p) {
                                return System.Linq.Enumerable.from(s.v).any(function (pp) {
                                        return System.Linq.Enumerable.from(pp).sequenceEqual(p);
                                    });
                            };
                        })(this, s), $asm.$.Algorithms.WordGame.Boxification.f1);
                    }

                    return chunks;
                },
                ExtractRanges: function (T, stops, l) {
                    var $t;
                    var ranges = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)))();

                    var left = 0;
                    $t = Bridge.getEnumerator(stops);
                    try {
                        while ($t.moveNext()) {
                            var stop = $t.Current;
                            ranges.add(l.getRange(left, ((((stop - left) | 0) + 1) | 0)));
                            left = (stop + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    if (left < l.Count) {
                        ranges.add(l.getRange(left, ((l.Count - left) | 0)));
                    }

                    return ranges;
                },
                Boxify: function (T, points) {
                    var boxes = System.Linq.Enumerable.from(points).select(function (p) {
                            return Algorithms.GenericExtensions.EnList(System.Collections.Generic.List$1(T), p);
                        }).toList(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)));
                    while (true) {
                        var boxContainers = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$2(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T)), boxes, boxes)).where(function (pair) {
                                return !System.Linq.Enumerable.from(pair.item1).sequenceEqual(pair.item2);
                            }).select(function (pair) {
                            return new $asm.$AnonymousType$4(pair, Algorithms.WordGame.Boxification.BoxContainer(T, System.Linq.Enumerable.from(pair.item1).concat(pair.item2).toList(System.Collections.Generic.List$1(T))));
                        });

                        var grown = boxContainers.firstOrDefault(function (bc) {
                                return Algorithms.WordGame.Boxification.ContainsBoxContainer(T, points, bc.BoxedUnion);
                            }, null);
                        if (grown == null) {
                            break;
                        }

                        var count = boxes.Count;
                        boxes.remove(grown.Pair.item1);
                        boxes.remove(grown.Pair.item2);
                        boxes.add(grown.BoxedUnion);

                        if (boxes.Count === count) {
                            break;
                        }
                    }

                    return boxes;
                },
                PrefixBoxify: function (T, points) {
                    var allPoints = System.Linq.Enumerable.from(points).toList(System.Collections.Generic.List$1(T));
                    var boxes = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(T))))();

                    while (true) {
                        var t = Algorithms.WordGame.Boxification.Binary(1, ((points.Count - 1) | 0), function (i) {
                            return Algorithms.WordGame.Boxification.ContainsBox(T, allPoints, System.Linq.Enumerable.from(points).take(i).toList(System.Collections.Generic.List$1(T))) ? 1 : -1;
                        });

                        boxes.add(Algorithms.WordGame.Boxification.BoxContainer(T, System.Linq.Enumerable.from(points).take(t).toList(System.Collections.Generic.List$1(T))));
                        points = System.Linq.Enumerable.from(points).skip(t).toList(System.Collections.Generic.List$1(T));
                        if (points.Count <= 0) {
                            break;
                        }
                    }

                    return boxes;
                },
                ContainsBox: function (T, allPoints, points) {
                    var box = Algorithms.WordGame.Boxification.BoxContainer(T, points);
                    return Algorithms.WordGame.Boxification.ContainsBoxContainer(T, allPoints, box);
                },
                ContainsBoxContainer: function (T, allPoints, boxContainer) {
                    return System.Linq.Enumerable.from(boxContainer).all(function (p) {
                            return System.Linq.Enumerable.from(allPoints).any(function (pp) {
                                    return System.Linq.Enumerable.from(pp).sequenceEqual(p);
                                });
                        });
                },
                BoxContainer: function (T, points) {
                    return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(T, System.Linq.Enumerable.range(0, points.getItem(0).Count).select(function (i) {
                            return System.Linq.Enumerable.from(points).select(function (p) {
                                    return p.getItem(i);
                                }).distinct().toList(T);
                        }))).select(function (e) {
                            return System.Linq.Enumerable.from(e).toList(T);
                        }).toList(System.Collections.Generic.List$1(T));
                },
                IsBox: function (T, points) {
                    return points.Count === Algorithms.WordGame.Boxification.BoxContainer(T, points).Count;
                },
                ToBoxString: function (T, points) {
                    return Bridge.toArray(System.Linq.Enumerable.range(0, points.getItem(0).Count).select(function (i) {
                            return System.String.concat("{", Bridge.toArray(System.Linq.Enumerable.from(points).select(function (p) {
                                        return p.getItem(i);
                                    }).distinct()).join(","), "}");
                        })).join(" * ");
                },
                ToMultiChunkString: function (T, multiChunk) {
                    return Bridge.toArray(System.Linq.Enumerable.from(multiChunk).select(function (chunk) {
                                return Algorithms.WordGame.Boxification.ToListOfListsString(T, chunk);
                            })).join(" * ");
                },
                ToChunkString: function (T, chunk) {
                    return System.String.concat(Algorithms.WordGame.Boxification.ToListOfListsString(T, chunk.item1), " * ", Algorithms.WordGame.Boxification.ToListOfListsString(T, chunk.item2));
                },
                ToListOfListsString: function (T, l) {
                    return System.String.concat("{", Bridge.toArray(System.Linq.Enumerable.from(l).select(function (sl) {
                                return System.String.concat("{", Bridge.toArray(sl).join(","), "}");
                            })).join(","), "}");
                },
                Binary: function (first, last, targetDirection) {
                    var left = (first - 1) | 0;
                    var right = (last + 1) | 0;

                    while (((right - left) | 0) >= 2) {
                        var middle = (left + ((Bridge.Int.div((((right - left) | 0)), 2)) | 0)) | 0;
                        var direction = targetDirection(middle);

                        if (direction === 0) {
                            return middle;
                        } else {
                            if (direction < 0) {
                                right = middle;
                            } else {
                                left = middle;
                            }
                        }
                    }

                    if (left < first) {
                        return ((first - 1) | 0);
                    }
                    if (right > last) {
                        return ((last + 1) | 0);
                    }

                    return left;
                }
            }
        }
    });

    Bridge.define("$AnonymousType$4", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (pair, boxedUnion) {
                this.Pair = pair;
                this.BoxedUnion = boxedUnion;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$4)) {
                    return false;
                }
                return Bridge.equals(this.Pair, o.Pair) && Bridge.equals(this.BoxedUnion, o.BoxedUnion);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196189, this.Pair, this.BoxedUnion]);
                return h;
            },
            toJSON: function () {
                return {
                    Pair : this.Pair,
                    BoxedUnion : this.BoxedUnion
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"BoxedUnion","t":16,"rt":System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object)),"g":{"a":2,"n":"get_BoxedUnion","t":8,"rt":System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object)),"fg":"BoxedUnion"},"fn":"BoxedUnion"},{"a":2,"n":"Pair","t":16,"rt":System.Object,"g":{"a":2,"n":"get_Pair","t":8,"rt":System.Object,"fg":"Pair"},"fn":"Pair"}]}; }
            }
        }
    });

    Bridge.ns("Algorithms.WordGame.Boxification", $asm.$);

    Bridge.apply($asm.$.Algorithms.WordGame.Boxification, {
        f1: function (x) { },
        f2: function (x) {
            return x;
        },
        f3: function (l) {
            return System.Linq.Enumerable.from(l).orderBy($asm.$.Algorithms.WordGame.Boxification.f2).toList(System.Int32);
        },
        f4: function (pp) {
            return pp;
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastAccessibilityChecker", {
        fields: {
            _fixerResponses: null,
            _fixerResponseCount: 0,
            _breakerChoicesCache: null
        },
        ctors: {
            init: function () {
                this._breakerChoicesCache = new (System.Collections.Generic.Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))))();
            },
            ctor: function (n) {
                this.$initialize();
                this._fixerResponses = System.Array.init(1 << ((((n + 1) | 0)) >> 1), System.UInt64(0), System.UInt64);
            }
        },
        methods: {
            IsAccessible: function (board, wonBoards) {
                var $t;
                for (var i = 0; i < board._length; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < board._length; j = (j + 1) | 0) {
                        var x = board._trace[System.Array.index(i, board._trace)];
                        var y = board._trace[System.Array.index(j, board._trace)];
                        var swappable = x.xor(y);

                        var winningSwapAlwaysExists = true;
                        $t = Bridge.getEnumerator(this.GetBreakerChoices(swappable));
                        try {
                            while ($t.moveNext()) {
                                var breakerChoice = $t.Current;
                                var winningSwapExists = false;

                                this.GetFixerResponses(breakerChoice);
                                for (var k = 1; k < this._fixerResponseCount; k = (k + 1) | 0) {
                                    var childBoard = new Algorithms.WordGame.Optimized.FastWord.$ctor1(board._trace, i, j, this._fixerResponses[System.Array.index(k, this._fixerResponses)], board._stackCount);
                                    if (wonBoards.contains(childBoard)) {
                                        winningSwapExists = true;
                                        break;
                                    }
                                }

                                if (!winningSwapExists) {
                                    winningSwapAlwaysExists = false;
                                    break;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            return true;
                        }
                    }
                }

                return false;
            },
            GetFixerResponses: function (possibleMoves) {
                this._fixerResponseCount = 1 << possibleMoves.Count;

                var subset = 1;
                while (subset < this._fixerResponseCount) {
                    var response = System.UInt64(0);
                    var x = { v : subset };

                    while (x.v !== 0) {
                        response = response.or(possibleMoves.getItem(Algorithms.Int32Usage.GetAndClearLeastSignificantBit(x)));
                    }

                    this._fixerResponses[System.Array.index(subset, this._fixerResponses)] = response;
                    subset = (subset + 1) | 0;
                }
            },
            GetBreakerChoices: function (swappable) {
                var $t, $t1, $t2;
                var choices = { };
                if (!this._breakerChoicesCache.tryGetValue(swappable, choices)) {
                    var bits = Algorithms.Int64Usage.GetBits$1(swappable);
                    var partitions = Algorithms.FixerBreaker.Chronicle.BranchGenerator.GetPartitions(bits.Count);
                    choices.v = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64)))(partitions.Count);

                    $t = Bridge.getEnumerator(partitions);
                    try {
                        while ($t.moveNext()) {
                            var partition = $t.Current;
                            var choice = new (System.Collections.Generic.List$1(System.UInt64))(partition.Count);
                            choices.v.add(choice);

                            $t1 = Bridge.getEnumerator(partition);
                            try {
                                while ($t1.moveNext()) {
                                    var part = $t1.Current;
                                    var x = System.UInt64(0);
                                    $t2 = Bridge.getEnumerator(part);
                                    try {
                                        while ($t2.moveNext()) {
                                            var i = $t2.Current;
                                            x = x.or(bits.getItem(i));
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }
                                    choice.add(x);
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    this._breakerChoicesCache.set(swappable, choices.v);
                }

                return choices.v;
            }
        }
    });

    Bridge.define("Algorithms.WordGame.TarpitEnumerator", {
        statics: {
            fields: {
                Alphabet: null
            },
            ctors: {
                init: function () {
                    this.Alphabet = $asm.$.Algorithms.WordGame.TarpitEnumerator.f1(new (System.Collections.Generic.List$1(System.Char))());
                }
            },
            methods: {
                IsPermutationClosed: function (S) {
                    return System.Linq.Enumerable.from(Algorithms.WordGame.TarpitEnumerator.EnumerateAlphabetPermutations(S)).select($asm.$.Algorithms.WordGame.TarpitEnumerator.f3).distinct().count() === 1;
                },
                RemovePermutationRedundancies: function (S) {
                    var hash = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    var permutedLists = System.Linq.Enumerable.from(Algorithms.WordGame.TarpitEnumerator.EnumerateAlphabetPermutations(S)).toList(System.Collections.Generic.List$1(System.String));
                    for (var i = 0; i < S.Count; i = (i + 1) | 0) {
                        hash.add(System.Linq.Enumerable.from(permutedLists).select(function (l) {
                                return l.getItem(i);
                            }).orderBy($asm.$.Algorithms.WordGame.TarpitEnumerator.f2).first());
                    }

                    return System.Linq.Enumerable.from(hash).toList(System.String);
                },
                ReorderAlphabetByOccurenceRate: function (S) {
                    return System.Linq.Enumerable.from(S).select($asm.$.Algorithms.WordGame.TarpitEnumerator.f5).toList(System.String);
                },
                EnumerateAlphabetPermutations: function (S) {
                    return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.String)))(Bridge.fn.bind(this, function (S) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            uppered,
                            $t,
                            permutation,
                            p,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.String)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            uppered = System.Linq.Enumerable.from(S).select($asm.$.Algorithms.WordGame.TarpitEnumerator.f6).toList(System.String);
                                                $t = Bridge.getEnumerator(Algorithms.Utility.Permutation.EnumerateAll(3), Algorithms.Utility.Permutation);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    permutation = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            p = { v : permutation.Apply(System.Char, Algorithms.WordGame.TarpitEnumerator.Alphabet) };
                                                $enumerator.current = System.Linq.Enumerable.from(uppered).select((function ($me, p) {
                                                        return function (s) {
                                                            return System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(s, String.fromCharCode(88), String.fromCharCode(p.v.getItem(0))), String.fromCharCode(89), String.fromCharCode(p.v.getItem(1))), String.fromCharCode(90), String.fromCharCode(p.v.getItem(2)));
                                                        };
                                                    })(this, p)).toList(System.String);
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        },
        methods: {
            GenerateMinimalTarpits: function (foundTarpit) { }
        }
    });

    Bridge.define("$AnonymousType$5", $asm, {
        $kind: "anonymous",
        ctors: {
            ctor: function (c, rate) {
                this.C = c;
                this.Rate = rate;
            }
        },
        methods: {
            equals: function (o) {
                if (!Bridge.is(o, $asm.$AnonymousType$5)) {
                    return false;
                }
                return Bridge.equals(this.C, o.C) && Bridge.equals(this.Rate, o.Rate);
            },
            getHashCode: function () {
                var h = Bridge.addHash([7550196190, this.C, this.Rate]);
                return h;
            },
            toJSON: function () {
                return {
                    C : this.C,
                    Rate : this.Rate
                };
            }
        },
        statics : {
            methods: {
                $metadata : function () { return {"m":[{"a":2,"n":"C","t":16,"rt":System.Char,"g":{"a":2,"n":"get_C","t":8,"rt":System.Char,"fg":"C"},"fn":"C"},{"a":2,"n":"Rate","t":16,"rt":System.Int32,"g":{"a":2,"n":"get_Rate","t":8,"rt":System.Int32,"fg":"Rate"},"fn":"Rate"}]}; }
            }
        }
    });

    Bridge.ns("Algorithms.WordGame.TarpitEnumerator", $asm.$);

    Bridge.apply($asm.$.Algorithms.WordGame.TarpitEnumerator, {
        f1: function (_o23) {
            _o23.add(120);
            _o23.add(121);
            _o23.add(122);
            return _o23;
        },
        f2: function (s) {
            return s;
        },
        f3: function (T) {
            return Bridge.toArray(System.Linq.Enumerable.from(T).orderBy($asm.$.Algorithms.WordGame.TarpitEnumerator.f2)).join(",");
        },
        f4: function (d) {
            return d.Rate;
        },
        f5: function (s) {
            var chars = System.String.toCharArray(s, 0, s.length);
            var p = System.Linq.Enumerable.from(Algorithms.WordGame.TarpitEnumerator.Alphabet).select(function (c) {
                    return new $asm.$AnonymousType$5(c, System.Linq.Enumerable.from(chars).count(function (cc) {
                            return cc === c;
                        }));
                }).orderByDescending($asm.$.Algorithms.WordGame.TarpitEnumerator.f4).toList(System.Object);

            return System.String.replaceAll(System.String.replaceAll(System.String.replaceAll(s, String.fromCharCode(p.getItem(0).C), String.fromCharCode(88)), String.fromCharCode(p.getItem(1).C), String.fromCharCode(89)), String.fromCharCode(p.getItem(2).C), String.fromCharCode(90)).toLowerCase();

        },
        f6: function (s) {
            return s.toUpperCase();
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastWord", {
        fields: {
            _trace: null,
            _length: 0,
            _stackCount: 0,
            _hashCode: 0
        },
        ctors: {
            ctor: function (trace, stackCount) {
                this.$initialize();
                this._trace = trace;
                this._length = this._trace.length;
                this._stackCount = stackCount;
                this._hashCode = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.Hash(this._trace, this._length);
            },
            $ctor1: function (trace, i, j, swap, stackCount) {
                this.$initialize();
                this._trace = System.Array.init(trace.length, System.UInt64(0), System.UInt64);
                this._length = 0;
                for (var k = 0; k < trace.length; k = (k + 1) | 0) {
                    var v = System.UInt64(0);
                    if (k === i || k === j) {
                        v = trace[System.Array.index(k, trace)].xor(swap);
                    } else {
                        v = trace[System.Array.index(k, trace)];
                    }

                    var q = this._length;
                    while (q > 0 && this._trace[System.Array.index(((q - 1) | 0), this._trace)].gt(v)) {
                        q = (q - 1) | 0;
                    }

                    if (q < this._length) {
                        System.Array.copy(this._trace, q << 3, this._trace, (((q + 1) | 0)) << 3, (((this._length - q) | 0)) << 3);
                    }
                    this._trace[System.Array.index(q, this._trace)] = v;

                    this._length = (this._length + 1) | 0;
                }

                this._stackCount = stackCount;
                this._hashCode = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Hashing.Hash(this._trace, this._length);
            }
        },
        methods: {
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, Algorithms.WordGame.Optimized.FastWord));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._trace[System.Array.index(i, this._trace)].ne(other._trace[System.Array.index(i, other._trace)])) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            }
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastWordGenerator", {
        methods: {
            GenerateWords: function (length) {
                var words = System.Linq.Enumerable.from(Algorithms.WordGame.Optimized.FastWordGenerator.TheEnumerationMachine.Enumerate(System.Linq.Enumerable.repeat(1, length), 3)).select(function (trace) {
                        return new Algorithms.WordGame.Optimized.FastWord.ctor(trace, length);
                    }).toList(Algorithms.WordGame.Optimized.FastWord);
                return words;
            }
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastWordGenerator.TheEnumerationMachine", {
        statics: {
            methods: {
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_ulong.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, System.UInt64(0), System.UInt64);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt64));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_ulong.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (c.or(BitLevelGeneration.BitVectors_ulong.Zeroes(sizeVector))).not();
                    return Algorithms.WordGame.Optimized.FastWordGenerator.TheEnumerationMachine.Enumerate$1(sizeVector, assignment, r, 0, System.UInt64(0), c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.UInt64)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.UInt64)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = care.and(last.not());
                                                q = care.not().and(dontCare.not()).and(last);

                                                if (g.gt(q)) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = Algorithms.Int64Usage.RightFillToMSB(g);
                                                x = (care.and(f)).or((last.and(f.not())));
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q.gt(g)) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = Algorithms.Int64Usage.RightFillToMSB(q);
                                                t = f1.not().and(last);
                                                y = dontCare.and(f1.not()).and(t.not());
                                                if (y.equals(System.UInt64(0))) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = dontCare.and(t).and((y.or((y.sub(System.UInt64(1))))));

                                                x = (care.and((f1.shru(1)))).or((t.and(y2.not()))).or((y.and((System.UInt64(0).sub(y)))));
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = care.or(dontCare);
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, System.UInt64(0), System.UInt64);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x.equals(end)) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_ulong.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_ulong.Zeroes(sizes);

                                                if ((c.and(z)).equals(System.UInt64(0))) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = (c.or(z)).not();
                                                $t = Bridge.getEnumerator(Algorithms.WordGame.Optimized.FastWordGenerator.TheEnumerationMachine.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.UInt64));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_ulong.Increment(sizes, x);

                                                if (x.equals(end)) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Algorithms.WordGame.WordEnumerator", {
        fields: {
            _alphabet: null
        },
        ctors: {
            ctor: function (alphabet) {
                if (alphabet === void 0) { alphabet = []; }

                Algorithms.WordGame.WordEnumerator.$ctor1.call(this, Bridge.cast(alphabet, System.Collections.Generic.IEnumerable$1(System.Char)));
            },
            $ctor1: function (alphabet) {
                this.$initialize();
                this._alphabet = System.Linq.Enumerable.from(alphabet).toList(System.Char);
            }
        },
        methods: {
            EnumerateWords: function (length) {
                return System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Char, System.Linq.Enumerable.repeat(this._alphabet, length))).select($asm.$.Algorithms.WordGame.WordEnumerator.f1);
            }
        }
    });

    Bridge.ns("Algorithms.WordGame.WordEnumerator", $asm.$);

    Bridge.apply($asm.$.Algorithms.WordGame.WordEnumerator, {
        f1: function (chars) {
            return String.fromCharCode.apply(null, System.Linq.Enumerable.from(chars).toArray());
        }
    });

    Bridge.define("BitLevelGeneration.Assignments_byte", {
        statics: {
            methods: {
                Generate: function (sizes, potSize, countEstimate) {
                    if (countEstimate === void 0) { countEstimate = 2048; }
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_byte.ToBitVector(sizes);

                    var assignments = new (System.Collections.Generic.List$1(System.Array.type(System.Byte)))(countEstimate);
                    var assignment = System.Array.init(potSize, 0, System.Byte);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.Byte));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_byte.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_byte.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (~(c | BitLevelGeneration.BitVectors_byte.Zeroes(sizeVector))) & 255;
                    BitLevelGeneration.Assignments_byte.Generate$1(sizeVector, assignments, assignment, r, 0, 1, c, dc);

                    return assignments;
                },
                Generate$1: function (sizes, assignments, assignment, r, i, last, care, dontCare) {
                    var x;

                    var g = (care & ~last) & 255;
                    var q = (~care & ~dontCare & last) & 255;

                    if (g > q) {
                        var f = BitLevelGeneration.BitOperations.RightFillToMSB(g);
                        x = ((care & f) | (last & ~f)) & 255;
                    } else if (q > g) {
                        var f1 = BitLevelGeneration.BitOperations.RightFillToMSB(q);
                        var t = (~f1 & last) & 255;
                        var y = (dontCare & ~f1 & ~t) & 255;
                        if (y === 0) {
                            return;
                        }

                        var y2 = (dontCare & t & (y | (((y - 1) | 0)))) & 255;

                        x = ((care & (f1 >> 1)) | (t & ~y2) | (y & (((0 - y) | 0)))) & 255;
                    } else {
                        x = last;
                    }

                    var end = (care | dontCare) & 255;
                    if (i >= ((assignment.length - 1) | 0)) {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            var assignmentCopy = System.Array.init(assignment.length, 0, System.Byte);
                            System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);
                            assignments.add(assignmentCopy);

                            if (x === end) {
                                break;
                            }

                            x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 255;
                        }
                    } else {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            BitLevelGeneration.BitVectors_byte.Decrement(sizes, x);
                            var c = BitLevelGeneration.BitVectors_byte.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                            var z = BitLevelGeneration.BitVectors_byte.Zeroes(sizes);

                            if ((c & z) === 0) {
                                var dc = (~(c | z)) & 255;
                                BitLevelGeneration.Assignments_byte.Generate$1(sizes, assignments, assignment, r, ((i + 1) | 0), x, c, dc);
                            }

                            BitLevelGeneration.BitVectors_byte.Increment(sizes, x);

                            if (x === end) {
                                break;
                            }

                            x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 255;
                        }
                    }
                },
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_byte.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, 0, System.Byte);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.Byte));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_byte.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_byte.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (~(c | BitLevelGeneration.BitVectors_byte.Zeroes(sizeVector))) & 255;
                    return BitLevelGeneration.Assignments_byte.Enumerate$1(sizeVector, assignment, r, 0, 1, c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.Byte)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.Byte)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = (care & ~last) & 255;
                                                q = (~care & ~dontCare & last) & 255;

                                                if (g > q) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = BitLevelGeneration.BitOperations.RightFillToMSB(g);
                                                x = ((care & f) | (last & ~f)) & 255;
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q > g) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = BitLevelGeneration.BitOperations.RightFillToMSB(q);
                                                t = (~f1 & last) & 255;
                                                y = (dontCare & ~f1 & ~t) & 255;
                                                if (y === 0) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = (dontCare & t & (y | (((y - 1) | 0)))) & 255;

                                                x = ((care & (f1 >> 1)) | (t & ~y2) | (y & (((0 - y) | 0)))) & 255;
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = (care | dontCare) & 255;
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, 0, System.Byte);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x === end) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 255;

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_byte.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_byte.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_byte.Zeroes(sizes);

                                                if ((c & z) === 0) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = (~(c | z)) & 255;
                                                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_byte.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.Byte));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_byte.Increment(sizes, x);

                                                if (x === end) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 255;

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.Assignments_long", {
        statics: {
            methods: {
                Generate: function (sizes, potSize, countEstimate) {
                    if (countEstimate === void 0) { countEstimate = 2048; }
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_long.ToBitVector(sizes);

                    var assignments = new (System.Collections.Generic.List$1(System.Array.type(System.Int64)))(countEstimate);
                    var assignment = System.Array.init(potSize, System.Int64(0), System.Int64);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.Int64));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_long.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_long.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (c.or(BitLevelGeneration.BitVectors_long.Zeroes(sizeVector))).not();
                    BitLevelGeneration.Assignments_long.Generate$1(sizeVector, assignments, assignment, r, 0, System.Int64(1), c, dc);

                    return assignments;
                },
                Generate$1: function (sizes, assignments, assignment, r, i, last, care, dontCare) {
                    var x;

                    var g = care.and(last.not());
                    var q = care.not().and(dontCare.not()).and(last);

                    if (g.gt(q)) {
                        var f = BitLevelGeneration.BitUsage_long.RightFillToMSB(g);
                        x = (care.and(f)).or((last.and(f.not())));
                    } else if (q.gt(g)) {
                        var f1 = BitLevelGeneration.BitUsage_long.RightFillToMSB(q);
                        var t = f1.not().and(last);
                        var y = dontCare.and(f1.not()).and(t.not());
                        if (y.equals(System.Int64(0))) {
                            return;
                        }

                        var y2 = dontCare.and(t).and((y.or((y.sub(System.Int64(1))))));

                        x = (care.and((f1.shr(1)))).or((t.and(y2.not()))).or((y.and((System.Int64(0).sub(y)))));
                    } else {
                        x = last;
                    }

                    var end = care.or(dontCare);
                    if (i >= ((assignment.length - 1) | 0)) {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            var assignmentCopy = System.Array.init(assignment.length, System.Int64(0), System.Int64);
                            System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);
                            assignments.add(assignmentCopy);

                            if (x.equals(end)) {
                                break;
                            }

                            x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);
                        }
                    } else {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            BitLevelGeneration.BitVectors_long.Decrement(sizes, x);
                            var c = BitLevelGeneration.BitVectors_long.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                            var z = BitLevelGeneration.BitVectors_long.Zeroes(sizes);

                            if ((c.and(z)).equals(System.Int64(0))) {
                                var dc = (c.or(z)).not();
                                BitLevelGeneration.Assignments_long.Generate$1(sizes, assignments, assignment, r, ((i + 1) | 0), x, c, dc);
                            }

                            BitLevelGeneration.BitVectors_long.Increment(sizes, x);

                            if (x.equals(end)) {
                                break;
                            }

                            x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);
                        }
                    }
                },
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_long.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, System.Int64(0), System.Int64);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.Int64));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_long.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_long.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (c.or(BitLevelGeneration.BitVectors_long.Zeroes(sizeVector))).not();
                    return BitLevelGeneration.Assignments_long.Enumerate$1(sizeVector, assignment, r, 0, System.Int64(1), c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.Int64)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.Int64)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = care.and(last.not());
                                                q = care.not().and(dontCare.not()).and(last);

                                                if (g.gt(q)) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = BitLevelGeneration.BitUsage_long.RightFillToMSB(g);
                                                x = (care.and(f)).or((last.and(f.not())));
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q.gt(g)) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = BitLevelGeneration.BitUsage_long.RightFillToMSB(q);
                                                t = f1.not().and(last);
                                                y = dontCare.and(f1.not()).and(t.not());
                                                if (y.equals(System.Int64(0))) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = dontCare.and(t).and((y.or((y.sub(System.Int64(1))))));

                                                x = (care.and((f1.shr(1)))).or((t.and(y2.not()))).or((y.and((System.Int64(0).sub(y)))));
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = care.or(dontCare);
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, System.Int64(0), System.Int64);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x.equals(end)) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_long.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_long.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_long.Zeroes(sizes);

                                                if ((c.and(z)).equals(System.Int64(0))) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = (c.or(z)).not();
                                                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_long.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.Int64));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_long.Increment(sizes, x);

                                                if (x.equals(end)) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.Assignments_uint", {
        statics: {
            methods: {
                Generate: function (sizes, potSize, countEstimate) {
                    if (countEstimate === void 0) { countEstimate = 2048; }
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_uint.ToBitVector(sizes);

                    var assignments = new (System.Collections.Generic.List$1(System.Array.type(System.UInt32)))(countEstimate);
                    var assignment = System.Array.init(potSize, 0, System.UInt32);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt32));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_uint.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_uint.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = ~(((c | BitLevelGeneration.BitVectors_uint.Zeroes(sizeVector)) >>> 0));
                    BitLevelGeneration.Assignments_uint.Generate$1(sizeVector, assignments, assignment, r, 0, 1, c, dc);

                    return assignments;
                },
                Generate$1: function (sizes, assignments, assignment, r, i, last, care, dontCare) {
                    var x;

                    var g = ((care & ~last) >>> 0);
                    var q = ((((~care & ~dontCare) >>> 0) & last) >>> 0);

                    if (g > q) {
                        var f = BitLevelGeneration.BitUsage_uint.RightFillToMSB(g);
                        x = (((((care & f) >>> 0)) | (((last & ~f) >>> 0))) >>> 0);
                    } else if (q > g) {
                        var f1 = BitLevelGeneration.BitUsage_uint.RightFillToMSB(q);
                        var t = ((~f1 & last) >>> 0);
                        var y = ((((dontCare & ~f1) >>> 0) & ~t) >>> 0);
                        if (y === 0) {
                            return;
                        }

                        var y2 = ((((dontCare & t) >>> 0) & (((y | (((y - 1) >>> 0))) >>> 0))) >>> 0);

                        x = (((((((care & (f1 >>> 1)) >>> 0)) | (((t & ~y2) >>> 0))) >>> 0) | (((y & (((0 - y) >>> 0))) >>> 0))) >>> 0);
                    } else {
                        x = last;
                    }

                    var end = ((care | dontCare) >>> 0);
                    if (i >= ((assignment.length - 1) | 0)) {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            var assignmentCopy = System.Array.init(assignment.length, 0, System.UInt32);
                            System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);
                            assignments.add(assignmentCopy);

                            if (x === end) {
                                break;
                            }

                            x = ((((((((x - (((care + dontCare) >>> 0))) >>> 0)) & dontCare) >>> 0)) + care) >>> 0);
                        }
                    } else {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            BitLevelGeneration.BitVectors_uint.Decrement(sizes, x);
                            var c = BitLevelGeneration.BitVectors_uint.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                            var z = BitLevelGeneration.BitVectors_uint.Zeroes(sizes);

                            if ((((c & z) >>> 0)) === 0) {
                                var dc = ~(((c | z) >>> 0));
                                BitLevelGeneration.Assignments_uint.Generate$1(sizes, assignments, assignment, r, ((i + 1) | 0), x, c, dc);
                            }

                            BitLevelGeneration.BitVectors_uint.Increment(sizes, x);

                            if (x === end) {
                                break;
                            }

                            x = ((((((((x - (((care + dontCare) >>> 0))) >>> 0)) & dontCare) >>> 0)) + care) >>> 0);
                        }
                    }
                },
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_uint.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, 0, System.UInt32);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt32));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_uint.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_uint.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = ~(((c | BitLevelGeneration.BitVectors_uint.Zeroes(sizeVector)) >>> 0));
                    return BitLevelGeneration.Assignments_uint.Enumerate$1(sizeVector, assignment, r, 0, 1, c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.UInt32)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.UInt32)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = ((care & ~last) >>> 0);
                                                q = ((((~care & ~dontCare) >>> 0) & last) >>> 0);

                                                if (g > q) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = BitLevelGeneration.BitUsage_uint.RightFillToMSB(g);
                                                x = (((((care & f) >>> 0)) | (((last & ~f) >>> 0))) >>> 0);
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q > g) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = BitLevelGeneration.BitUsage_uint.RightFillToMSB(q);
                                                t = ((~f1 & last) >>> 0);
                                                y = ((((dontCare & ~f1) >>> 0) & ~t) >>> 0);
                                                if (y === 0) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = ((((dontCare & t) >>> 0) & (((y | (((y - 1) >>> 0))) >>> 0))) >>> 0);

                                                x = (((((((care & (f1 >>> 1)) >>> 0)) | (((t & ~y2) >>> 0))) >>> 0) | (((y & (((0 - y) >>> 0))) >>> 0))) >>> 0);
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = ((care | dontCare) >>> 0);
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, 0, System.UInt32);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x === end) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = ((((((((x - (((care + dontCare) >>> 0))) >>> 0)) & dontCare) >>> 0)) + care) >>> 0);

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_uint.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_uint.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_uint.Zeroes(sizes);

                                                if ((((c & z) >>> 0)) === 0) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = ~(((c | z) >>> 0));
                                                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_uint.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.UInt32));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_uint.Increment(sizes, x);

                                                if (x === end) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = ((((((((x - (((care + dontCare) >>> 0))) >>> 0)) & dontCare) >>> 0)) + care) >>> 0);

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.Assignments_ulong", {
        statics: {
            methods: {
                Generate: function (sizes, potSize, countEstimate) {
                    if (countEstimate === void 0) { countEstimate = 2048; }
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_ulong.ToBitVector(sizes);

                    var assignments = new (System.Collections.Generic.List$1(System.Array.type(System.UInt64)))(countEstimate);
                    var assignment = System.Array.init(potSize, System.UInt64(0), System.UInt64);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt64));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_ulong.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (c.or(BitLevelGeneration.BitVectors_ulong.Zeroes(sizeVector))).not();
                    BitLevelGeneration.Assignments_ulong.Generate$1(sizeVector, assignments, assignment, r, 0, System.UInt64(1), c, dc);

                    return assignments;
                },
                Generate$1: function (sizes, assignments, assignment, r, i, last, care, dontCare) {
                    var x;

                    var g = care.and(last.not());
                    var q = care.not().and(dontCare.not()).and(last);

                    if (g.gt(q)) {
                        var f = BitLevelGeneration.BitOperations.RightFillToMSB$2(g);
                        x = (care.and(f)).or((last.and(f.not())));
                    } else if (q.gt(g)) {
                        var f1 = BitLevelGeneration.BitOperations.RightFillToMSB$2(q);
                        var t = f1.not().and(last);
                        var y = dontCare.and(f1.not()).and(t.not());
                        if (y.equals(System.UInt64(0))) {
                            return;
                        }

                        var y2 = dontCare.and(t).and((y.or((y.sub(System.UInt64(1))))));

                        x = (care.and((f1.shru(1)))).or((t.and(y2.not()))).or((y.and((System.UInt64(0).sub(y)))));
                    } else {
                        x = last;
                    }

                    var end = care.or(dontCare);
                    if (i >= ((assignment.length - 1) | 0)) {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            var assignmentCopy = System.Array.init(assignment.length, System.UInt64(0), System.UInt64);
                            System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);
                            assignments.add(assignmentCopy);

                            if (x.equals(end)) {
                                break;
                            }

                            x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);
                        }
                    } else {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            BitLevelGeneration.BitVectors_ulong.Decrement(sizes, x);
                            var c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                            var z = BitLevelGeneration.BitVectors_ulong.Zeroes(sizes);

                            if ((c.and(z)).equals(System.UInt64(0))) {
                                var dc = (c.or(z)).not();
                                BitLevelGeneration.Assignments_ulong.Generate$1(sizes, assignments, assignment, r, ((i + 1) | 0), x, c, dc);
                            }

                            BitLevelGeneration.BitVectors_ulong.Increment(sizes, x);

                            if (x.equals(end)) {
                                break;
                            }

                            x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);
                        }
                    }
                },
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_ulong.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, System.UInt64(0), System.UInt64);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt64));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_ulong.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (c.or(BitLevelGeneration.BitVectors_ulong.Zeroes(sizeVector))).not();
                    return BitLevelGeneration.Assignments_ulong.Enumerate$1(sizeVector, assignment, r, 0, System.UInt64(1), c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.UInt64)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.UInt64)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = care.and(last.not());
                                                q = care.not().and(dontCare.not()).and(last);

                                                if (g.gt(q)) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = BitLevelGeneration.BitOperations.RightFillToMSB$2(g);
                                                x = (care.and(f)).or((last.and(f.not())));
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q.gt(g)) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = BitLevelGeneration.BitOperations.RightFillToMSB$2(q);
                                                t = f1.not().and(last);
                                                y = dontCare.and(f1.not()).and(t.not());
                                                if (y.equals(System.UInt64(0))) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = dontCare.and(t).and((y.or((y.sub(System.UInt64(1))))));

                                                x = (care.and((f1.shru(1)))).or((t.and(y2.not()))).or((y.and((System.UInt64(0).sub(y)))));
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = care.or(dontCare);
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, System.UInt64(0), System.UInt64);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x.equals(end)) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_ulong.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_ulong.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_ulong.Zeroes(sizes);

                                                if ((c.and(z)).equals(System.UInt64(0))) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = (c.or(z)).not();
                                                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_ulong.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.UInt64));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_ulong.Increment(sizes, x);

                                                if (x.equals(end)) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = ((x.sub((care.add(dontCare)))).and(dontCare)).add(care);

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.Assignments_ushort", {
        statics: {
            methods: {
                Generate: function (sizes, potSize, countEstimate) {
                    if (countEstimate === void 0) { countEstimate = 2048; }
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_ushort.ToBitVector(sizes);

                    var assignments = new (System.Collections.Generic.List$1(System.Array.type(System.UInt16)))(countEstimate);
                    var assignment = System.Array.init(potSize, 0, System.UInt16);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt16));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_ushort.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_ushort.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (~(c | BitLevelGeneration.BitVectors_ushort.Zeroes(sizeVector))) & 65535;
                    BitLevelGeneration.Assignments_ushort.Generate$1(sizeVector, assignments, assignment, r, 0, 1, c, dc);

                    return assignments;
                },
                Generate$1: function (sizes, assignments, assignment, r, i, last, care, dontCare) {
                    var x;

                    var g = (care & ~last) & 65535;
                    var q = (~care & ~dontCare & last) & 65535;

                    if (g > q) {
                        var f = BitLevelGeneration.BitOperations.RightFillToMSB$1(g);
                        x = ((care & f) | (last & ~f)) & 65535;
                    } else if (q > g) {
                        var f1 = BitLevelGeneration.BitOperations.RightFillToMSB$1(q);
                        var t = (~f1 & last) & 65535;
                        var y = (dontCare & ~f1 & ~t) & 65535;
                        if (y === 0) {
                            return;
                        }

                        var y2 = (dontCare & t & (y | (((y - 1) | 0)))) & 65535;

                        x = ((care & (f1 >> 1)) | (t & ~y2) | (y & (((0 - y) | 0)))) & 65535;
                    } else {
                        x = last;
                    }

                    var end = (care | dontCare) & 65535;
                    if (i >= ((assignment.length - 1) | 0)) {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            var assignmentCopy = System.Array.init(assignment.length, 0, System.UInt16);
                            System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);
                            assignments.add(assignmentCopy);

                            if (x === end) {
                                break;
                            }

                            x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 65535;
                        }
                    } else {
                        while (true) {
                            assignment[System.Array.index(i, assignment)] = x;

                            BitLevelGeneration.BitVectors_ushort.Decrement(sizes, x);
                            var c = BitLevelGeneration.BitVectors_ushort.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                            var z = BitLevelGeneration.BitVectors_ushort.Zeroes(sizes);

                            if ((c & z) === 0) {
                                var dc = (~(c | z)) & 65535;
                                BitLevelGeneration.Assignments_ushort.Generate$1(sizes, assignments, assignment, r, ((i + 1) | 0), x, c, dc);
                            }

                            BitLevelGeneration.BitVectors_ushort.Increment(sizes, x);

                            if (x === end) {
                                break;
                            }

                            x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 65535;
                        }
                    }
                },
                Enumerate: function (sizes, potSize) {
                    var sizesCount = System.Linq.Enumerable.from(sizes).count();
                    var sizeVector = BitLevelGeneration.BitVectors_ushort.ToBitVector(sizes);

                    var assignment = System.Array.init(potSize, 0, System.UInt16);

                    var r = System.Array.init(potSize, null, System.Collections.Generic.List$1(System.UInt16));
                    for (var i = 0; i < potSize; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = BitLevelGeneration.BitVectors_ushort.ToBitVector(System.Linq.Enumerable.repeat(((((potSize - 1) | 0) - i) | 0), sizesCount));
                    }

                    var c = BitLevelGeneration.BitVectors_ushort.GreaterThan(sizeVector, r[System.Array.index(0, r)]);
                    var dc = (~(c | BitLevelGeneration.BitVectors_ushort.Zeroes(sizeVector))) & 65535;
                    return BitLevelGeneration.Assignments_ushort.Enumerate$1(sizeVector, assignment, r, 0, 1, c, dc);
                },
                Enumerate$1: function (sizes, assignment, r, i, last, care, dontCare) {
                    return new (Bridge.GeneratorEnumerable$1(System.Array.type(System.UInt16)))(Bridge.fn.bind(this, function (sizes, assignment, r, i, last, care, dontCare) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            g,
                            q,
                            f,
                            f1,
                            t,
                            y,
                            y2,
                            end,
                            assignmentCopy,
                            c,
                            z,
                            dc,
                            $t,
                            a,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Array.type(System.UInt16)))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            g = (care & ~last) & 65535;
                                                q = (~care & ~dontCare & last) & 65535;

                                                if (g > q) {
                                                    $step = 1;
                                                    continue;
                                                } else  {
                                                    $step = 2;
                                                    continue;
                                                }
                                        }
                                        case 1: {
                                            f = BitLevelGeneration.BitOperations.RightFillToMSB$1(g);
                                                x = ((care & f) | (last & ~f)) & 65535;
                                            $step = 8;
                                            continue;
                                        }
                                        case 2: {
                                            if (q > g) {
                                                    $step = 3;
                                                    continue;
                                                } else  {
                                                    $step = 6;
                                                    continue;
                                                }
                                        }
                                        case 3: {
                                            f1 = BitLevelGeneration.BitOperations.RightFillToMSB$1(q);
                                                t = (~f1 & last) & 65535;
                                                y = (dontCare & ~f1 & ~t) & 65535;
                                                if (y === 0) {
                                                    $step = 4;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 4: {
                                            return false;
                                        }
                                        case 5: {
                                            y2 = (dontCare & t & (y | (((y - 1) | 0)))) & 65535;

                                                x = ((care & (f1 >> 1)) | (t & ~y2) | (y & (((0 - y) | 0)))) & 65535;
                                            $step = 7;
                                            continue;
                                        }
                                        case 6: {
                                            x = last;
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            end = (care | dontCare) & 65535;
                                                if (i >= ((assignment.length - 1) | 0)) {
                                                    $step = 9;
                                                    continue;
                                                } else  {
                                                    $step = 14;
                                                    continue;
                                                }
                                        }
                                        case 9: {
                                            $step = 10;
                                            continue;
                                        }
                                        case 10: {
                                            if ( true ) {
                                                    $step = 11;
                                                    continue;
                                                } 
                                                $step = 13;
                                                continue;
                                        }
                                        case 11: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                assignmentCopy = System.Array.init(assignment.length, 0, System.UInt16);
                                                System.Array.copy(assignment, 0, assignmentCopy, 0, assignmentCopy.length);

                                                $enumerator.current = assignmentCopy;
                                                $step = 12;
                                                return true;
                                        }
                                        case 12: {
                                            if (x === end) {
                                                    $step = 13;
                                                    continue;
                                                }

                                                x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 65535;

                                                $step = 10;
                                                continue;
                                        }
                                        case 13: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 14: {
                                            $step = 15;
                                            continue;
                                        }
                                        case 15: {
                                            if ( true ) {
                                                    $step = 16;
                                                    continue;
                                                } 
                                                $step = 23;
                                                continue;
                                        }
                                        case 16: {
                                            assignment[System.Array.index(i, assignment)] = x;

                                                BitLevelGeneration.BitVectors_ushort.Decrement(sizes, x);
                                                c = BitLevelGeneration.BitVectors_ushort.GreaterThan(sizes, r[System.Array.index(((i + 1) | 0), r)]);
                                                z = BitLevelGeneration.BitVectors_ushort.Zeroes(sizes);

                                                if ((c & z) === 0) {
                                                    $step = 17;
                                                    continue;
                                                } 
                                                $step = 22;
                                                continue;
                                        }
                                        case 17: {
                                            dc = (~(c | z)) & 65535;
                                                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_ushort.Enumerate$1(sizes, assignment, r, ((i + 1) | 0), x, c, dc), System.Array.type(System.UInt16));
                                                $step = 18;
                                                continue;
                                        }
                                        case 18: {
                                            if ($t.moveNext()) {
                                                    a = $t.Current;
                                                    $step = 19;
                                                    continue;
                                                }
                                            $step = 21;
                                            continue;
                                        }
                                        case 19: {
                                            $enumerator.current = a;
                                                $step = 20;
                                                return true;
                                        }
                                        case 20: {
                                            $step = 18;
                                            continue;
                                        }
                                        case 21: {
                                            $step = 22;
                                            continue;
                                        }
                                        case 22: {
                                            BitLevelGeneration.BitVectors_ushort.Increment(sizes, x);

                                                if (x === end) {
                                                    $step = 23;
                                                    continue;
                                                }

                                                x = (((((((x - (((care + dontCare) | 0))) | 0)) & dontCare) + care) | 0)) & 65535;

                                                $step = 15;
                                                continue;
                                        }
                                        case 23: {
                                            $step = 24;
                                            continue;
                                        }
                                        case 24: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.IGraph_long", {
        $kind: "interface"
    });

    Bridge.define("BitLevelGeneration.IGraph_uint", {
        $kind: "interface"
    });

    Bridge.define("BitLevelGeneration.BitOperations", {
        statics: {
            methods: {
                To_ulong: function (bits) {
                    var $t;
                    var x = System.UInt64(0);
                    $t = Bridge.getEnumerator(bits, System.Int32);
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            x = x.or((System.UInt64(1).shl(bit)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return x;
                },
                To_ushort: function (bits) {
                    var $t;
                    var x = 0;
                    $t = Bridge.getEnumerator(bits, System.Int32);
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            x = (x | ((1 << bit) & 65535)) & 65535;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return x;
                },
                To_byte: function (bits) {
                    var $t;
                    var x = 0;
                    $t = Bridge.getEnumerator(bits, System.Int32);
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            x = (x | ((1 << bit) & 255)) & 255;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return x;
                },
                RightFillToMSB$2: function (x) {
                    x = x.or((x.shru(1)));
                    x = x.or((x.shru(2)));
                    x = x.or((x.shru(4)));
                    x = x.or((x.shru(8)));
                    x = x.or((x.shru(16)));
                    x = x.or((x.shru(32)));

                    return x;
                },
                RightFillToMSB$1: function (x) {
                    x = (x | ((x >> 1) & 65535)) & 65535;
                    x = (x | ((x >> 2) & 65535)) & 65535;
                    x = (x | ((x >> 4) & 65535)) & 65535;
                    x = (x | ((x >> 8) & 65535)) & 65535;

                    return x;
                },
                RightFillToMSB: function (x) {
                    x = (x | ((x >> 1) & 255)) & 255;
                    x = (x | ((x >> 2) & 255)) & 255;
                    x = (x | ((x >> 4) & 255)) & 255;

                    return x;
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitUsage_long", {
        statics: {
            fields: {
                DeBruijnMultiplier: System.UInt64(0),
                DeBruijnLookup: null
            },
            ctors: {
                init: function () {
                    this.DeBruijnMultiplier = System.UInt64(System.Int64([-1706153790,133027301]));
                    this.DeBruijnLookup = System.Array.init([
                        63, 
                        0, 
                        58, 
                        1, 
                        59, 
                        47, 
                        53, 
                        2, 
                        60, 
                        39, 
                        48, 
                        27, 
                        54, 
                        33, 
                        42, 
                        3, 
                        61, 
                        51, 
                        37, 
                        40, 
                        49, 
                        18, 
                        28, 
                        20, 
                        55, 
                        30, 
                        34, 
                        11, 
                        43, 
                        14, 
                        22, 
                        4, 
                        62, 
                        57, 
                        46, 
                        52, 
                        38, 
                        26, 
                        32, 
                        41, 
                        50, 
                        36, 
                        17, 
                        19, 
                        29, 
                        10, 
                        13, 
                        21, 
                        56, 
                        45, 
                        25, 
                        31, 
                        35, 
                        16, 
                        9, 
                        12, 
                        44, 
                        24, 
                        15, 
                        8, 
                        23, 
                        7, 
                        6, 
                        5
                    ], System.Int32);
                }
            },
            methods: {
                Extract: function (x) {
                    return BitLevelGeneration.BitUsage_long.DeBruijnLookup[System.Array.index(System.Int64.toNumber((System.Int64.clipu64(x).mul(BitLevelGeneration.BitUsage_long.DeBruijnMultiplier)).shru(58)), BitLevelGeneration.BitUsage_long.DeBruijnLookup)];
                },
                LeastSignificantBit: function (x) {
                    return BitLevelGeneration.BitUsage_long.DeBruijnLookup[System.Array.index(System.Int64.clipu64((x.and(x.neg()))).mul(BitLevelGeneration.BitUsage_long.DeBruijnMultiplier).shru(58), BitLevelGeneration.BitUsage_long.DeBruijnLookup)];
                },
                GetAndClearLeastSignificantBit: function (x) {
                    var m = x.v.and(x.v.neg());
                    x.v = x.v.xor(m);
                    return BitLevelGeneration.BitUsage_long.DeBruijnLookup[System.Array.index(System.Int64.toNumber((System.Int64.clipu64(m).mul(BitLevelGeneration.BitUsage_long.DeBruijnMultiplier)).shru(58)), BitLevelGeneration.BitUsage_long.DeBruijnLookup)];
                },
                PopulationCount: function (b) {
                    var q = 0;
                    while (b.gt(System.Int64(0))) {
                        q = (q + 1) | 0;
                        b = b.and((b.sub(System.Int64(1))));
                    }
                    return q;
                },
                PopulationCountDense: function (x) {
                    x = x.sub(((x.shr(1)).and(System.Int64([1431655765,1431655765]))));
                    x = (x.and(System.Int64([858993459,858993459]))).add(((x.shr(2)).and(System.Int64([858993459,858993459]))));
                    x = (x.add((x.shr(4)))).and(System.Int64([252645135,252645135]));
                    x = (x.mul(System.Int64([16843009,16843009]))).shr(56);

                    return System.Int64.clip32(x);
                },
                ToSet: function (x) {
                    x = {v:x};
                    var onBits = new (System.Collections.Generic.List$1(System.Int32))(10);
                    while (x.v.ne(System.Int64(0))) {
                        onBits.add(BitLevelGeneration.BitUsage_long.GetAndClearLeastSignificantBit(x));
                    }

                    return onBits;
                },
                RightFillToMSB: function (x) {
                    x = x.or((x.shr(1)));
                    x = x.or((x.shr(2)));
                    x = x.or((x.shr(4)));
                    x = x.or((x.shr(8)));
                    x = x.or((x.shr(16)));

                    return x;
                },
                To_long: function (bits) {
                    var $t;
                    var x = System.Int64(0);
                    $t = Bridge.getEnumerator(bits, System.Int32);
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            x = x.or((System.Int64(1).shl(bit)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return x;
                },
                Or: function (colorGraph, offset) {
                    var result = System.Int64(0);
                    for (var i = offset; i < colorGraph.length; i = (i + 1) | 0) {
                        result = result.or(colorGraph[System.Array.index(i, colorGraph)]);
                    }
                    return result;
                },
                TrueForAllBitIndices: function (x, predicate) {
                    x = {v:x};
                    while (x.v.ne(System.Int64(0))) {
                        if (!predicate(BitLevelGeneration.BitUsage_long.GetAndClearLeastSignificantBit(x))) {
                            return false;
                        }
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitUsage_uint", {
        statics: {
            fields: {
                DeBruijnMultiplier: 0,
                DeBruijnLookup: null
            },
            ctors: {
                init: function () {
                    this.DeBruijnMultiplier = 125613361;
                    this.DeBruijnLookup = System.Array.init([0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9], System.Int32);
                }
            },
            methods: {
                Extract: function (x) {
                    return BitLevelGeneration.BitUsage_uint.DeBruijnLookup[System.Array.index((Bridge.Int.umul(x, BitLevelGeneration.BitUsage_uint.DeBruijnMultiplier)) >>> 27, BitLevelGeneration.BitUsage_uint.DeBruijnLookup)];
                },
                LeastSignificantBit: function (x) {
                    return BitLevelGeneration.BitUsage_uint.DeBruijnLookup[System.Array.index((Bridge.Int.umul((((x & (((~x + 1) >>> 0))) >>> 0)), BitLevelGeneration.BitUsage_uint.DeBruijnMultiplier)) >>> 27, BitLevelGeneration.BitUsage_uint.DeBruijnLookup)];
                },
                GetAndClearLeastSignificantBit: function (x) {
                    var m = (x.v & (((~x.v + 1) >>> 0))) >>> 0;
                    x.v = (x.v ^ m) >>> 0;
                    return BitLevelGeneration.BitUsage_uint.DeBruijnLookup[System.Array.index((Bridge.Int.umul(m, BitLevelGeneration.BitUsage_uint.DeBruijnMultiplier)) >>> 27, BitLevelGeneration.BitUsage_uint.DeBruijnLookup)];
                },
                PopulationCount: function (b) {
                    var q = 0;
                    while (b > 0) {
                        q = (q + 1) | 0;
                        b = (b & (((b - 1) >>> 0))) >>> 0;
                    }
                    return q;
                },
                ToSet: function (x) {
                    x = {v:x};
                    var onBits = new (System.Collections.Generic.List$1(System.Int32))(10);
                    while (x.v !== 0) {
                        onBits.add(BitLevelGeneration.BitUsage_uint.GetAndClearLeastSignificantBit(x));
                    }

                    return onBits;
                },
                RightFillToMSB: function (x) {
                    x = (x | (x >>> 1)) >>> 0;
                    x = (x | (x >>> 2)) >>> 0;
                    x = (x | (x >>> 4)) >>> 0;
                    x = (x | (x >>> 8)) >>> 0;
                    x = (x | (x >>> 16)) >>> 0;

                    return x;
                },
                To_uint: function (bits) {
                    var $t;
                    var x = 0;
                    $t = Bridge.getEnumerator(bits, System.Int32);
                    try {
                        while ($t.moveNext()) {
                            var bit = $t.Current;
                            x = (x | (((1 << bit) >>> 0))) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return x;
                },
                Or: function (colorGraph, offset) {
                    var result = 0;
                    for (var i = offset; i < colorGraph.length; i = (i + 1) | 0) {
                        result = (result | colorGraph[System.Array.index(i, colorGraph)]) >>> 0;
                    }
                    return result;
                },
                TrueForAllBitIndices: function (x, predicate) {
                    x = {v:x};
                    while (x.v !== 0) {
                        if (!predicate(BitLevelGeneration.BitUsage_uint.GetAndClearLeastSignificantBit(x))) {
                            return false;
                        }
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitVectors_byte", {
        statics: {
            methods: {
                FromBitVector: function (n) {
                    var v = new (System.Collections.Generic.List$1(System.Int32))(8);
                    for (var i = 0; i < 8; i = (i + 1) | 0) {
                        var b = (1 << i) & 255;
                        var m = 0;
                        for (var j = 0; j < n.Count; j = (j + 1) | 0) {
                            if ((b & n.getItem(j)) !== 0) {
                                m = (m + (1 << j)) | 0;
                            }
                        }

                        v.add(m);
                    }

                    return v;
                },
                ToBitVector: function (w) {
                    var v = System.Linq.Enumerable.from(w).toList(System.Int32);
                    var n = new (System.Collections.Generic.List$1(System.Byte))();
                    while (true) {
                        var m = 0;
                        var zero = true;
                        for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                            if (v.getItem(i) !== 0) {
                                zero = false;
                            }

                            if ((v.getItem(i) & 1) !== 0) {
                                m = (m | ((1 << i) & 255)) & 255;
                            }

                            v.setItem(i, v.getItem(i) >> 1);
                        }

                        n.add(m);

                        if (zero) {
                            break;
                        }
                    }

                    return n;
                },
                Increment: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = (m & n.getItem(i)) & 255;
                        var t2 = (m ^ n.getItem(i)) & 255;

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Decrement: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = (m & ~n.getItem(i)) & 255;
                        var t2 = (m ^ n.getItem(i)) & 255;

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Zeroes: function (n) {
                    var m = 0;
                    for (var i = 0; i < n.Count; i = (i + 1) | 0) {
                        m = (m | n.getItem(i)) & 255;
                    }

                    return ((~m) & 255);
                },
                GreaterThan: function (n, k) {
                    var a = 0;
                    var b = 0;
                    for (var i = (Math.max(n.Count, k.Count) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (i >= k.Count) {
                            a = (a | n.getItem(i)) & 255;
                        } else {
                            if (i >= n.Count) {
                                b = (b | k.getItem(i)) & 255;
                            } else {
                                a = (a | ((~b & n.getItem(i) & ~k.getItem(i)) & 255)) & 255;
                                b = (b | ((~a & ~n.getItem(i) & k.getItem(i)) & 255)) & 255;
                            }
                        }
                    }

                    return ((a & ~b) & 255);
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitVectors_long", {
        statics: {
            methods: {
                FromBitVector: function (n) {
                    var v = new (System.Collections.Generic.List$1(System.Int32))(64);
                    for (var i = 0; i < 64; i = (i + 1) | 0) {
                        var b = System.Int64(1).shl(i);
                        var m = 0;
                        for (var j = 0; j < n.Count; j = (j + 1) | 0) {
                            if ((b.and(n.getItem(j))).ne(System.Int64(0))) {
                                m = (m + (1 << j)) | 0;
                            }
                        }

                        v.add(m);
                    }

                    return v;
                },
                ToBitVector: function (w) {
                    var v = System.Linq.Enumerable.from(w).toList(System.Int32);
                    var n = new (System.Collections.Generic.List$1(System.Int64))();
                    while (true) {
                        var m = System.Int64(0);
                        var zero = true;
                        for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                            if (v.getItem(i) !== 0) {
                                zero = false;
                            }

                            if ((v.getItem(i) & 1) !== 0) {
                                m = m.or(System.Int64(1).shl(i));
                            }

                            v.setItem(i, v.getItem(i) >> 1);
                        }

                        n.add(m);

                        if (zero) {
                            break;
                        }
                    }

                    return n;
                },
                Increment: function (n, m) {
                    var i = 0;
                    while (m.ne(System.Int64(0))) {
                        var t1 = m.and(n.getItem(i));
                        var t2 = m.xor(n.getItem(i));

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Decrement: function (n, m) {
                    var i = 0;
                    while (m.ne(System.Int64(0))) {
                        var t1 = m.and(n.getItem(i).not());
                        var t2 = m.xor(n.getItem(i));

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Zeroes: function (n) {
                    var m = System.Int64(0);
                    for (var i = 0; i < n.Count; i = (i + 1) | 0) {
                        m = m.or(n.getItem(i));
                    }

                    return m.not();
                },
                GreaterThan: function (n, k) {
                    var a = System.Int64(0);
                    var b = System.Int64(0);
                    for (var i = (Math.max(n.Count, k.Count) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (i >= k.Count) {
                            a = a.or(n.getItem(i));
                        } else {
                            if (i >= n.Count) {
                                b = b.or(k.getItem(i));
                            } else {
                                a = a.or(b.not().and(n.getItem(i)).and(k.getItem(i).not()));
                                b = b.or(a.not().and(n.getItem(i).not()).and(k.getItem(i)));
                            }
                        }
                    }

                    return a.and(b.not());
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitVectors_uint", {
        statics: {
            methods: {
                FromBitVector: function (n) {
                    var v = new (System.Collections.Generic.List$1(System.Int32))(32);
                    for (var i = 0; i < 32; i = (i + 1) | 0) {
                        var b = ((1 << i) >>> 0);
                        var m = 0;
                        for (var j = 0; j < n.Count; j = (j + 1) | 0) {
                            if ((((b & n.getItem(j)) >>> 0)) !== 0) {
                                m = (m + (1 << j)) | 0;
                            }
                        }

                        v.add(m);
                    }

                    return v;
                },
                ToBitVector: function (w) {
                    var v = System.Linq.Enumerable.from(w).toList(System.Int32);
                    var n = new (System.Collections.Generic.List$1(System.UInt32))();
                    while (true) {
                        var m = 0;
                        var zero = true;
                        for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                            if (v.getItem(i) !== 0) {
                                zero = false;
                            }

                            if ((v.getItem(i) & 1) !== 0) {
                                m = (m | ((1 << i) >>> 0)) >>> 0;
                            }

                            v.setItem(i, v.getItem(i) >> 1);
                        }

                        n.add(m);

                        if (zero) {
                            break;
                        }
                    }

                    return n;
                },
                Increment: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = ((m & n.getItem(i)) >>> 0);
                        var t2 = ((m ^ n.getItem(i)) >>> 0);

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Decrement: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = ((m & ~n.getItem(i)) >>> 0);
                        var t2 = ((m ^ n.getItem(i)) >>> 0);

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Zeroes: function (n) {
                    var m = 0;
                    for (var i = 0; i < n.Count; i = (i + 1) | 0) {
                        m = (m | n.getItem(i)) >>> 0;
                    }

                    return ~m;
                },
                GreaterThan: function (n, k) {
                    var a = 0;
                    var b = 0;
                    for (var i = (Math.max(n.Count, k.Count) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (i >= k.Count) {
                            a = (a | n.getItem(i)) >>> 0;
                        } else {
                            if (i >= n.Count) {
                                b = (b | k.getItem(i)) >>> 0;
                            } else {
                                a = (a | ((((~b & n.getItem(i)) >>> 0) & ~k.getItem(i)) >>> 0)) >>> 0;
                                b = (b | ((((~a & ~n.getItem(i)) >>> 0) & k.getItem(i)) >>> 0)) >>> 0;
                            }
                        }
                    }

                    return ((a & ~b) >>> 0);
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitVectors_ulong", {
        statics: {
            methods: {
                FromBitVector: function (n) {
                    var v = new (System.Collections.Generic.List$1(System.Int32))(64);
                    for (var i = 0; i < 64; i = (i + 1) | 0) {
                        var b = System.UInt64(1).shl(i);
                        var m = 0;
                        for (var j = 0; j < n.Count; j = (j + 1) | 0) {
                            if ((b.and(n.getItem(j))).ne(System.UInt64(0))) {
                                m = (m + (1 << j)) | 0;
                            }
                        }

                        v.add(m);
                    }

                    return v;
                },
                ToBitVector: function (w) {
                    var v = System.Linq.Enumerable.from(w).toList(System.Int32);
                    var n = new (System.Collections.Generic.List$1(System.UInt64))();
                    while (true) {
                        var m = System.UInt64(0);
                        var zero = true;
                        for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                            if (v.getItem(i) !== 0) {
                                zero = false;
                            }

                            if ((v.getItem(i) & 1) !== 0) {
                                m = m.or(System.UInt64(1).shl(i));
                            }

                            v.setItem(i, v.getItem(i) >> 1);
                        }

                        n.add(m);

                        if (zero) {
                            break;
                        }
                    }

                    return n;
                },
                Increment: function (n, m) {
                    var i = 0;
                    while (m.ne(System.UInt64(0))) {
                        var t1 = m.and(n.getItem(i));
                        var t2 = m.xor(n.getItem(i));

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Decrement: function (n, m) {
                    var i = 0;
                    while (m.ne(System.UInt64(0))) {
                        var t1 = m.and(n.getItem(i).not());
                        var t2 = m.xor(n.getItem(i));

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Zeroes: function (n) {
                    var m = System.UInt64(0);
                    for (var i = 0; i < n.Count; i = (i + 1) | 0) {
                        m = m.or(n.getItem(i));
                    }

                    return m.not();
                },
                GreaterThan: function (n, k) {
                    var a = System.UInt64(0);
                    var b = System.UInt64(0);
                    for (var i = (Math.max(n.Count, k.Count) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (i >= k.Count) {
                            a = a.or(n.getItem(i));
                        } else {
                            if (i >= n.Count) {
                                b = b.or(k.getItem(i));
                            } else {
                                a = a.or(b.not().and(n.getItem(i)).and(k.getItem(i).not()));
                                b = b.or(a.not().and(n.getItem(i).not()).and(k.getItem(i)));
                            }
                        }
                    }

                    return a.and(b.not());
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitVectors_ushort", {
        statics: {
            methods: {
                FromBitVector: function (n) {
                    var v = new (System.Collections.Generic.List$1(System.Int32))(16);
                    for (var i = 0; i < 16; i = (i + 1) | 0) {
                        var b = (1 << i) & 65535;
                        var m = 0;
                        for (var j = 0; j < n.Count; j = (j + 1) | 0) {
                            if ((b & n.getItem(j)) !== 0) {
                                m = (m + (1 << j)) | 0;
                            }
                        }

                        v.add(m);
                    }

                    return v;
                },
                ToBitVector: function (w) {
                    var v = System.Linq.Enumerable.from(w).toList(System.Int32);
                    var n = new (System.Collections.Generic.List$1(System.UInt16))();
                    while (true) {
                        var m = 0;
                        var zero = true;
                        for (var i = 0; i < v.Count; i = (i + 1) | 0) {
                            if (v.getItem(i) !== 0) {
                                zero = false;
                            }

                            if ((v.getItem(i) & 1) !== 0) {
                                m = (m | ((1 << i) & 65535)) & 65535;
                            }

                            v.setItem(i, v.getItem(i) >> 1);
                        }

                        n.add(m);

                        if (zero) {
                            break;
                        }
                    }

                    return n;
                },
                Increment: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = (m & n.getItem(i)) & 65535;
                        var t2 = (m ^ n.getItem(i)) & 65535;

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Decrement: function (n, m) {
                    var i = 0;
                    while (m !== 0) {
                        var t1 = (m & ~n.getItem(i)) & 65535;
                        var t2 = (m ^ n.getItem(i)) & 65535;

                        m = t1;
                        n.setItem(i, t2);

                        i = (i + 1) | 0;
                    }
                },
                Zeroes: function (n) {
                    var m = 0;
                    for (var i = 0; i < n.Count; i = (i + 1) | 0) {
                        m = (m | n.getItem(i)) & 65535;
                    }

                    return ((~m) & 65535);
                },
                GreaterThan: function (n, k) {
                    var a = 0;
                    var b = 0;
                    for (var i = (Math.max(n.Count, k.Count) - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (i >= k.Count) {
                            a = (a | n.getItem(i)) & 65535;
                        } else {
                            if (i >= n.Count) {
                                b = (b | k.getItem(i)) & 65535;
                            } else {
                                a = (a | ((~b & n.getItem(i) & ~k.getItem(i)) & 65535)) & 65535;
                                b = (b | ((~a & ~n.getItem(i) & k.getItem(i)) & 65535)) & 65535;
                            }
                        }
                    }

                    return ((a & ~b) & 65535);
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.GraphChoosability_long", {
        statics: {
            methods: {
                IsFChoosable: function (graph, f, badAssignment) {
                    var $step = 0,
                        $jumpFromFinally, 
                        liveVertexBits, 
                        sizes, 
                        maxListSize, 
                        potSize, 
                        $t, 
                        colorGraph, 
                        xx, 
                        i, 
                        i1, 
                        j, 
                        $t1, 
                        color, 
                        $t2, 
                        v, 
                        list, 
                        bit, 
                        i2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,18,20,21,22,23,24,25,27,28,30,31], $step);
                                switch ($step) {
                                    case 0: {
                                        badAssignment.v = null;

                                        liveVertexBits = BitLevelGeneration.BitUsage_long.To_long(System.Linq.Enumerable.range(0, graph.BitLevelGeneration$IGraph_long$N));
                                        sizes = System.Linq.Enumerable.from(graph.BitLevelGeneration$IGraph_long$Vertices).select(function (v) {
                                            return f(v);
                                        }).toList(System.Int32);
                                        maxListSize = System.Linq.Enumerable.from(sizes).max();

                                        potSize = maxListSize;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( potSize < graph.BitLevelGeneration$IGraph_long$N ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 31;
                                        continue;
                                    }
                                    case 2: {
                                        $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_long.Enumerate(sizes, potSize), System.Array.type(System.Int64));
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                            colorGraph = $t.Current;
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 29;
                                        continue;
                                    }
                                    case 4: {
                                        if (potSize > maxListSize) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 27;
                                        continue;
                                    }
                                    case 5: {
                                        xx = System.Int64(0);
                                        i = 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if ( i < colorGraph.length ) {
                                            $step = 7;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 7: {
                                        xx = xx.or(colorGraph[System.Array.index(i, colorGraph)]);

                                        if (BitLevelGeneration.BitUsage_long.PopulationCount(xx) <= ((i + 1) | 0)) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 9;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 28;
                                        continue;
                                    }

                                    case 10: {
                                        i = (i + 1) | 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 11: {
                                        i1 = 0;
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        if ( i1 < colorGraph.length ) {
                                            $step = 13;
                                            continue;
                                        }
                                        $step = 21;
                                        continue;
                                    }
                                    case 13: {
                                        j = (i1 + 1) | 0;
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {
                                        if ( j < colorGraph.length ) {
                                            $step = 15;
                                            continue;
                                        }
                                        $step = 19;
                                        continue;
                                    }
                                    case 15: {
                                        if ((colorGraph[System.Array.index(i1, colorGraph)].and(colorGraph[System.Array.index(j, colorGraph)])).equals(System.Int64(0))) {
                                            $step = 16;
                                            continue;
                                        } 
                                        $step = 17;
                                        continue;
                                    }
                                    case 16: {
                                        $step = 28;
                                        continue;
                                    }

                                    case 18: {
                                        j = (j + 1) | 0;
                                        $step = 14;
                                        continue;
                                    }

                                    case 20: {
                                        i1 = (i1 + 1) | 0;
                                        $step = 12;
                                        continue;
                                    }
                                    case 21: {
                                        $t1 = Bridge.getEnumerator(colorGraph);
                                        $step = 22;
                                        continue;
                                    }
                                    case 22: {
                                        if ($t1.moveNext()) {
                                            color = $t1.Current;
                                            $step = 23;
                                            continue;
                                        }
                                        $step = 26;
                                        continue;
                                    }
                                    case 23: {
                                        if (graph.BitLevelGeneration$IGraph_long$IsIndependent(color)) {
                                            $step = 24;
                                            continue;
                                        } 
                                        $step = 25;
                                        continue;
                                    }
                                    case 24: {
                                        $step = 28;
                                        continue;
                                    }
                                    case 25: {
                                        $step = 22;
                                        continue;
                                    }

                                    case 27: {
                                        if (!BitLevelGeneration.GraphChoosability_long.IsChoosable$2(graph, colorGraph, liveVertexBits, System.Int64(0))) {
                                            badAssignment.v = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                                            $t2 = Bridge.getEnumerator(graph.BitLevelGeneration$IGraph_long$Vertices, System.Int32);
                                            try {
                                                while ($t2.moveNext()) {
                                                    v = $t2.Current;
                                                    list = new (System.Collections.Generic.List$1(System.Int32))();
                                                    bit = System.Int64(1).shl(v);
                                                    for (i2 = 0; i2 < colorGraph.length; i2 = (i2 + 1) | 0) {
                                                        if ((bit.and(colorGraph[System.Array.index(i2, colorGraph)])).ne(System.Int64(0))) {
                                                            list.add(i2);
                                                        }
                                                    }

                                                    badAssignment.v.add(list);
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$dispose();
                                                }
                                            }
                                            return false;
                                        }
                                    }
                                    case 28: {
                                        ;
                                        $step = 3;
                                        continue;
                                    }

                                    case 30: {
                                        potSize = (potSize + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 31: {
                                        return true;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    return $asyncBody();
                },
                IsChoosable: function (graph, colorGraph) {
                    return BitLevelGeneration.GraphChoosability_long.IsChoosable$2(graph, colorGraph, BitLevelGeneration.BitUsage_long.To_long(System.Linq.Enumerable.range(0, graph.BitLevelGeneration$IGraph_long$N)), System.Int64(0));
                },
                IsChoosable$1: function (graph, colorGraph, subset) {
                    return BitLevelGeneration.GraphChoosability_long.IsChoosable$2(graph, colorGraph, subset, System.Int64(0));
                },
                IsChoosable$2: function (graph, colorGraph, liveVertexBits, c) {
                    var $t;
                    liveVertexBits = {v:liveVertexBits};
                    BitLevelGeneration.GraphChoosability_long.BeGreedy(graph, colorGraph, liveVertexBits, c);
                    if (liveVertexBits.v.equals(System.Int64(0))) {
                        return true;
                    }
                    if ((liveVertexBits.v.and(BitLevelGeneration.BitUsage_long.Or(colorGraph, c).not())).ne(System.Int64(0))) {
                        return false;
                    }

                    var choosable = false;
                    var V = colorGraph[System.Array.index(c, colorGraph)].and(liveVertexBits.v);
                    $t = Bridge.getEnumerator(graph.BitLevelGeneration$IGraph_long$MaximalIndependentSubsets(V), System.Int64);
                    try {
                        while ($t.moveNext()) {
                            var C = $t.Current;
                            if (BitLevelGeneration.GraphChoosability_long.IsChoosable$2(graph, colorGraph, liveVertexBits.v.xor(C), System.Int64(c + 1))) {
                                choosable = true;
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return choosable;
                },
                BeGreedy: function (graph, colorGraph, liveVertexBits, c) {
                    while (true) {
                        var originalBits = liveVertexBits.v;
                        var bits = liveVertexBits.v;
                        while (bits.ne(System.Int64(0))) {
                            var bit = bits.and(bits.neg());
                            bits = bits.xor(bit);

                            var colorCount = 0;
                            for (var i = c; i < colorGraph.length; i = (i + 1) | 0) {
                                if ((bit.and(colorGraph[System.Array.index(i, colorGraph)])).ne(System.Int64(0))) {
                                    colorCount = (colorCount + 1) | 0;
                                }
                            }

                            if (colorCount > graph.BitLevelGeneration$IGraph_long$DegreeInSet(BitLevelGeneration.BitUsage_long.Extract(bit), liveVertexBits.v)) {
                                liveVertexBits.v = liveVertexBits.v.xor(bit);
                            }
                        }

                        if (liveVertexBits.v.equals(originalBits)) {
                            break;
                        }
                    }
                },
                IsSubsetTwoColorable: function (g, set) {
                    var c = System.Array.init(g.N, 0, System.Int32);
                    var q = System.Array.init(g.N, 0, System.Int32);

                    var leftover = set;
                    var s = 0;
                    while (leftover.ne(System.Int64(0))) {
                        var r = BitLevelGeneration.BitUsage_long.LeastSignificantBit(leftover);
                        q[System.Array.index(s, q)] = r;
                        c[System.Array.index(r, c)] = 1;
                        var e = s;

                        while (s <= e) {
                            var v = q[System.Array.index(Bridge.identity(s, (s = (s + 1) | 0)), q)];
                            var n = g.NeighborsInSet(v, set);

                            while (n.ne(System.Int64(0))) {
                                var bit = n.and(n.neg());
                                var w = BitLevelGeneration.BitUsage_long.Extract(bit);

                                if (c[System.Array.index(w, c)] === 0) {
                                    q[System.Array.index(((e = (e + 1) | 0)), q)] = w;
                                    c[System.Array.index(w, c)] = (3 - c[System.Array.index(v, c)]) | 0;
                                } else if (c[System.Array.index(w, c)] !== ((3 - c[System.Array.index(v, c)]) | 0)) {
                                    return false;
                                }

                                n = n.xor(bit);
                            }

                            leftover = leftover.xor((System.Int64(1).shl(v)));
                        }
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.GraphChoosability_uint", {
        statics: {
            methods: {
                IsFChoosable: function (graph, f, badAssignment) {
                    var nodesVisited = { }, cacheHits = { };
                    return BitLevelGeneration.GraphChoosability_uint.IsFChoosable$1(graph, f, badAssignment, nodesVisited, cacheHits);
                },
                IsFChoosable$1: function (graph, f, badAssignment, nodesVisited, cacheHits) {
                    var $step = 0,
                        $jumpFromFinally, 
                        liveVertexBits, 
                        sizes, 
                        maxListSize, 
                        potSize, 
                        cache, 
                        $t, 
                        colorGraph, 
                        xx, 
                        i, 
                        i1, 
                        j, 
                        $t1, 
                        color, 
                        $t2, 
                        v, 
                        list, 
                        bit, 
                        i2, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,18,20,21,22,23,24,25,27,28,30,31], $step);
                                switch ($step) {
                                    case 0: {
                                        badAssignment.v = null;

                                        nodesVisited.v = System.Int64(0);
                                        cacheHits.v = System.Int64(0);
                                        liveVertexBits = BitLevelGeneration.BitUsage_uint.To_uint(System.Linq.Enumerable.range(0, graph.BitLevelGeneration$IGraph_uint$N));
                                        sizes = System.Linq.Enumerable.from(graph.BitLevelGeneration$IGraph_uint$Vertices).select(function (v) {
                                            return f(v);
                                        }).toList(System.Int32);
                                        maxListSize = System.Linq.Enumerable.from(sizes).max();

                                        potSize = maxListSize;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( potSize < graph.BitLevelGeneration$IGraph_uint$N ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 31;
                                        continue;
                                    }
                                    case 2: {
                                        //var cache = new Dictionary<BitLevelGeneration.HashedAssignment_uint, bool>();
                                        cache = null;

                                        $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_uint.Enumerate(sizes, potSize), System.Array.type(System.UInt32));
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                            colorGraph = $t.Current;
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 29;
                                        continue;
                                    }
                                    case 4: {
                                        if (potSize > maxListSize) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 27;
                                        continue;
                                    }
                                    case 5: {
                                        xx = 0;
                                        i = 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if ( i < colorGraph.length ) {
                                            $step = 7;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 7: {
                                        xx = (xx | colorGraph[System.Array.index(i, colorGraph)]) >>> 0;

                                        if (BitLevelGeneration.BitUsage_uint.PopulationCount(xx) <= ((i + 1) | 0)) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 9;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 28;
                                        continue;
                                    }

                                    case 10: {
                                        i = (i + 1) | 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 11: {
                                        i1 = 0;
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        if ( i1 < colorGraph.length ) {
                                            $step = 13;
                                            continue;
                                        }
                                        $step = 21;
                                        continue;
                                    }
                                    case 13: {
                                        j = (i1 + 1) | 0;
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {
                                        if ( j < colorGraph.length ) {
                                            $step = 15;
                                            continue;
                                        }
                                        $step = 19;
                                        continue;
                                    }
                                    case 15: {
                                        if ((((colorGraph[System.Array.index(i1, colorGraph)] & colorGraph[System.Array.index(j, colorGraph)]) >>> 0)) === 0) {
                                            $step = 16;
                                            continue;
                                        } 
                                        $step = 17;
                                        continue;
                                    }
                                    case 16: {
                                        $step = 28;
                                        continue;
                                    }

                                    case 18: {
                                        j = (j + 1) | 0;
                                        $step = 14;
                                        continue;
                                    }

                                    case 20: {
                                        i1 = (i1 + 1) | 0;
                                        $step = 12;
                                        continue;
                                    }
                                    case 21: {
                                        $t1 = Bridge.getEnumerator(colorGraph);
                                        $step = 22;
                                        continue;
                                    }
                                    case 22: {
                                        if ($t1.moveNext()) {
                                            color = $t1.Current;
                                            $step = 23;
                                            continue;
                                        }
                                        $step = 26;
                                        continue;
                                    }
                                    case 23: {
                                        if (graph.BitLevelGeneration$IGraph_uint$IsIndependent(color)) {
                                            $step = 24;
                                            continue;
                                        } 
                                        $step = 25;
                                        continue;
                                    }
                                    case 24: {
                                        $step = 28;
                                        continue;
                                    }
                                    case 25: {
                                        $step = 22;
                                        continue;
                                    }

                                    case 27: {
                                        if (!BitLevelGeneration.GraphChoosability_uint.IsChoosable$2(graph, colorGraph, liveVertexBits, 0, cache, nodesVisited, cacheHits)) {
                                            badAssignment.v = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                                            $t2 = Bridge.getEnumerator(graph.BitLevelGeneration$IGraph_uint$Vertices, System.Int32);
                                            try {
                                                while ($t2.moveNext()) {
                                                    v = $t2.Current;
                                                    list = new (System.Collections.Generic.List$1(System.Int32))();
                                                    bit = (1 << v) >>> 0;
                                                    for (i2 = 0; i2 < colorGraph.length; i2 = (i2 + 1) | 0) {
                                                        if ((((bit & colorGraph[System.Array.index(i2, colorGraph)]) >>> 0)) !== 0) {
                                                            list.add(i2);
                                                        }
                                                    }

                                                    badAssignment.v.add(list);
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$dispose();
                                                }
                                            }
                                            return false;
                                        }
                                    }
                                    case 28: {
                                        ;
                                        $step = 3;
                                        continue;
                                    }

                                    case 30: {
                                        potSize = (potSize + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 31: {
                                        return true;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    return $asyncBody();
                },
                IsChoosable: function (graph, colorGraph) {
                    var nodesVisited = { }, cacheHits = { };
                    return BitLevelGeneration.GraphChoosability_uint.IsChoosable$1(graph, colorGraph, nodesVisited, cacheHits);
                },
                IsChoosable$1: function (graph, colorGraph, nodesVisited, cacheHits) {
                    nodesVisited.v = System.Int64(0);
                    cacheHits.v = System.Int64(0);
                    //var cache = new Dictionary<BitLevelGeneration.HashedAssignment_uint, bool>();
                    var cache = null;

                    return BitLevelGeneration.GraphChoosability_uint.IsChoosable$2(graph, colorGraph, BitLevelGeneration.BitUsage_uint.To_uint(System.Linq.Enumerable.range(0, graph.BitLevelGeneration$IGraph_uint$N)), 0, cache, nodesVisited, cacheHits);
                },
                IsChoosable$2: function (graph, colorGraph, liveVertexBits, c, cache, nodesVisited, cacheHits) {
                    var $t;
                    liveVertexBits = {v:liveVertexBits};
                    nodesVisited.v = nodesVisited.v.inc();

                    BitLevelGeneration.GraphChoosability_uint.BeGreedy(graph, colorGraph, liveVertexBits, c);
                    if (liveVertexBits.v === 0) {
                        return true;
                    }
                    if ((((liveVertexBits.v & ~BitLevelGeneration.BitUsage_uint.Or(colorGraph, c)) >>> 0)) !== 0) {
                        return false;
                    }

                    //bool cachedResult;
                    //var key = new BitLevelGeneration.HashedAssignment_uint(colorGraph, c, liveVertexBits);
                    //if (cache.TryGetValue(key, out cachedResult))
                    //{
                    //    cacheHits++;
                    //    return cachedResult;
                    //}

                    var choosable = false;
                    var V = (colorGraph[System.Array.index(c, colorGraph)] & liveVertexBits.v) >>> 0;
                    $t = Bridge.getEnumerator(graph.BitLevelGeneration$IGraph_uint$MaximalIndependentSubsets(V), System.UInt32);
                    try {
                        while ($t.moveNext()) {
                            var C = $t.Current;
                            if (BitLevelGeneration.GraphChoosability_uint.IsChoosable$2(graph, colorGraph, ((liveVertexBits.v ^ C) >>> 0), ((c + 1) | 0), cache, nodesVisited, cacheHits)) {
                                choosable = true;
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    //cache[key] = choosable;
                    return choosable;
                },
                BeGreedy: function (graph, colorGraph, liveVertexBits, c) {
                    while (true) {
                        var originalBits = liveVertexBits.v;
                        var bits = liveVertexBits.v;
                        while (bits !== 0) {
                            var bit = (bits & (((~bits + 1) >>> 0))) >>> 0;
                            bits = (bits ^ bit) >>> 0;

                            var colorCount = 0;
                            for (var i = c; i < colorGraph.length; i = (i + 1) | 0) {
                                if ((((bit & colorGraph[System.Array.index(i, colorGraph)]) >>> 0)) !== 0) {
                                    colorCount = (colorCount + 1) | 0;
                                }
                            }

                            if (colorCount > graph.BitLevelGeneration$IGraph_uint$DegreeInSet(BitLevelGeneration.BitUsage_uint.Extract(bit), liveVertexBits.v)) {
                                liveVertexBits.v = (liveVertexBits.v ^ bit) >>> 0;
                            }
                        }

                        if (liveVertexBits.v === originalBits) {
                            break;
                        }
                    }
                }
            }
        }
    });

    Bridge.define("BitLevelGeneration.HashedAssignment_byte", {
        fields: {
            _assignment: null,
            _length: 0,
            _hashCode: 0
        },
        ctors: {
            ctor: function (assignment, index, on) {
                this.$initialize();
                this._assignment = System.Array.init(((assignment.length - index) | 0), 0, System.Byte);
                this._length = 0;

                for (var i = index; i < assignment.length; i = (i + 1) | 0) {
                    var x = (assignment[System.Array.index(i, assignment)] & on) & 255;
                    if (x !== 0) {
                        this._assignment[System.Array.index(this._length, this._assignment)] = x;
                        this._length = (this._length + 1) | 0;
                    }
                }

                System.Array.sort(this._assignment, 0, this._length);

                this._hashCode = this.Hash(this._assignment, this._length);
            }
        },
        methods: {
            Hash: function (list, length) {
                var hash = System.UInt64(5381);
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    hash = System.UInt64(list[System.Array.index(i, list)]).add((hash.shl(5))).add(hash);
                }

                return System.Int64.clip32(hash);
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, BitLevelGeneration.HashedAssignment_byte));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._assignment[System.Array.index(i, this._assignment)] !== other._assignment[System.Array.index(i, other._assignment)]) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            }
        }
    });

    Bridge.define("BitLevelGeneration.HashedAssignment_uint", {
        fields: {
            _assignment: null,
            _length: 0,
            _hashCode: 0
        },
        ctors: {
            ctor: function (assignment, index, on) {
                this.$initialize();
                this._assignment = System.Array.init(((assignment.length - index) | 0), 0, System.UInt32);
                this._length = 0;

                for (var i = index; i < assignment.length; i = (i + 1) | 0) {
                    var x = ((assignment[System.Array.index(i, assignment)] & on) >>> 0);
                    if (x !== 0) {
                        this._assignment[System.Array.index(this._length, this._assignment)] = x;
                        this._length = (this._length + 1) | 0;
                    }
                }

                System.Array.sort(this._assignment, 0, this._length);

                this._hashCode = this.Hash(this._assignment, this._length);
            }
        },
        methods: {
            Hash: function (list, length) {
                var hash = System.UInt64(5381);
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    hash = System.UInt64(list[System.Array.index(i, list)]).add((hash.shl(5))).add(hash);
                }

                return System.Int64.clip32(hash);
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, BitLevelGeneration.HashedAssignment_uint));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._assignment[System.Array.index(i, this._assignment)] !== other._assignment[System.Array.index(i, other._assignment)]) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            }
        }
    });

    Bridge.define("BitLevelGeneration.HashedAssignment_ulong", {
        fields: {
            _assignment: null,
            _length: 0,
            _hashCode: 0
        },
        ctors: {
            ctor: function (assignment, index, on) {
                this.$initialize();
                this._assignment = System.Array.init(((assignment.length - index) | 0), System.UInt64(0), System.UInt64);
                this._length = 0;

                for (var i = index; i < assignment.length; i = (i + 1) | 0) {
                    var x = assignment[System.Array.index(i, assignment)].and(on);
                    if (x.ne(System.UInt64(0))) {
                        this._assignment[System.Array.index(this._length, this._assignment)] = x;
                        this._length = (this._length + 1) | 0;
                    }
                }

                System.Array.sort(this._assignment, 0, this._length);

                this._hashCode = this.Hash(this._assignment, this._length);
            }
        },
        methods: {
            Hash: function (list, length) {
                var hash = System.UInt64(5381);
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    hash = list[System.Array.index(i, list)].add((hash.shl(5))).add(hash);
                }

                return System.Int64.clip32(hash);
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, BitLevelGeneration.HashedAssignment_ulong));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._assignment[System.Array.index(i, this._assignment)].ne(other._assignment[System.Array.index(i, other._assignment)])) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            }
        }
    });

    Bridge.define("BitLevelGeneration.HashedAssignment_ushort", {
        fields: {
            _assignment: null,
            _length: 0,
            _hashCode: 0
        },
        ctors: {
            ctor: function (assignment, index, on) {
                this.$initialize();
                this._assignment = System.Array.init(((assignment.length - index) | 0), 0, System.UInt16);
                this._length = 0;

                for (var i = index; i < assignment.length; i = (i + 1) | 0) {
                    var x = (assignment[System.Array.index(i, assignment)] & on) & 65535;
                    if (x !== 0) {
                        this._assignment[System.Array.index(this._length, this._assignment)] = x;
                        this._length = (this._length + 1) | 0;
                    }
                }

                System.Array.sort(this._assignment, 0, this._length);

                this._hashCode = this.Hash(this._assignment, this._length);
            }
        },
        methods: {
            Hash: function (list, length) {
                var hash = System.UInt64(5381);
                for (var i = 0; i < length; i = (i + 1) | 0) {
                    hash = System.UInt64(list[System.Array.index(i, list)]).add((hash.shl(5))).add(hash);
                }

                return System.Int64.clip32(hash);
            },
            equals: function (obj) {
                return this.Equals(Bridge.as(obj, BitLevelGeneration.HashedAssignment_ushort));
            },
            Equals: function (other) {
                if (other == null || this._length !== other._length) {
                    return false;
                }

                for (var i = 0; i < this._length; i = (i + 1) | 0) {
                    if (this._assignment[System.Array.index(i, this._assignment)] !== other._assignment[System.Array.index(i, other._assignment)]) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                return this._hashCode;
            }
        }
    });

    Bridge.define("BitLevelGeneration.MaximalndependentSetSearching", {
        statics: {
            methods: {
                GenerateMaximalIndependentSubsets: function (g, set) {
                    var d = System.Array.init(64, 0, System.Int32);

                    var n = BitLevelGeneration.BitUsage_long.PopulationCountDense(set);
                    var D = System.Array.init(n, System.Int64(0), System.Int64);

                    var q = set;
                    while (q.ne(System.Int64(0))) {
                        var bit = q.and(q.neg());
                        var v = BitLevelGeneration.BitUsage_long.Extract(bit);

                        d[System.Array.index(v, d)] = g.DegreeInSet(v, set);
                        D[System.Array.index(d[System.Array.index(v, d)], D)] = D[System.Array.index(d[System.Array.index(v, d)], D)].or(bit);

                        q = q.xor(bit);
                    }

                    var bits = System.Array.init(n, System.Int64(0), System.Int64);
                    for (var i = 0; i < n; i = (i + 1) | 0) {
                        for (var j = 0; j < n; j = (j + 1) | 0) {
                            if (D[System.Array.index(j, D)].ne(System.Int64(0))) {
                                var bit1 = D[System.Array.index(j, D)].and(D[System.Array.index(j, D)].neg());
                                bits[System.Array.index(((((n - 1) | 0) - i) | 0), bits)] = bit1;

                                var v1 = BitLevelGeneration.BitUsage_long.Extract(bit1);
                                q = g.NeighborsInSet(v1, set);

                                while (q.ne(System.Int64(0))) {
                                    var b = q.and(q.neg());
                                    var x = BitLevelGeneration.BitUsage_long.Extract(b);

                                    D[System.Array.index(d[System.Array.index(x, d)], D)] = D[System.Array.index(d[System.Array.index(x, d)], D)].xor(b);
                                    d[System.Array.index(x, d)] = (d[System.Array.index(x, d)] - 1) | 0;
                                    D[System.Array.index(d[System.Array.index(x, d)], D)] = D[System.Array.index(d[System.Array.index(x, d)], D)].or(b);

                                    q = q.xor(b);
                                }

                                set = set.xor(bit1);
                                D[System.Array.index(j, D)] = D[System.Array.index(j, D)].xor(bit1);
                                break;
                            }
                        }
                    }

                    return BitLevelGeneration.MaximalndependentSetSearching.GenerateMaximalIndependentSubsets$1(g, bits);
                },
                GenerateMaximalIndependentSubsets$1: function (g, bits) {
                    var $step = 0,
                        $jumpFromFinally, 
                        mis, 
                        earlier, 
                        j, 
                        bit, 
                        v, 
                        count, 
                        i, 
                        m, 
                        N, 
                        mp, 
                        mpp, 
                        q, 
                        l, 
                        b, 
                        w, 
                        qq, 
                        bb, 
                        z, 
                        X, 
                        b1, 
                        w1, 
                        Z, 
                        mm, 
                        b2, 
                        w2, 
                        qq1, 
                        bb1, 
                        z1, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34], $step);
                                switch ($step) {
                                    case 0: {
                                        mis = new (System.Collections.Generic.List$1(System.Int64))(8);
                                        mis.add(System.Int64(0));

                                        earlier = System.Int64(0);
                                        j = 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( j < bits.length ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 34;
                                        continue;
                                    }
                                    case 2: {
                                        bit = bits[System.Array.index(j, bits)];
                                        v = BitLevelGeneration.BitUsage_long.Extract(bit);

                                        count = mis.Count;
                                        i = 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if ( i < count ) {
                                            $step = 4;
                                            continue;
                                        }
                                        $step = 32;
                                        continue;
                                    }
                                    case 4: {
                                        m = mis.getItem(i);
                                        N = g.NeighborsInSet(v, m);
                                        if (N.equals(System.Int64(0))) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        mis.setItem(i, mis.getItem(i).or(bit));
                                        $step = 30;
                                        continue;
                                    }
                                    case 6: {
                                        mp = m.and(N.not());
                                        mpp = mp.or(bit);
                                        q = N;
                                        l = earlier.and(mpp.not());

                                        
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if ( q.ne(System.Int64(0)) ) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 8: {
                                        b = q.and(q.neg());
                                        w = BitLevelGeneration.BitUsage_long.Extract(b);

                                        qq = g.NeighborsInSet(w, l);
                                        
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        if ( qq.ne(System.Int64(0)) ) {
                                            $step = 10;
                                            continue;
                                        } 
                                        $step = 13;
                                        continue;
                                    }
                                    case 10: {
                                        bb = qq.and(qq.neg());
                                        z = BitLevelGeneration.BitUsage_long.Extract(bb);

                                        if (g.NeighborsInSet(z, mpp).equals(System.Int64(0))) {
                                            $step = 11;
                                            continue;
                                        } 
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        $step = 29;
                                        continue;
                                    }
                                    case 12: {
                                        qq = qq.xor(bb);

                                        $step = 9;
                                        continue;
                                    }
                                    case 13: {
                                        q = q.xor(b);

                                        $step = 7;
                                        continue;
                                    }
                                    case 14: {
                                        X = g.NeighborsInSet(v, earlier);
                                        q = X.and(N.not());

                                        while (q.ne(System.Int64(0))) {
                                            b1 = q.and(q.neg());
                                            w1 = BitLevelGeneration.BitUsage_long.Extract(b1);

                                            if (g.NeighborsInSet(w1, mp).ne(System.Int64(0))) {
                                                X = X.xor(b1);
                                            }
                                            q = q.xor(b1);
                                        }

                                        if (X.ne(N)) {
                                            $step = 15;
                                            continue;
                                        } 
                                        $step = 28;
                                        continue;
                                    }
                                    case 15: {
                                        Z = System.Int64(0);
                                        
                                        $step = 16;
                                        continue;
                                    }
                                    case 16: {
                                        if ( Z.lt(N) ) {
                                            $step = 17;
                                            continue;
                                        } 
                                        $step = 27;
                                        continue;
                                    }
                                    case 17: {
                                        Z = (Z.sub(X)).and(X);

                                        if ((Z.and(N)).equals(Z)) {
                                            $step = 16;
                                            continue;
                                        }

                                        if (!g.IsIndependent(Z)) {
                                            $step = 16;
                                            continue;
                                        }

                                        mm = mp.or(Z);
                                        l = earlier.and(mm.not());
                                        q = N.and(Z.not());

                                        
                                        $step = 18;
                                        continue;
                                    }
                                    case 18: {
                                        if ( q.ne(System.Int64(0)) ) {
                                            $step = 19;
                                            continue;
                                        } 
                                        $step = 25;
                                        continue;
                                    }
                                    case 19: {
                                        b2 = q.and(q.neg());
                                        w2 = BitLevelGeneration.BitUsage_long.Extract(b2);

                                        qq1 = g.NeighborsInSet(w2, l);
                                        
                                        $step = 20;
                                        continue;
                                    }
                                    case 20: {
                                        if ( qq1.ne(System.Int64(0)) ) {
                                            $step = 21;
                                            continue;
                                        } 
                                        $step = 24;
                                        continue;
                                    }
                                    case 21: {
                                        bb1 = qq1.and(qq1.neg());
                                        z1 = BitLevelGeneration.BitUsage_long.Extract(bb1);

                                        if (g.NeighborsInSet(z1, mm).equals(System.Int64(0))) {
                                            $step = 22;
                                            continue;
                                        } 
                                        $step = 23;
                                        continue;
                                    }
                                    case 22: {
                                        $step = 26;
                                        continue;
                                    }
                                    case 23: {
                                        qq1 = qq1.xor(bb1);

                                        $step = 20;
                                        continue;
                                    }
                                    case 24: {
                                        q = q.xor(b2);

                                        $step = 18;
                                        continue;
                                    }
                                    case 25: {
                                        $step = 29;
                                        continue;
                                    }
                                    case 26: {
                                        ;

                                        $step = 16;
                                        continue;
                                    }

                                    case 28: {
                                        mis.add((m.or(bit)).and(N.not()));
                                    }
                                    case 29: {
                                        ;
                                        $step = 30;
                                        continue;
                                    }

                                    case 31: {
                                        i = (i + 1) | 0;
                                        $step = 3;
                                        continue;
                                    }
                                    case 32: {
                                        earlier = earlier.or(bit);
                                        $step = 33;
                                        continue;
                                    }
                                    case 33: {
                                        j = (j + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 34: {
                                        return mis;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        }, arguments);

                    return $asyncBody();
                },
                LexicographicallyFirstContaining: function (g, set, S) {
                    set = set.xor(S);
                    while (set.ne(System.Int64(0))) {
                        var bit = set.and(set.neg());
                        var v = BitLevelGeneration.BitUsage_long.Extract(bit);

                        if (g.NeighborsInSet(v, S).equals(System.Int64(0))) {
                            S = S.or(bit);
                        }

                        set = set.xor(bit);
                    }

                    return S;
                },
                Parent: function (g, set, LFMIS, S) {
                    var a = LFMIS.and(S.not());
                    var bit = a.and(a.neg());
                    var v = BitLevelGeneration.BitUsage_long.Extract(bit);
                    var N = g.NeighborsInSet(v, S);

                    return BitLevelGeneration.MaximalndependentSetSearching.LexicographicallyFirstContaining(g, set, (S.or(bit)).xor(N));
                },
                Later: function (g, set, LFMIS, v) {
                    var q = g.NeighborsInSet(v, set.xor(LFMIS));

                    var earlier = ((System.Int64(1).shl(v)).sub(System.Int64(1))).and(LFMIS);
                    var later = System.Int64(0);
                    while (set.ne(System.Int64(0))) {
                        var bit = q.and(q.neg());
                        var w = BitLevelGeneration.BitUsage_long.Extract(bit);

                        if (g.NeighborsInSet(w, earlier).equals(System.Int64(0))) {
                            later = later.or(bit);
                        }

                        q = q.xor(bit);
                    }

                    return later;
                }
            }
        }
    });

    Bridge.define("GraphicsLayer.ARGB", {
        statics: {
            methods: {
                BasicPalette: function (q) {
                    if (q === -1) {
                        return new GraphicsLayer.ARGB.ctor(255, 255, 255);
                    }

                    return GraphicsLayer.ARGB.FromHSL(0.6 + GraphicsLayer.ARGB.ReverseBits((q >>> 0)) / Math.pow(2.0, 32), 1.0, 0.65);
                },
                FromFractional: function (a, r, g, b) {
                    return new GraphicsLayer.ARGB.$ctor1(Bridge.Int.clip32(a * 255), Bridge.Int.clip32(r * 255), Bridge.Int.clip32(g * 255), Bridge.Int.clip32(b * 255));
                },
                FromHSL: function (h, s, l) {
                    while (h > 1.0) {
                        h -= 1.0;
                    }
                    while (s > 1.0) {
                        s -= 1.0;
                    }
                    while (l > 1.0) {
                        l -= 1.0;
                    }

                    if (s === 0.0) {
                        return GraphicsLayer.ARGB.FromFractional(1.0, l, l, l);
                    }

                    var q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;
                    var p = 2.0 * l - q;
                    var r = GraphicsLayer.ARGB.HueToRgb(p, q, h + 0.33333333333333331);
                    var g = GraphicsLayer.ARGB.HueToRgb(p, q, h);
                    var b = GraphicsLayer.ARGB.HueToRgb(p, q, h - 0.33333333333333331);

                    return GraphicsLayer.ARGB.FromFractional(1.0, r, g, b);
                },
                HueToRgb: function (p, q, t) {
                    if (t < 0.0) {
                        t += 1.0;
                    }
                    if (t > 1.0) {
                        t -= 1.0;
                    }
                    if (t < 0.16666666666666666) {
                        return p + (q - p) * 6.0 * t;
                    }
                    if (t < 0.5) {
                        return q;
                    }
                    if (t < 0.66666666666666663) {
                        return p + (q - p) * (0.66666666666666663 - t) * 6.0;
                    }
                    return p;
                },
                ReverseBits: function (x) {
                    var y = 0;
                    for (var i = 0; i < 32; i = (i + 1) | 0) {
                        y = (y | System.Int64.clipu32((System.Int64(x).and(System.Int64((1 << i)))).shl((((31 - Bridge.Int.mul(2, i)) | 0))))) >>> 0;
                    }

                    return y;
                }
            }
        },
        props: {
            A: 0,
            R: 0,
            G: 0,
            B: 0
        },
        ctors: {
            $ctor1: function (a, r, g, b) {
                this.$initialize();
                this.A = a;
                this.R = r;
                this.G = g;
                this.B = b;
            },
            ctor: function (r, g, b) {
                GraphicsLayer.ARGB.$ctor1.call(this, 255, r, g, b);
            }
        },
        methods: {
            toString: function () {
                return System.String.format("{0},{1},{2},{3}", Bridge.box(this.A, System.Int32), Bridge.box(this.R, System.Int32), Bridge.box(this.G, System.Int32), Bridge.box(this.B, System.Int32));
            }
        }
    });

    Bridge.define("GraphicsLayer.Box", {
        statics: {
            fields: {
                Empty: null
            },
            ctors: {
                init: function () {
                    this.Empty = new GraphicsLayer.Box.ctor(0, 0);
                }
            }
        },
        props: {
            Top: 0,
            Left: 0,
            Width: 0,
            Height: 0,
            X: {
                get: function () {
                    return this.Left;
                }
            },
            Y: {
                get: function () {
                    return this.Top;
                }
            },
            Right: {
                get: function () {
                    return this.Left + this.Width;
                }
            },
            Bottom: {
                get: function () {
                    return this.Top + this.Height;
                }
            }
        },
        ctors: {
            ctor: function (left, top) {
                this.$initialize();
                this.Left = left;
                this.Top = top;
            },
            $ctor1: function (left, top, width, height) {
                this.$initialize();
                this.Left = left;
                this.Top = top;
                this.Width = width;
                this.Height = height;
            }
        },
        methods: {
            Inflate: function (x, y) {
                this.Left -= x;
                this.Top -= y;
                this.Width += 2 * x;
                this.Height += 2 * y;
            },
            Contains$1: function (x, y) {
                return this.Left <= x && x <= this.Right && this.Top <= y && y <= this.Bottom;
            },
            Contains: function (box) {
                return this.Left <= box.Left && box.Right <= this.Right && this.Top <= box.Top && box.Bottom <= this.Bottom;
            }
        }
    });

    Bridge.define("GraphicsLayer.Font", {
        props: {
            Name: null,
            Size: 0
        },
        ctors: {
            ctor: function (name, size) {
                this.$initialize();
                this.Name = name;
                this.Size = size;
            }
        }
    });

    Bridge.define("GraphicsLayer.IProduceMouseEvents", {
        $kind: "interface"
    });

    Bridge.define("GraphicsLayer.IGraphics", {
        $kind: "interface"
    });

    Bridge.define("GraphicsLayer.IPaintable", {
        $kind: "interface"
    });

    Bridge.define("GraphicsLayer.MouseButton", {
        $kind: "enum",
        statics: {
            fields: {
                Left: 0,
                Middle: 1,
                Right: 2
            }
        }
    });

    Bridge.define("Graphs.Ascii85", {
        statics: {
            fields: {
                _asciiOffset: 0
            },
            ctors: {
                init: function () {
                    this._asciiOffset = 33;
                }
            }
        },
        fields: {
            
            PrefixMark: null,
            /**
             * Suffix mark that identifies an encoded ASCII85 string, traditionally '~&gt;'
             *
             * @instance
             * @public
             * @memberof Graphs.Ascii85
             * @default ""
             * @type string
             */
            SuffixMark: null,
            /**
             * Maximum line length for encoded ASCII85 string; 
             set to zero for one unbroken line.
             *
             * @instance
             * @public
             * @memberof Graphs.Ascii85
             * @default 0
             * @type number
             */
            LineLength: 0,
            /**
             * Add the Prefix and Suffix marks when encoding, and enforce their presence for decoding
             *
             * @instance
             * @public
             * @memberof Graphs.Ascii85
             * @default false
             * @type boolean
             */
            EnforceMarks: false,
            _encodedBlock: null,
            _decodedBlock: null,
            _tuple: 0,
            _linePos: 0,
            pow85: null
        },
        ctors: {
            init: function () {
                this.PrefixMark = "";
                this.SuffixMark = "";
                this.LineLength = 0;
                this.EnforceMarks = false;
                this._encodedBlock = System.Array.init(5, 0, System.Byte);
                this._decodedBlock = System.Array.init(4, 0, System.Byte);
                this._tuple = 0;
                this._linePos = 0;
                this.pow85 = System.Array.init([
                    52200625, 
                    614125, 
                    7225, 
                    85, 
                    1
                ], System.UInt32);
            }
        },
        methods: {
            /**
             * Decodes an ASCII85 encoded string into the original binary data
             *
             * @instance
             * @public
             * @this Graphs.Ascii85
             * @memberof Graphs.Ascii85
             * @param   {string}            s    ASCII85 encoded string
             * @return  {Array.<number>}         byte array of decoded binary data
             */
            Decode: function (s) {
                var $t;
                if (this.EnforceMarks) {
                    if (!!(!System.String.startsWith(s, this.PrefixMark) | !System.String.endsWith(s, this.SuffixMark))) {
                        throw new System.Exception(System.String.concat("ASCII85 encoded data should begin with '", this.PrefixMark, "' and end with '", this.SuffixMark, "'"));
                    }
                }

                // strip prefix and suffix if present
                if (System.String.startsWith(s, this.PrefixMark)) {
                    s = s.substr(this.PrefixMark.length);
                }
                if (System.String.endsWith(s, this.SuffixMark)) {
                    s = s.substr(0, ((s.length - this.SuffixMark.length) | 0));
                }

                var ms = new (System.Collections.Generic.List$1(System.Byte))();
                var count = 0;
                var processChar = false;

                $t = Bridge.getEnumerator(s);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        switch (c) {
                            case 122: 
                                if (count !== 0) {
                                    throw new System.Exception("The character 'z' is invalid inside an ASCII85 block.");
                                }
                                this._decodedBlock[System.Array.index(0, this._decodedBlock)] = 0;
                                this._decodedBlock[System.Array.index(1, this._decodedBlock)] = 0;
                                this._decodedBlock[System.Array.index(2, this._decodedBlock)] = 0;
                                this._decodedBlock[System.Array.index(3, this._decodedBlock)] = 0;
                                ms.addRange(this._decodedBlock);
                                processChar = false;
                                break;
                            case 10: 
                            case 13: 
                            case 9: 
                            case 0: 
                            case 12: 
                            case 8: 
                                processChar = false;
                                break;
                            default: 
                                if (c < 33 || c > 117) {
                                    throw new System.Exception("Bad character '" + String.fromCharCode(c) + "' found. ASCII85 only allows characters '!' to 'u'.");
                                }
                                processChar = true;
                                break;
                        }

                        if (processChar) {
                            this._tuple = (this._tuple + (Bridge.Int.umul((((((c - Graphs.Ascii85._asciiOffset) | 0))) >>> 0), this.pow85[System.Array.index(count, this.pow85)]))) >>> 0;
                            count = (count + 1) | 0;
                            if (count === this._encodedBlock.length) {
                                this.DecodeBlock();
                                ms.addRange(this._decodedBlock);
                                this._tuple = 0;
                                count = 0;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                // if we have some bytes left over at the end..
                if (count !== 0) {
                    if (count === 1) {
                        throw new System.Exception("The last block of ASCII85 data cannot be a single byte.");
                    }
                    count = (count - 1) | 0;
                    this._tuple = (this._tuple + this.pow85[System.Array.index(count, this.pow85)]) >>> 0;
                    this.DecodeBlock$1(count);
                    for (var i = 0; i < count; i = (i + 1) | 0) {
                        ms.add(this._decodedBlock[System.Array.index(i, this._decodedBlock)]);
                    }
                }

                return ms.toArray();
            },
            /**
             * Encodes binary data into a plaintext ASCII85 format string
             *
             * @instance
             * @public
             * @this Graphs.Ascii85
             * @memberof Graphs.Ascii85
             * @param   {Array.<number>}    ba    binary data to encode
             * @return  {string}                  ASCII85 encoded string
             */
            Encode: function (ba) {
                var $t;
                var sb = new System.Text.StringBuilder("", Bridge.Int.mul(ba.length, (((Bridge.Int.div(this._encodedBlock.length, this._decodedBlock.length)) | 0))));
                this._linePos = 0;

                if (this.EnforceMarks) {
                    this.AppendString(sb, this.PrefixMark);
                }

                var count = 0;
                this._tuple = 0;
                $t = Bridge.getEnumerator(ba);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        if (count >= ((this._decodedBlock.length - 1) | 0)) {
                            this._tuple = (this._tuple | b) >>> 0;
                            if (this._tuple === 0) {
                                this.AppendChar(sb, 122);
                            } else {
                                this.EncodeBlock$1(sb);
                            }
                            this._tuple = 0;
                            count = 0;
                        } else {
                            this._tuple = (this._tuple | ((b << (((24 - (Bridge.Int.mul(count, 8))) | 0))) >>> 0)) >>> 0;
                            count = (count + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                // if we have some bytes left over at the end..
                if (count > 0) {
                    this.EncodeBlock(((count + 1) | 0), sb);
                }

                if (this.EnforceMarks) {
                    this.AppendString(sb, this.SuffixMark);
                }
                return sb.toString();
            },
            EncodeBlock$1: function (sb) {
                this.EncodeBlock(this._encodedBlock.length, sb);
            },
            EncodeBlock: function (count, sb) {
                for (var i = (this._encodedBlock.length - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    this._encodedBlock[System.Array.index(i, this._encodedBlock)] = ((((this._tuple % 85) + Graphs.Ascii85._asciiOffset) >>> 0)) & 255;
                    this._tuple = (Bridge.Int.div(this._tuple, 85)) >>> 0;
                }

                for (var i1 = 0; i1 < count; i1 = (i1 + 1) | 0) {
                    var c = this._encodedBlock[System.Array.index(i1, this._encodedBlock)];
                    this.AppendChar(sb, c);
                }

            },
            DecodeBlock: function () {
                this.DecodeBlock$1(this._decodedBlock.length);
            },
            DecodeBlock$1: function (bytes) {
                for (var i = 0; i < bytes; i = (i + 1) | 0) {
                    this._decodedBlock[System.Array.index(i, this._decodedBlock)] = (this._tuple >>> ((24 - (Bridge.Int.mul(i, 8))) | 0)) & 255;
                }
            },
            AppendString: function (sb, s) {
                if (this.LineLength > 0 && (((this._linePos + s.length) | 0) > this.LineLength)) {
                    this._linePos = 0;
                    sb.append(String.fromCharCode(13));
                    sb.append(String.fromCharCode(10));
                } else {
                    this._linePos = (this._linePos + s.length) | 0;
                }
                sb.append(s);
            },
            AppendChar: function (sb, c) {
                sb.append(String.fromCharCode(c));
                this._linePos = (this._linePos + 1) | 0;
                if (this.LineLength > 0 && (this._linePos >= this.LineLength)) {
                    this._linePos = 0;
                    sb.append(String.fromCharCode(13));
                    sb.append(String.fromCharCode(10));
                }
            }
        }
    });

    Bridge.define("Graphs.IHittable", {
        $kind: "interface"
    });

    Bridge.define("Graphs.Edge.Orientations", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Forward: 1,
                Backward: 2
            }
        }
    });

    Bridge.define("Graphs.GraphCanvas.HistoricalGraph", {
        props: {
            Graph: null,
            ViewScale: 0,
            Zoom: 0
        }
    });

    Bridge.define("Graphs.GraphCanvas.States", {
        $kind: "enum",
        statics: {
            fields: {
                Idle: 0,
                DraggingVertex: 1,
                DraggingSelectionRegion: 2,
                DraggingSelectedVertices: 3
            }
        }
    });

    Bridge.define("Graphs.PolygonContainer", {
        fields: {
            _dots: null,
            _boundingBox: null
        },
        ctors: {
            ctor: function (dots) {
                this.$initialize();
                this._dots = dots;

                var minx = System.Linq.Enumerable.from(this._dots).min($asm.$.Graphs.PolygonContainer.f1);
                var maxx = System.Linq.Enumerable.from(this._dots).max($asm.$.Graphs.PolygonContainer.f1);
                var miny = System.Linq.Enumerable.from(this._dots).min($asm.$.Graphs.PolygonContainer.f2);
                var maxy = System.Linq.Enumerable.from(this._dots).max($asm.$.Graphs.PolygonContainer.f2);

                this._boundingBox = new GraphicsLayer.Box.$ctor1(minx, miny, maxx - minx, maxy - miny);
            }
        },
        methods: {
            Contains: function (dot) {
                if (!this._boundingBox.Contains(dot)) {
                    return false;
                }

                var contains = false;
                var j = (System.Array.getCount(this._dots, GraphicsLayer.Box) - 1) | 0;

                for (var i = 0; i < System.Array.getCount(this._dots, GraphicsLayer.Box); i = (i + 1) | 0) {
                    if ((System.Array.getItem(this._dots, i, GraphicsLayer.Box).Y <= dot.Y && dot.Y < System.Array.getItem(this._dots, j, GraphicsLayer.Box).Y || System.Array.getItem(this._dots, j, GraphicsLayer.Box).Y <= dot.Y && dot.Y < System.Array.getItem(this._dots, i, GraphicsLayer.Box).Y) && dot.X < (System.Array.getItem(this._dots, j, GraphicsLayer.Box).X - System.Array.getItem(this._dots, i, GraphicsLayer.Box).X) * (dot.Y - System.Array.getItem(this._dots, i, GraphicsLayer.Box).Y) / (System.Array.getItem(this._dots, j, GraphicsLayer.Box).Y - System.Array.getItem(this._dots, i, GraphicsLayer.Box).Y) + System.Array.getItem(this._dots, i, GraphicsLayer.Box).X) {
                        contains = !contains;
                    }

                    j = i;
                }

                return contains;
            }
        }
    });

    Bridge.ns("Graphs.PolygonContainer", $asm.$);

    Bridge.apply($asm.$.Graphs.PolygonContainer, {
        f1: function (dot) {
            return dot.X;
        },
        f2: function (dot) {
            return dot.Y;
        }
    });

    Bridge.define("Graphs.SerializationEdge", {
        fields: {
            IndexV1: 0,
            IndexV2: 0,
            Orientation: 0,
            Thickness: 0,
            Multiplicity: 0,
            Style: null,
            Label: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (e, vertices) {
                this.$initialize();                var $t, $t1;

                this.IndexV1 = vertices.indexOf(e.V1);
                this.IndexV2 = vertices.indexOf(e.V2);
                this.Orientation = e.Orientation;
                this.Thickness = e.Thickness;
                this.Multiplicity = e.Multiplicity;
                this.Style = ($t = e.Style, $t != null ? $t : "");
                this.Label = ($t1 = e.Label, $t1 != null ? $t1 : "");

                if (Bridge.referenceEquals(this.Style, "")) {
                    if (this.Orientation === Graphs.Edge.Orientations.Forward) {
                        this.Style = (e.Style = "post", "post");
                    } else {
                        if (this.Orientation === Graphs.Edge.Orientations.Backward) {
                            this.Style = (e.Style = "pre", "pre");
                        }
                    }
                }
        }
    }
    });

    Bridge.define("Graphs.SerializationGraph", {
        fields: {
            Vertices: null,
            Edges: null,
            Name: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (g) {
                this.$initialize();
                this.Vertices = System.Linq.Enumerable.from(g.Vertices).select($asm.$.Graphs.SerializationGraph.f1).toList(Graphs.SerializationVertex);
                this.Edges = System.Linq.Enumerable.from(g.Edges).select(function (e) {
                        return new Graphs.SerializationEdge.$ctor1(e, g.Vertices);
                    }).toList(Graphs.SerializationEdge);
                this.Name = g.Name;
            }
        }
    });

    Bridge.ns("Graphs.SerializationGraph", $asm.$);

    Bridge.apply($asm.$.Graphs.SerializationGraph, {
        f1: function (v) {
            return new Graphs.SerializationVertex.$ctor1(v);
        }
    });

    Bridge.define("Graphs.SerializationVector", {
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (v) {
                this.$initialize();
                this.X = v.X;
                this.Y = v.Y;
            }
        }
    });

    Bridge.define("Graphs.SerializationVertex", {
        fields: {
            Location: null,
            Label: null,
            Padding: 0,
            Style: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (v) {
                this.$initialize();                var $t;

                this.Location = new Graphs.SerializationVector.$ctor1(v.Location);
                this.Label = v.Label;
                this.Padding = v.Padding;
                this.Style = ($t = v.Style, $t != null ? $t : "");
        }
    }
    });

    Bridge.define("Graphs.Utility", {
        statics: {
            methods: {
                RotateAroundPoint: function (v, center, angle) {
                    var x = center.X + (v.X - center.X) * Math.cos(angle) - (v.Y - center.Y) * Math.sin(angle);
                    var y = center.Y + (v.X - center.X) * Math.sin(angle) + (v.Y - center.Y) * Math.cos(angle);

                    return new GraphicsLayer.Box.ctor(x, y);
                },
                RotateAroundPoint$1: function (v, center, angle) {
                    var x = center.X + (v.X - center.X) * Math.cos(angle) - (v.Y - center.Y) * Math.sin(angle);
                    var y = center.Y + (v.X - center.X) * Math.sin(angle) + (v.Y - center.Y) * Math.cos(angle);

                    return new Graphs.Vector(x, y);
                },
                PolarToRectangular: function (r, theta) {
                    return new Graphs.Vector(r * Math.cos(theta), r * Math.sin(theta));
                },
                HaveIntersection: function (start1, end1, start2, end2) {
                    var denom = ((end1.X - start1.X) * (end2.Y - start2.Y)) - ((end1.Y - start1.Y) * (end2.X - start2.X));

                    if (denom === 0) {
                        return false;
                    }

                    var numer = ((start1.Y - start2.Y) * (end2.X - start2.X)) - ((start1.X - start2.X) * (end2.Y - start2.Y));
                    var r = numer / denom;
                    var numer2 = ((start1.Y - start2.Y) * (end1.X - start1.X)) - ((start1.X - start2.X) * (end1.Y - start1.Y));
                    var s = numer2 / denom;

                    if (r < 0 || r > 1 || s < 0 || s > 1) {
                        return false;
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("Graphs.Vector", {
        statics: {
            methods: {
                op_Addition: function (a, b) {
                    return new Graphs.Vector(a._X + b._X, a._Y + b._Y);
                },
                op_UnaryNegation: function (a) {
                    return new Graphs.Vector(-a._X, -a._Y);
                },
                op_Subtraction: function (a, b) {
                    return new Graphs.Vector(a._X - b._X, a._Y - b._Y);
                },
                op_Multiply: function (a, b) {
                    return new Graphs.Vector(a._X * b, a._Y * b);
                },
                op_Multiply$1: function (a, b) {
                    return new Graphs.Vector(a._X * b, a._Y * b);
                },
                op_Equality: function (a, b) {
                    return a.Equals(b);
                },
                op_Inequality: function (a, b) {
                    return !(Graphs.Vector.op_Equality(a, b));
                },
                op_Implicit: function (v) {
                    return new GraphicsLayer.Box.ctor(v.X, v.Y);
                }
            }
        },
        fields: {
            _X: 0,
            _Y: 0
        },
        props: {
            Length: {
                get: function () {
                    return Math.sqrt(this._X * this._X + this._Y * this._Y);
                }
            },
            X: {
                get: function () {
                    return this._X;
                },
                set: function (value) {
                    this._X = value;
                }
            },
            Y: {
                get: function () {
                    return this._Y;
                },
                set: function (value) {
                    this._Y = value;
                }
            }
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this._X = x;
                this._Y = y;
            }
        },
        methods: {
            Normalize: function () {
                var length = this.Length;

                this._X = this._X / length;
                this._Y = this._Y / length;

                return length > 0;
            },
            Dot: function (vector) {
                return this._X * vector._X + this._Y * vector._Y;
            },
            Distance: function (vector) {
                return Math.sqrt(Math.pow(vector._X - this._X, 2) + Math.pow(vector._Y - this._Y, 2));
            },
            equals: function (obj) {
                if (!(Bridge.is(obj, Graphs.Vector))) {
                    return false;
                }

                var v = Bridge.cast(obj, Graphs.Vector);

                return this.Equals(v);
            },
            Equals: function (v) {
                return this._X === v._X && this._Y === v._Y;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.toString());
            },
            toString: function () {
                return "(" + System.Double.format(this._X) + ", " + System.Double.format(this._Y) + ")";
            }
        }
    });

    Bridge.define("GraphsCore.CompactSerializer", {
        statics: {
            fields: {
                Scale: 0,
                Prefix: null,
                ASCII: null
            },
            ctors: {
                init: function () {
                    this.Scale = 10000;
                    this.Prefix = "webgraph:";
                    this.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
                }
            },
            methods: {
                LooksLikeASerializedGraph: function (s) {
                    return !System.String.isNullOrEmpty(s) && System.String.startsWith(s, GraphsCore.CompactSerializer.Prefix);
                },
                Serialize: function (g) {
                    var bytes = GraphsCore.CompactSerializer.SerializeToByteArray(g);
                    var compressed = QuickLZ.compress(bytes);
                    var Ascii85 = new Graphs.Ascii85();
                    return System.String.concat(GraphsCore.CompactSerializer.Prefix, Ascii85.Encode(compressed));
                },
                SerializeToByteArray: function (g) {
                    var $t, $t1, $t2, $t3, $t4;
                    var bytes = new (System.Collections.Generic.List$1(System.Byte))();
                    bytes.add(((g.Vertices.Count) & 255));
                    $t = Bridge.getEnumerator(g.Vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            bytes.addRange(System.BitConverter.getBytes$7(Bridge.Int.clipu16(Bridge.Math.round(v.X * GraphsCore.CompactSerializer.Scale, 0, 6))));
                            bytes.addRange(System.BitConverter.getBytes$7(Bridge.Int.clipu16(Bridge.Math.round(v.Y * GraphsCore.CompactSerializer.Scale, 0, 6))));
                            bytes.addRange(System.BitConverter.getBytes$7(Bridge.Int.clipu16(Bridge.Math.round(v.Padding * GraphsCore.CompactSerializer.Scale, 0, 6))));
                            bytes.addRange(GraphsCore.CompactSerializer.GetBytes(v.Label));
                            bytes.addRange(GraphsCore.CompactSerializer.GetBytes(($t1 = v.Style, $t1 != null ? $t1 : "")));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    bytes.addRange(System.BitConverter.getBytes$7(((g.Edges.Count) & 65535)));
                    $t2 = Bridge.getEnumerator(g.Edges);
                    try {
                        while ($t2.moveNext()) {
                            var e = $t2.Current;
                            bytes.add(((g.Vertices.indexOf(e.V1)) & 255));
                            bytes.add(((g.Vertices.indexOf(e.V2)) & 255));
                            bytes.add(((e.Multiplicity) & 255));
                            bytes.add(((e.Orientation) & 255));
                            bytes.addRange(System.BitConverter.getBytes$7(Bridge.Int.clipu16(Bridge.Math.round(e.Thickness * 100, 0, 6))));

                            var label = ($t3 = e.Label, $t3 != null ? $t3 : "");
                            var hackedStyle = System.String.concat((($t4 = e.Style, $t4 != null ? $t4 : "")), "~~|~|~~", label);
                            bytes.addRange(GraphsCore.CompactSerializer.GetBytes(hackedStyle));
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$dispose();
                        }
                    }
                    return bytes.toArray();
                },
                Deserialize: function (s) {
                    try {
                        var Ascii85 = new Graphs.Ascii85();
                        var compressed = Ascii85.Decode(s.substr(GraphsCore.CompactSerializer.Prefix.length));
                        var bytes = QuickLZ.decompress(compressed);
                        return GraphsCore.CompactSerializer.DeserializeFromByteArray(bytes);
                    }
                    catch (ex) {
                        ex = System.Exception.create(ex);
                        System.Console.WriteLine(ex.Message);
                    }

                    return null;
                },
                DeserializeFromByteArray: function (bytes) {
                    var $t;
                    var offset = { v : 0 };
                    var n = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                    var vertices = new (System.Collections.Generic.List$1(Graphs.Vertex))();
                    for (var i = 0; i < n; i = (i + 1) | 0) {
                        var x = GraphsCore.CompactSerializer.ReadUInt16(bytes, offset) / GraphsCore.CompactSerializer.Scale;
                        var y = GraphsCore.CompactSerializer.ReadUInt16(bytes, offset) / GraphsCore.CompactSerializer.Scale;
                        var padding = GraphsCore.CompactSerializer.ReadUInt16(bytes, offset) / GraphsCore.CompactSerializer.Scale;
                        var label = GraphsCore.CompactSerializer.ReadString(bytes, offset);
                        var style = GraphsCore.CompactSerializer.ReadString(bytes, offset);
                        vertices.add(($t = new Graphs.Vertex.$ctor3(x, y), $t.Padding = padding, $t.Label = label, $t.Style = style, $t));
                    }

                    var e = GraphsCore.CompactSerializer.ReadUInt16(bytes, offset);
                    var edges = new (System.Collections.Generic.List$1(Graphs.Edge))();
                    for (var i1 = 0; i1 < e; i1 = (i1 + 1) | 0) {
                        var v1 = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                        var v2 = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                        var multiplicity = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                        var orientation = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                        var thickness = GraphsCore.CompactSerializer.ReadUInt16(bytes, offset) / 100;
                        var style1 = GraphsCore.CompactSerializer.ReadString(bytes, offset);

                        edges.add(($t = new Graphs.Edge.$ctor1(vertices.getItem(v1), vertices.getItem(v2)), $t.Multiplicity = multiplicity, $t.Orientation = orientation, $t.Thickness = thickness, $t.Style = style1, $t));
                    }

                    return new Graphs.Graph.$ctor3(vertices, edges);
                },
                ReadByte: function (bytes, offset) {
                    return bytes[System.Array.index(Bridge.identity(offset.v, (offset.v = (offset.v + 1) | 0)), bytes)];
                },
                ReadUInt16: function (bytes, offset) {
                    var x = System.BitConverter.toUInt16(bytes, offset.v);
                    offset.v = (offset.v + 2) | 0;
                    return x;
                },
                ReadUInt32: function (bytes, offset) {
                    var x = System.BitConverter.toUInt32(bytes, offset.v);
                    offset.v = (offset.v + 4) | 0;
                    return x;
                },
                Get7BitEncodedInt: function (value) {
                    var bytes = new (System.Collections.Generic.List$1(System.Byte))();
                    var num = value >>> 0;
                    while (num >= 128) {
                        bytes.add(((((num | 128) >>> 0)) & 255));
                        num = num >>> 7;
                    }
                    bytes.add((num & 255));

                    return bytes.toArray();
                },
                Read7BitEncodedInt: function (bytes, offset) {
                    var num1 = 0;
                    var num2 = 0;
                    while (num2 !== 35) {
                        var num3 = GraphsCore.CompactSerializer.ReadByte(bytes, offset);
                        num1 = num1 | ((num3 & 127) << num2);
                        num2 = (num2 + 7) | 0;
                        if ((num3 & 128) === 0) {
                            return num1;
                        }
                    }
                    throw new System.FormatException("bad 7-bit encoded int");
                },
                GetBytes: function (s) {
                    var $t, $t1;
                    var bytes = new (System.Collections.Generic.List$1(System.Byte))();
                    $t = Bridge.getEnumerator(System.String.toCharArray(s, 0, s.length));
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            bytes.addRange(System.BitConverter.getBytes$1(c));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(System.Linq.Enumerable.from(Bridge.cast(GraphsCore.CompactSerializer.Get7BitEncodedInt(bytes.Count), System.Collections.Generic.IEnumerable$1(System.Byte))).reverse());
                    try {
                        while ($t1.moveNext()) {
                            var b = $t1.Current;
                            bytes.insert(0, b);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    return bytes.toArray();
                },
                ReadString: function (bytes, offset) {
                    var length = GraphsCore.CompactSerializer.Read7BitEncodedInt(bytes, offset);

                    var s = "";
                    while (Bridge.identity(length, (length = (length - 1) | 0)) > 0) {
                        s = System.String.concat(s, String.fromCharCode(GraphsCore.CompactSerializer.ASCII.charCodeAt(((bytes[System.Array.index(Bridge.identity(offset.v, (offset.v = (offset.v + 1) | 0)), bytes)] - 32) | 0))));
                    }
                    return s;
                }
            }
        }
    });

    Bridge.define("GraphsCore.GraphIO", {
        statics: {
            fields: {
                ASCII: null
            },
            ctors: {
                init: function () {
                    this.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
                }
            },
            methods: {
                ToAdjacencyMatrix: function (edgeWeights, isDirected) {
                    var $t;
                    if (isDirected === void 0) { isDirected = false; }
                    var n = Bridge.Int.clip32((1 + Math.sqrt(((1 + Bridge.Int.mul(8, edgeWeights.Count)) | 0))) / 2);
                    var m = System.Array.create(0, null, System.Char, n, n);

                    var k = 0;
                    for (var i = 0; i < n; i = (i + 1) | 0) {
                        for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                            var ew = edgeWeights.getItem(k);
                            if (isDirected) {
                                m.set([i, j], (m.set([j, i], 48), 48));

                                if (ew > 0) {
                                    m.set([i, j], 49);
                                } else {
                                    if (ew < 0) {
                                        m.set([j, i], 49);
                                    }
                                }
                            } else {
                                m.set([i, j], ($t = ew !== 0 ? 49 : 48, m.set([j, i], $t), $t));
                            }

                            k = (k + 1) | 0;
                        }
                    }

                    for (var i1 = 0; i1 < n; i1 = (i1 + 1) | 0) {
                        m.set([i1, i1], 48);
                    }

                    var s = "";
                    for (var i2 = 0; i2 < n; i2 = (i2 + 1) | 0) {
                        for (var j1 = 0; j1 < n; j1 = (j1 + 1) | 0) {
                            s = System.String.concat(s, String.fromCharCode(m.get([i2, j1])));
                        }
                        s = System.String.concat(s, '\n');
                    }

                    return s;
                },
                ToGraph6: function (g) {
                    return GraphsCore.GraphIO.ToGraph6$1(g.GetEdgeWeights());
                },
                ToGraph6$1: function (w) {
                    var n = Bridge.Int.clip32((1 + Math.sqrt(((1 + Bridge.Int.mul(8, w.Count)) | 0))) / 2);
                    if (n > 62) {
                        throw new System.NotImplementedException("i have yet to write/read graph6 files with more than 62 vertices.");
                    }

                    var p = System.Linq.Enumerable.from(GraphsCore.GraphIO.RowToColumnPermutation(n)).toList(System.Int32);
                    var wp = new (System.Collections.Generic.List$1(System.Int32))(w.Count);

                    for (var i = 0; i < p.Count; i = (i + 1) | 0) {
                        wp.add(Math.abs(w.getItem(p.indexOf(i))));
                    }

                    while (wp.Count % 6 !== 0) {
                        wp.add(0);
                    }

                    var bb = System.Linq.Enumerable.from(MoreLinq.MoreEnumerable.Prepend(System.Byte, MoreLinq.MoreEnumerable.Batch(System.Int32, System.Byte, wp, 6, $asm.$.GraphsCore.GraphIO.f2), ((((n + 63) | 0)) & 255))).toArray();
                    return Bridge.toArray(System.Linq.Enumerable.from(bb).select($asm.$.GraphsCore.GraphIO.f3)).join("");
                },
                RowToColumnPermutation: function (n) {
                    return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (n) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            x,
                            j,
                            y,
                            i,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            x = 0;
                                                j = 0;
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ( j < ((n - 1) | 0) ) {
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 9;
                                            continue;
                                        }
                                        case 2: {
                                            y = x;
                                                i = 0;
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ( i < ((((n - 1) | 0) - j) | 0) ) {
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 7;
                                            continue;
                                        }
                                        case 4: {
                                            $enumerator.current = y;
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            y = (y + (((((1 + j) | 0) + i) | 0))) | 0;
                                            $step = 6;
                                            continue;
                                        }
                                        case 6: {
                                            i = (i + 1) | 0;
                                            $step = 3;
                                            continue;
                                        }
                                        case 7: {
                                            x = (x + (((2 + j) | 0))) | 0;
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            j = (j + 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 9: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                Low6: function (b) {
                    return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (b) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            i,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            i = 5;
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ( i >= 0 ) {
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 5;
                                            continue;
                                        }
                                        case 2: {
                                            $enumerator.current = (b & (1 << i)) >> i;
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            $step = 4;
                                            continue;
                                        }
                                        case 4: {
                                            i = (i - 1) | 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 5: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.ns("GraphsCore.GraphIO", $asm.$);

    Bridge.apply($asm.$.GraphsCore.GraphIO, {
        f1: function (pair) {
            return pair.value << pair.key;
        },
        f2: function (bits) {
            return ((((System.Linq.Enumerable.from(MoreLinq.MoreEnumerable.Index(System.Int32, System.Linq.Enumerable.from(bits).reverse())).select($asm.$.GraphsCore.GraphIO.f1).sum() + 63) | 0)) & 255);
        },
        f3: function (b) {
            return String.fromCharCode(GraphsCore.GraphIO.ASCII.charCodeAt(((b - 32) | 0)));
        }
    });

    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Func
     * @param   {System.Collections.Generic.IEnumerable$1}    arg
     * @return  {TResult}
     */

    Bridge.define("MoreLinq.MoreEnumerable", {
        statics: {
            methods: {
                /**
                 * Batches the source sequence into sized buckets.
                 *
                 * @static
                 * @public
                 * @this MoreLinq.MoreEnumerable
                 * @memberof MoreLinq.MoreEnumerable
                 * @param   {Function}                                    TSource    Type of elements in <b>TSource</b> sequence.
                 * @param   {System.Collections.Generic.IEnumerable$1}    source     The source sequence.
                 * @param   {number}                                      size       Size of buckets.
                 * @return  {System.Collections.Generic.IEnumerable$1}               A sequence of equally sized buckets containing elements of the source collection.
                 */
                Batch$1: function (TSource, source, size) {
                    return MoreLinq.MoreEnumerable.Batch(TSource, System.Collections.Generic.IEnumerable$1(TSource), source, size, $asm.$.MoreLinq.MoreEnumerable.f1);
                },
                /**
                 * Batches the source sequence into sized buckets and applies a projection to each bucket.
                 *
                 * @static
                 * @public
                 * @this MoreLinq.MoreEnumerable
                 * @memberof MoreLinq.MoreEnumerable
                 * @param   {Function}                                    TSource           Type of elements in <b>TSource</b> sequence.
                 * @param   {Function}                                    TResult           Type of result returned by <b>TResult</b>.
                 * @param   {System.Collections.Generic.IEnumerable$1}    source            The source sequence.
                 * @param   {number}                                      size              Size of buckets.
                 * @param   {System.Func}                                 resultSelector    The projection to apply to each bucket.
                 * @return  {System.Collections.Generic.IEnumerable$1}                      A sequence of projections on equally sized buckets containing elements of the source collection.
                 */
                Batch: function (TSource, TResult, source, size, resultSelector) {
                    return MoreLinq.MoreEnumerable.BatchImpl(TSource, TResult, source, size, resultSelector);
                },
                BatchImpl: function (TSource, TResult, source, size, resultSelector) {
                    return new (Bridge.GeneratorEnumerable$1(TResult))(Bridge.fn.bind(this, function (TSource, TResult, source, size, resultSelector) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            bucket,
                            count,
                            $t,
                            item,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(TResult))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            bucket = null;
                                                count = 0;

                                                $t = Bridge.getEnumerator(source, TSource);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    item = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            if (bucket == null) {
                                                    bucket = System.Array.init(size, function (){
                                                        return Bridge.getDefaultValue(TSource);
                                                    }, TSource);
                                                }

                                                bucket[System.Array.index(Bridge.identity(count, (count = (count + 1) | 0)), bucket)] = item;

                                                // The bucket is fully buffered before it's yielded
                                                if (count !== size) {
                                                    $step = 1;
                                                    continue;
                                                }

                                                // Select is necessary so bucket contents are streamed too
                                                $enumerator.current = resultSelector(System.Linq.Enumerable.from(bucket).select($asm.$.MoreLinq.MoreEnumerable.f1));
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            bucket = null;
                                                count = 0;
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {
                                            // Return the last bucket with all remaining elements
                                                if (bucket != null && count > 0) {
                                                    $step = 5;
                                                    continue;
                                                } 
                                                $step = 7;
                                                continue;
                                        }
                                        case 5: {
                                            $enumerator.current = resultSelector(System.Linq.Enumerable.from(bucket).take(count));
                                                $step = 6;
                                                return true;
                                        }
                                        case 6: {
                                            $step = 7;
                                            continue;
                                        }
                                        case 7: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                /**
                 * Returns a sequence of {@link } 
                 where the key is the zero-based index of the value in the source 
                 sequence.
                 *
                 * @static
                 * @public
                 * @this MoreLinq.MoreEnumerable
                 * @memberof MoreLinq.MoreEnumerable
                 * @param   {Function}                                    TSource    Type of elements in <b>TSource</b> sequence.
                 * @param   {System.Collections.Generic.IEnumerable$1}    source     The source sequence.
                 * @return  {System.Collections.Generic.IEnumerable$1}               A sequence of {@link }.
                 */
                Index: function (TSource, source) {
                    return MoreLinq.MoreEnumerable.Index$1(TSource, source, 0);
                },
                /**
                 * Returns a sequence of {@link } 
                 where the key is the index of the value in the source sequence.
                 An additional parameter specifies the starting index.
                 *
                 * @static
                 * @public
                 * @this MoreLinq.MoreEnumerable
                 * @memberof MoreLinq.MoreEnumerable
                 * @param   {Function}                                    TSource       Type of elements in <b>TSource</b> sequence.
                 * @param   {System.Collections.Generic.IEnumerable$1}    source        The source sequence.
                 * @param   {number}                                      startIndex
                 * @return  {System.Collections.Generic.IEnumerable$1}                  A sequence of {@link }.
                 */
                Index$1: function (TSource, source, startIndex) {
                    return System.Linq.Enumerable.from(source).select(function (item, index) {
                            return new (System.Collections.Generic.KeyValuePair$2(System.Int32,TSource))(((startIndex + index) | 0), item);
                        });
                },
                /**
                 * Prepends a single value to a sequence.
                 *
                 * @static
                 * @public
                 * @this MoreLinq.MoreEnumerable
                 * @memberof MoreLinq.MoreEnumerable
                 * @param   {Function}                                    TSource    The type of the elements of <b>TSource</b>.
                 * @param   {System.Collections.Generic.IEnumerable$1}    source     The sequence to prepend to.
                 * @param   {TSource}                                     value      The value to prepend.
                 * @return  {System.Collections.Generic.IEnumerable$1}               Returns a sequence where a value is prepended to it.
                 */
                Prepend: function (TSource, source, value) {
                    if (source == null) {
                        throw new System.ArgumentNullException("source");
                    }
                    return System.Linq.Enumerable.from(System.Linq.Enumerable.repeat(value, 1)).concat(source);
                }
            }
        }
    });

    Bridge.ns("MoreLinq.MoreEnumerable", $asm.$);

    Bridge.apply($asm.$.MoreLinq.MoreEnumerable, {
        f1: function (x) {
            return x;
        }
    });

    Bridge.define("QuickLZ", {
        statics: {
            fields: {
                QLZ_VERSION_MAJOR: 0,
                QLZ_VERSION_MINOR: 0,
                QLZ_VERSION_REVISION: 0,
                QLZ_STREAMING_BUFFER: 0,
                QLZ_MEMORY_SAFE: 0,
                HASH_VALUES: 0,
                MINOFFSET: 0,
                UNCONDITIONAL_MATCHLEN: 0,
                UNCOMPRESSED_END: 0,
                CWORD_LEN: 0,
                DEFAULT_HEADERLEN: 0,
                QLZ_POINTERS_1: 0,
                QLZ_POINTERS_3: 0
            },
            ctors: {
                init: function () {
                    this.QLZ_VERSION_MAJOR = 1;
                    this.QLZ_VERSION_MINOR = 5;
                    this.QLZ_VERSION_REVISION = 0;
                    this.QLZ_STREAMING_BUFFER = 0;
                    this.QLZ_MEMORY_SAFE = 0;
                    this.HASH_VALUES = 4096;
                    this.MINOFFSET = 2;
                    this.UNCONDITIONAL_MATCHLEN = 6;
                    this.UNCOMPRESSED_END = 4;
                    this.CWORD_LEN = 4;
                    this.DEFAULT_HEADERLEN = 9;
                    this.QLZ_POINTERS_1 = 1;
                    this.QLZ_POINTERS_3 = 16;
                }
            },
            methods: {
                headerLen: function (source) {
                    return ((source[System.Array.index(0, source)] & 2) === 2) ? 9 : 3;
                },
                sizeDecompressed: function (source) {
                    if (QuickLZ.headerLen(source) === 9) {
                        return source[System.Array.index(5, source)] | (source[System.Array.index(6, source)] << 8) | (source[System.Array.index(7, source)] << 16) | (source[System.Array.index(8, source)] << 24);
                    } else {
                        return source[System.Array.index(2, source)];
                    }
                },
                sizeCompressed: function (source) {
                    if (QuickLZ.headerLen(source) === 9) {
                        return source[System.Array.index(1, source)] | (source[System.Array.index(2, source)] << 8) | (source[System.Array.index(3, source)] << 16) | (source[System.Array.index(4, source)] << 24);
                    } else {
                        return source[System.Array.index(1, source)];
                    }
                },
                write_header: function (dst, level, compressible, size_compressed, size_decompressed) {
                    dst[System.Array.index(0, dst)] = (2 | (compressible ? 1 : 0)) & 255;
                    dst[System.Array.index(0, dst)] = (dst[System.Array.index(0, dst)] | ((level << 2) & 255)) & 255;
                    dst[System.Array.index(0, dst)] = (dst[System.Array.index(0, dst)] | (64)) & 255;
                    dst[System.Array.index(0, dst)] = (dst[System.Array.index(0, dst)] | (0)) & 255;
                    QuickLZ.fast_write(dst, 1, size_decompressed, 4);
                    QuickLZ.fast_write(dst, 5, size_compressed, 4);
                },
                compress: function (source, level) {
                    var $t;
                    if (level === void 0) { level = 1; }
                    var src = 0;
                    var dst = 13;
                    var cword_val = 2147483648;
                    var cword_ptr = QuickLZ.DEFAULT_HEADERLEN;
                    var destination = System.Array.init(((source.length + 400) | 0), 0, System.Byte);
                    var hashtable;
                    var cachetable = System.Array.init(QuickLZ.HASH_VALUES, 0, System.Int32);
                    var hash_counter = System.Array.init(QuickLZ.HASH_VALUES, 0, System.Byte);
                    var d2;
                    var fetch = 0;
                    var last_matchstart = (((((((source.length - QuickLZ.UNCONDITIONAL_MATCHLEN) | 0) - QuickLZ.UNCOMPRESSED_END) | 0) - 1) | 0));
                    var lits = 0;

                    if (level !== 1 && level !== 3) {
                        throw new System.ArgumentException("C# version only supports level 1 and 3");
                    }

                    if (level === 1) {
                        hashtable = System.Array.create(0, null, System.Int32, 4096, 1);
                    } else {
                        hashtable = System.Array.create(0, null, System.Int32, 4096, 16);
                    }

                    if (source.length === 0) {
                        return System.Array.init(0, 0, System.Byte);
                    }

                    if (src <= last_matchstart) {
                        fetch = source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16);
                    }

                    while (src <= last_matchstart) {
                        if ((((cword_val & 1) >>> 0)) === 1) {
                            if (src > source.length >> 1 && dst > ((src - (src >> 5)) | 0)) {
                                d2 = System.Array.init(((source.length + QuickLZ.DEFAULT_HEADERLEN) | 0), 0, System.Byte);
                                QuickLZ.write_header(d2, level, false, source.length, ((source.length + QuickLZ.DEFAULT_HEADERLEN) | 0));
                                System.Array.copy(source, 0, d2, QuickLZ.DEFAULT_HEADERLEN, source.length);
                                return d2;
                            }

                            QuickLZ.fast_write(destination, cword_ptr, (((((cword_val >>> 1) | 2147483648) >>> 0)) | 0), 4);
                            cword_ptr = dst;
                            dst = (dst + QuickLZ.CWORD_LEN) | 0;
                            cword_val = 2147483648;
                        }

                        if (level === 1) {
                            var hash = ((fetch >> 12) ^ fetch) & (4095);
                            var o = hashtable.get([hash, 0]);
                            var cache = cachetable[System.Array.index(hash, cachetable)] ^ fetch;
                            cachetable[System.Array.index(hash, cachetable)] = fetch;
                            hashtable.set([hash, 0], src);

                            if (cache === 0 && hash_counter[System.Array.index(hash, hash_counter)] !== 0 && (((src - o) | 0) > QuickLZ.MINOFFSET || (src === ((o + 1) | 0) && lits >= 3 && src > 3 && source[System.Array.index(src, source)] === source[System.Array.index(((src - 3) | 0), source)] && source[System.Array.index(src, source)] === source[System.Array.index(((src - 2) | 0), source)] && source[System.Array.index(src, source)] === source[System.Array.index(((src - 1) | 0), source)] && source[System.Array.index(src, source)] === source[System.Array.index(((src + 1) | 0), source)] && source[System.Array.index(src, source)] === source[System.Array.index(((src + 2) | 0), source)]))) {
                                cword_val = ((((cword_val >>> 1) | 2147483648) >>> 0));
                                if (source[System.Array.index(((o + 3) | 0), source)] !== source[System.Array.index(((src + 3) | 0), source)]) {
                                    var f = 1 | (hash << 4);
                                    destination[System.Array.index(((dst + 0) | 0), destination)] = (f >> 0) & 255;
                                    destination[System.Array.index(((dst + 1) | 0), destination)] = (f >> 8) & 255;
                                    src = (src + 3) | 0;
                                    dst = (dst + 2) | 0;
                                } else {
                                    var old_src = src;
                                    var remaining = ((((((((((source.length - QuickLZ.UNCOMPRESSED_END) | 0) - src) | 0) + 1) | 0) - 1) | 0)) > 255 ? 255 : (((((((((source.length - QuickLZ.UNCOMPRESSED_END) | 0) - src) | 0) + 1) | 0) - 1) | 0)));

                                    src = (src + 4) | 0;
                                    if (source[System.Array.index(((((o + src) | 0) - old_src) | 0), source)] === source[System.Array.index(src, source)]) {
                                        src = (src + 1) | 0;
                                        if (source[System.Array.index(((((o + src) | 0) - old_src) | 0), source)] === source[System.Array.index(src, source)]) {
                                            src = (src + 1) | 0;
                                            while (source[System.Array.index(((o + (((src - old_src) | 0))) | 0), source)] === source[System.Array.index(src, source)] && (((src - old_src) | 0)) < remaining) {
                                                src = (src + 1) | 0;
                                            }
                                        }
                                    }

                                    var matchlen = (src - old_src) | 0;

                                    hash = hash << 4;
                                    if (matchlen < 18) {
                                        var f1 = (hash | (((matchlen - 2) | 0)));
                                        destination[System.Array.index(((dst + 0) | 0), destination)] = (f1 >> 0) & 255;
                                        destination[System.Array.index(((dst + 1) | 0), destination)] = (f1 >> 8) & 255;
                                        dst = (dst + 2) | 0;
                                    } else {
                                        QuickLZ.fast_write(destination, dst, hash | (matchlen << 16), 3);
                                        dst = (dst + 3) | 0;
                                    }
                                }
                                fetch = source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16);
                                lits = 0;
                            } else {
                                lits = (lits + 1) | 0;
                                hash_counter[System.Array.index(hash, hash_counter)] = 1;
                                destination[System.Array.index(dst, destination)] = source[System.Array.index(src, source)];
                                cword_val = (cword_val >>> 1);
                                src = (src + 1) | 0;
                                dst = (dst + 1) | 0;
                                fetch = ((fetch >> 8) & 65535) | (source[System.Array.index(((src + 2) | 0), source)] << 16);
                            }

                        } else {
                            fetch = source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16);

                            var o1, offset2;
                            var matchlen1, k, m, best_k = 0;
                            var c;
                            var remaining1 = ((((((((((source.length - QuickLZ.UNCOMPRESSED_END) | 0) - src) | 0) + 1) | 0) - 1) | 0)) > 255 ? 255 : (((((((((source.length - QuickLZ.UNCOMPRESSED_END) | 0) - src) | 0) + 1) | 0) - 1) | 0)));
                            var hash1 = ((fetch >> 12) ^ fetch) & (4095);

                            c = hash_counter[System.Array.index(hash1, hash_counter)];
                            matchlen1 = 0;
                            offset2 = 0;
                            for (k = 0; k < QuickLZ.QLZ_POINTERS_3 && c > k; k = (k + 1) | 0) {
                                o1 = hashtable.get([hash1, k]);
                                if ((fetch & 255) === source[System.Array.index(o1, source)] && (((fetch >> 8)) & 255) === source[System.Array.index(((o1 + 1) | 0), source)] && (((fetch >> 16)) & 255) === source[System.Array.index(((o1 + 2) | 0), source)] && o1 < ((src - QuickLZ.MINOFFSET) | 0)) {
                                    m = 3;
                                    while (source[System.Array.index(((o1 + m) | 0), source)] === source[System.Array.index(((src + m) | 0), source)] && m < remaining1) {
                                        m = (m + 1) | 0;
                                    }
                                    if ((m > matchlen1) || (m === matchlen1 && o1 > offset2)) {
                                        offset2 = o1;
                                        matchlen1 = m;
                                        best_k = k;
                                    }
                                }
                            }
                            o1 = offset2;
                            hashtable.set([hash1, c & (15)], src);
                            c = (c + 1) & 255;
                            hash_counter[System.Array.index(hash1, hash_counter)] = c;

                            if (matchlen1 >= 3 && ((src - o1) | 0) < 131071) {
                                var offset = (src - o1) | 0;

                                for (var u = 1; u < matchlen1; u = (u + 1) | 0) {
                                    fetch = source[System.Array.index(((src + u) | 0), source)] | (source[System.Array.index(((((src + u) | 0) + 1) | 0), source)] << 8) | (source[System.Array.index(((((src + u) | 0) + 2) | 0), source)] << 16);
                                    hash1 = ((fetch >> 12) ^ fetch) & (4095);
                                    c = Bridge.identity(hash_counter[System.Array.index(hash1, hash_counter)], ($t = (hash_counter[System.Array.index(hash1, hash_counter)] + 1) & 255, hash_counter[System.Array.index(hash1, hash_counter)] = $t, $t));
                                    hashtable.set([hash1, c & (15)], (src + u) | 0);
                                }

                                src = (src + matchlen1) | 0;
                                cword_val = ((((cword_val >>> 1) | 2147483648) >>> 0));

                                if (matchlen1 === 3 && offset <= 63) {
                                    QuickLZ.fast_write(destination, dst, offset << 2, 1);
                                    dst = (dst + 1) | 0;
                                } else if (matchlen1 === 3 && offset <= 16383) {
                                    QuickLZ.fast_write(destination, dst, (offset << 2) | 1, 2);
                                    dst = (dst + 2) | 0;
                                } else if (matchlen1 <= 18 && offset <= 1023) {
                                    QuickLZ.fast_write(destination, dst, ((((matchlen1 - 3) | 0)) << 2) | (offset << 6) | 2, 2);
                                    dst = (dst + 2) | 0;
                                } else if (matchlen1 <= 33) {
                                    QuickLZ.fast_write(destination, dst, ((((matchlen1 - 2) | 0)) << 2) | (offset << 7) | 3, 3);
                                    dst = (dst + 3) | 0;
                                } else {
                                    QuickLZ.fast_write(destination, dst, ((((matchlen1 - 3) | 0)) << 7) | (offset << 15) | 3, 4);
                                    dst = (dst + 4) | 0;
                                }
                                lits = 0;
                            } else {
                                destination[System.Array.index(dst, destination)] = source[System.Array.index(src, source)];
                                cword_val = (cword_val >>> 1);
                                src = (src + 1) | 0;
                                dst = (dst + 1) | 0;
                            }
                        }
                    }
                    while (src <= ((source.length - 1) | 0)) {
                        if ((((cword_val & 1) >>> 0)) === 1) {
                            QuickLZ.fast_write(destination, cword_ptr, (((((cword_val >>> 1) | 2147483648) >>> 0)) | 0), 4);
                            cword_ptr = dst;
                            dst = (dst + QuickLZ.CWORD_LEN) | 0;
                            cword_val = 2147483648;
                        }

                        destination[System.Array.index(dst, destination)] = source[System.Array.index(src, source)];
                        src = (src + 1) | 0;
                        dst = (dst + 1) | 0;
                        cword_val = (cword_val >>> 1);
                    }
                    while ((((cword_val & 1) >>> 0)) !== 1) {
                        cword_val = (cword_val >>> 1);
                    }
                    QuickLZ.fast_write(destination, cword_ptr, (((((cword_val >>> 1) | 2147483648) >>> 0)) | 0), QuickLZ.CWORD_LEN);
                    QuickLZ.write_header(destination, level, true, source.length, dst);
                    d2 = System.Array.init(dst, 0, System.Byte);
                    System.Array.copy(destination, 0, d2, 0, dst);
                    return d2;
                },
                fast_write: function (a, i, value, numbytes) {
                    for (var j = 0; j < numbytes; j = (j + 1) | 0) {
                        a[System.Array.index(((i + j) | 0), a)] = (value >> (Bridge.Int.mul(j, 8))) & 255;
                    }
                },
                decompress: function (source) {
                    var level;
                    var size = QuickLZ.sizeDecompressed(source);
                    var src = QuickLZ.headerLen(source);
                    var dst = 0;
                    var cword_val = 1;
                    var destination = System.Array.init(size, 0, System.Byte);
                    var hashtable = System.Array.init(4096, 0, System.Int32);
                    var hash_counter = System.Array.init(4096, 0, System.Byte);
                    var last_matchstart = (((((size - QuickLZ.UNCONDITIONAL_MATCHLEN) | 0) - QuickLZ.UNCOMPRESSED_END) | 0) - 1) | 0;
                    var last_hashed = -1;
                    var hash;
                    var fetch = 0;

                    level = (source[System.Array.index(0, source)] >> 2) & 3;

                    if (level !== 1 && level !== 3) {
                        throw new System.ArgumentException("C# version only supports level 1 and 3");
                    }

                    if ((source[System.Array.index(0, source)] & 1) !== 1) {
                        var d2 = System.Array.init(size, 0, System.Byte);
                        System.Array.copy(source, QuickLZ.headerLen(source), d2, 0, size);
                        return d2;
                    }

                    for (; ; ) {
                        if (cword_val === 1) {
                            cword_val = (source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16) | (source[System.Array.index(((src + 3) | 0), source)] << 24)) >>> 0;
                            src = (src + 4) | 0;
                            if (dst <= last_matchstart) {
                                if (level === 1) {
                                    fetch = (source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16)) >>> 0;
                                } else {
                                    fetch = (source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16) | (source[System.Array.index(((src + 3) | 0), source)] << 24)) >>> 0;
                                }
                            }
                        }

                        if ((((cword_val & 1) >>> 0)) === 1) {
                            var matchlen;
                            var offset2;

                            cword_val = cword_val >>> 1;

                            if (level === 1) {
                                hash = ((fetch | 0) >> 4) & 4095;
                                offset2 = (hashtable[System.Array.index(hash, hashtable)]) >>> 0;

                                if ((((fetch & 15) >>> 0)) !== 0) {
                                    matchlen = ((((fetch & 15) >>> 0)) + 2) >>> 0;
                                    src = (src + 2) | 0;
                                } else {
                                    matchlen = source[System.Array.index(((src + 2) | 0), source)];
                                    src = (src + 3) | 0;
                                }
                            } else {
                                var offset;
                                if ((((fetch & 3) >>> 0)) === 0) {
                                    offset = (((fetch & 255) >>> 0)) >>> 2;
                                    matchlen = 3;
                                    src = (src + 1) | 0;
                                } else if ((((fetch & 2) >>> 0)) === 0) {
                                    offset = (((fetch & 65535) >>> 0)) >>> 2;
                                    matchlen = 3;
                                    src = (src + 2) | 0;
                                } else if ((((fetch & 1) >>> 0)) === 0) {
                                    offset = (((fetch & 65535) >>> 0)) >>> 6;
                                    matchlen = (((((fetch >>> 2) & 15) >>> 0)) + 3) >>> 0;
                                    src = (src + 2) | 0;
                                } else if ((((fetch & 127) >>> 0)) !== 3) {
                                    offset = ((fetch >>> 7) & 131071) >>> 0;
                                    matchlen = (((((fetch >>> 2) & 31) >>> 0)) + 2) >>> 0;
                                    src = (src + 3) | 0;
                                } else {
                                    offset = (fetch >>> 15);
                                    matchlen = (((((fetch >>> 7) & 255) >>> 0)) + 3) >>> 0;
                                    src = (src + 4) | 0;
                                }
                                offset2 = System.Int64.clipu32(System.Int64(dst).sub(System.Int64(offset)));
                            }

                            destination[System.Array.index(((dst + 0) | 0), destination)] = destination[System.Array.index(((offset2 + 0) >>> 0), destination)];
                            destination[System.Array.index(((dst + 1) | 0), destination)] = destination[System.Array.index(((offset2 + 1) >>> 0), destination)];
                            destination[System.Array.index(((dst + 2) | 0), destination)] = destination[System.Array.index(((offset2 + 2) >>> 0), destination)];

                            for (var i = 3; System.Int64(i).lt(System.Int64(matchlen)); i = (i + 1) | 0) {
                                destination[System.Array.index(((dst + i) | 0), destination)] = destination[System.Array.index(System.Int64.toNumber(System.Int64(offset2).add(System.Int64(i))), destination)];
                            }

                            dst = (dst + (matchlen | 0)) | 0;

                            if (level === 1) {
                                fetch = (destination[System.Array.index(((last_hashed + 1) | 0), destination)] | (destination[System.Array.index(((last_hashed + 2) | 0), destination)] << 8) | (destination[System.Array.index(((last_hashed + 3) | 0), destination)] << 16)) >>> 0;
                                while (System.Int64(last_hashed).lt(System.Int64(dst).sub(System.Int64(matchlen)))) {
                                    last_hashed = (last_hashed + 1) | 0;
                                    hash = (((((((fetch >>> 12) ^ fetch) >>> 0)) & (4095)) >>> 0)) | 0;
                                    hashtable[System.Array.index(hash, hashtable)] = last_hashed;
                                    hash_counter[System.Array.index(hash, hash_counter)] = 1;
                                    fetch = ((((fetch >>> 8 & 65535) >>> 0) | (((destination[System.Array.index(((last_hashed + 3) | 0), destination)] << 16)) >>> 0)) >>> 0);
                                }
                                fetch = (source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16)) >>> 0;
                            } else {
                                fetch = (source[System.Array.index(src, source)] | (source[System.Array.index(((src + 1) | 0), source)] << 8) | (source[System.Array.index(((src + 2) | 0), source)] << 16) | (source[System.Array.index(((src + 3) | 0), source)] << 24)) >>> 0;
                            }
                            last_hashed = (dst - 1) | 0;
                        } else {
                            if (dst <= last_matchstart) {
                                destination[System.Array.index(dst, destination)] = source[System.Array.index(src, source)];
                                dst = (dst + 1) | 0;
                                src = (src + 1) | 0;
                                cword_val = cword_val >>> 1;

                                if (level === 1) {
                                    while (last_hashed < ((dst - 3) | 0)) {
                                        last_hashed = (last_hashed + 1) | 0;
                                        var fetch2 = destination[System.Array.index(last_hashed, destination)] | (destination[System.Array.index(((last_hashed + 1) | 0), destination)] << 8) | (destination[System.Array.index(((last_hashed + 2) | 0), destination)] << 16);
                                        hash = ((fetch2 >> 12) ^ fetch2) & (4095);
                                        hashtable[System.Array.index(hash, hashtable)] = last_hashed;
                                        hash_counter[System.Array.index(hash, hash_counter)] = 1;
                                    }
                                    fetch = ((((fetch >>> 8 & 65535) >>> 0) | (((source[System.Array.index(((src + 2) | 0), source)] << 16)) >>> 0)) >>> 0);
                                } else {
                                    fetch = ((((((fetch >>> 8 & 65535) >>> 0) | (((source[System.Array.index(((src + 2) | 0), source)] << 16)) >>> 0)) >>> 0) | (((source[System.Array.index(((src + 3) | 0), source)] << 24)) >>> 0)) >>> 0);
                                }
                            } else {
                                while (dst <= ((size - 1) | 0)) {
                                    if (cword_val === 1) {
                                        src = (src + QuickLZ.CWORD_LEN) | 0;
                                        cword_val = 2147483648;
                                    }

                                    destination[System.Array.index(dst, destination)] = source[System.Array.index(src, source)];
                                    dst = (dst + 1) | 0;
                                    src = (src + 1) | 0;
                                    cword_val = cword_val >>> 1;
                                }
                                return destination;
                            }
                        }
                    }
                }
            }
        }
    });

    Bridge.define("Test.App", {
        main: function Main () {
            window.onload = Bridge.fn.combine(window.onload, Test.App.OnWindowLoad);
        },
        statics: {
            fields: {
                _sageContainer: null,
                _newSheetTab: null,
                _currentTabCanvas: null,
                _tabID: 0,
                _canvasLookup: null
            },
            props: {
                CurrentTabCanvas: {
                    get: function () {
                        return Test.App._canvasLookup.get(Test.App._currentTabCanvas);
                    }
                }
            },
            ctors: {
                init: function () {
                    this._tabID = 1;
                    this._canvasLookup = new (System.Collections.Generic.Dictionary$2(System.String,Test.TabCanvas))();
                }
            },
            methods: {
                OnWindowLoad: function (eee) {
                    window.addEventListener("copy", $asm.$.Test.App.f1);

                    window.addEventListener("paste", $asm.$.Test.App.f2);

                    $(document).on("keydown", Test.App.OnKeyDown);
                    $(document).on("contextmenu", ".IAmAGraphCanvas", $asm.$.Test.App.f3);

                    Test.App._sageContainer = document.getElementById("SageContainer");
                    $("#SageManual").on("click", $asm.$.Test.App.f4);
                    $("#SageGraph6").on("click", $asm.$.Test.App.f5);
                    $("#SageSparse6").on("click", $asm.$.Test.App.f6);
                    $("#SageChromaticNumber").on("click", $asm.$.Test.App.f7);
                    $("#SageChromaticPolynomial").on("click", $asm.$.Test.App.f8);
                    $("#SageColoring").on("click", $asm.$.Test.App.f9);
                    $("#SageIndependentSet").on("click", $asm.$.Test.App.f10);
                    $("#SageIsPerfect").on("click", $asm.$.Test.App.f11);
                    $("#SageMatchingPolynomial").on("click", $asm.$.Test.App.f12);
                    $("#SagePathwidth").on("click", $asm.$.Test.App.f13);
                    $("#SageTreewidth").on("click", $asm.$.Test.App.f14);
                    $("#SageTuttePolynomial").on("click", $asm.$.Test.App.f15);
                    $("#SageVertexCover").on("click", $asm.$.Test.App.f16);
                    $("#SageCliqueComplex").on("click", $asm.$.Test.App.f17);
                    $("#SageCliqueMaximum").on("click", $asm.$.Test.App.f18);
                    $("#SageCliqueNumber").on("click", $asm.$.Test.App.f19);
                    $("#SageCliquePolynomial").on("click", $asm.$.Test.App.f20);
                    $("#SageBridges").on("click", $asm.$.Test.App.f21);
                    $("#SageGomoryHuTree").on("click", $asm.$.Test.App.f22);
                    $("#SageRandomSpanningTree").on("click", $asm.$.Test.App.f23);
                    $("#SageApexVertices").on("click", $asm.$.Test.App.f24);
                    $("#SageIsApex").on("click", $asm.$.Test.App.f25);
                    $("#SageIsArcTransitive").on("click", $asm.$.Test.App.f26);
                    $("#SageIsAsteroidalTripleFree").on("click", $asm.$.Test.App.f27);
                    $("#SageIsBiconnected").on("click", $asm.$.Test.App.f28);
                    $("#SageIsBipartite").on("click", $asm.$.Test.App.f29);
                    $("#SageIsBlockGraph").on("click", $asm.$.Test.App.f30);
                    $("#SageIsCartesianProduct").on("click", $asm.$.Test.App.f31);
                    $("#SageIsDistanceRegular").on("click", $asm.$.Test.App.f32);
                    $("#SageIsEdgeTransitive").on("click", $asm.$.Test.App.f33);
                    $("#SageIsEvenHoleFree").on("click", $asm.$.Test.App.f34);
                    $("#SageIsForest").on("click", $asm.$.Test.App.f35);
                    $("#SageIsHalfTransitive").on("click", $asm.$.Test.App.f36);
                    $("#SageIsLineGraph").on("click", $asm.$.Test.App.f37);
                    $("#SageIsLongAntiholeFree").on("click", $asm.$.Test.App.f38);
                    $("#SageIsLongHoleFree").on("click", $asm.$.Test.App.f39);
                    $("#SageIsOddHoleFree").on("click", $asm.$.Test.App.f40);
                    $("#SageIsOverfull").on("click", $asm.$.Test.App.f41);
                    $("#SageIsPartialCube").on("click", $asm.$.Test.App.f42);
                    $("#SageIsPrime").on("click", $asm.$.Test.App.f43);
                    $("#SageIsSemiSymmetric").on("click", $asm.$.Test.App.f44);
                    $("#SageIsSplit").on("click", $asm.$.Test.App.f45);
                    $("#SageIsStronglyRegular").on("click", $asm.$.Test.App.f46);
                    $("#SageIsTree").on("click", $asm.$.Test.App.f47);
                    $("#SageIsTriangleFree").on("click", $asm.$.Test.App.f48);
                    $("#SageIsWeaklyChordal").on("click", $asm.$.Test.App.f49);
                    $("#SageOddGirth").on("click", $asm.$.Test.App.f50);
                    $("#SageFractionalChromaticIndex").on("click", $asm.$.Test.App.f51);
                    $("#SageHasPerfectMatching").on("click", $asm.$.Test.App.f52);
                    $("#SageKirchhoffSymanzikPolynomial").on("click", $asm.$.Test.App.f53);
                    $("#SageLovaszTheta").on("click", $asm.$.Test.App.f54);
                    $("#SageMatching").on("click", $asm.$.Test.App.f55);
                    $("#SageMaximumAverageDegree").on("click", $asm.$.Test.App.f56);
                    $("#SageSeidelAdjacencyMatrix").on("click", $asm.$.Test.App.f57);
                    $("#SageNetworkxGraph").on("click", $asm.$.Test.App.f58);
                    $("#SageAdjacencyMatrix").on("click", $asm.$.Test.App.f59);
                    $("#SageIncidenceMatrix").on("click", $asm.$.Test.App.f60);
                    $("#SageDistanceMatrix").on("click", $asm.$.Test.App.f61);
                    $("#SageKirchhoffMatrix").on("click", $asm.$.Test.App.f62);
                    $("#SageDensity").on("click", $asm.$.Test.App.f63);
                    $("#SageOrder").on("click", $asm.$.Test.App.f64);
                    $("#SageSize").on("click", $asm.$.Test.App.f65);
                    $("#SageAverageDegree").on("click", $asm.$.Test.App.f66);
                    $("#SageDegreeSequence").on("click", $asm.$.Test.App.f67);
                    $("#SageCycleBasis").on("click", $asm.$.Test.App.f68);
                    $("#SageAllPaths").on("click", $asm.$.Test.App.f69);
                    $("#SageTrianglesCount").on("click", $asm.$.Test.App.f70);
                    $("#SageSpectrum").on("click", $asm.$.Test.App.f71);
                    $("#SageEigenvectors").on("click", $asm.$.Test.App.f72);
                    $("#SageEigenspaces").on("click", $asm.$.Test.App.f73);
                    $("#SageAutomorphismGroup").on("click", $asm.$.Test.App.f74);
                    $("#SageIsVertexTransitive").on("click", $asm.$.Test.App.f75);
                    $("#SageCanonicalLabel").on("click", $asm.$.Test.App.f76);
                    $("#SageIsCayley").on("click", $asm.$.Test.App.f77);
                    $("#SageIsEulerian").on("click", $asm.$.Test.App.f78);
                    $("#SageIsPlanar").on("click", $asm.$.Test.App.f79);
                    $("#SageIsRegular").on("click", $asm.$.Test.App.f80);
                    $("#SageIsChordal").on("click", $asm.$.Test.App.f81);
                    $("#SageIsCirculant").on("click", $asm.$.Test.App.f82);
                    $("#SageIsInterval").on("click", $asm.$.Test.App.f83);
                    $("#SageIsGallaiTree").on("click", $asm.$.Test.App.f84);
                    $("#SageIsClique").on("click", $asm.$.Test.App.f85);
                    $("#SageIsCycle").on("click", $asm.$.Test.App.f86);
                    $("#SageIsIndependentSet").on("click", $asm.$.Test.App.f87);
                    $("#SageIsTransitivelyReduced").on("click", $asm.$.Test.App.f88);
                    $("#SageIsEquitable").on("click", $asm.$.Test.App.f89);
                    $("#SageEccentricity").on("click", $asm.$.Test.App.f90);
                    $("#SageRadius").on("click", $asm.$.Test.App.f91);
                    $("#SageDiameter").on("click", $asm.$.Test.App.f92);
                    $("#SageGirth").on("click", $asm.$.Test.App.f93);
                    $("#SageEdgeConnectivity").on("click", $asm.$.Test.App.f94);
                    $("#SageVertexConnectivity").on("click", $asm.$.Test.App.f95);
                    $("#SageIsHamiltonian").on("click", $asm.$.Test.App.f96);
                    $("#SageCharacteristicPolynomial").on("click", $asm.$.Test.App.f97);
                    $("#SageGenus").on("click", $asm.$.Test.App.f98);


                    $("#SageLayoutSprings").on("click", $asm.$.Test.App.f99);
                    $("#SageLayoutRanked").on("click", $asm.$.Test.App.f100);
                    $("#SageLayoutRandom").on("click", $asm.$.Test.App.f101);
                    $("#SageLayoutCircular").on("click", $asm.$.Test.App.f102);
                    $("#SageLayoutTree").on("click", $asm.$.Test.App.f103);
                    $("#SageLayoutGraphViz").on("click", $asm.$.Test.App.f104);
                    $("#SageLayoutPlanar").on("click", $asm.$.Test.App.f105);

                    $(".NamedGraph").on("click", $asm.$.Test.App.f106);



                    Test.App.NewTab();
                    Test.App.AddNewSheetTab();

                    $(".nav-tabs").on("click", "a", $asm.$.Test.App.f107);

                    $(".new-sheet-anchor").on("click", $asm.$.Test.App.f108);
                },
                AddNewSheetTab: function () {
                    var tabControl = document.getElementById("TabControl");
                    Test.App._newSheetTab = document.createElement('li');
                    Test.App._newSheetTab.id = "new-sheet";

                    var anchor = document.createElement('a');
                    anchor.className = "new-sheet-anchor";
                    anchor.textContent = "+";
                    anchor.href = "#";

                    Test.App._newSheetTab.appendChild(anchor);
                    tabControl.appendChild(Test.App._newSheetTab);
                },
                NewTab: function (name, G) {
                    var $t, $t1;
                    if (name === void 0) { name = null; }
                    if (G === void 0) { G = null; }
                    if (System.String.isNullOrEmpty(name)) {
                        name = "sheet " + Test.App._tabID;
                    }

                    var canvas = document.createElement('canvas');
                    canvas.id = "Tab" + Test.App._tabID;
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                    canvas.className = "IAmAGraphCanvas";

                    canvas.onshow = Bridge.fn.combine(canvas.onshow, function () {
                        canvas.width = canvas.parentElement.clientWidth;
                        canvas.height = canvas.parentElement.clientHeight;
                    });

                    if (G == null) {
                        G = new Graphs.Graph.ctor();
                    }
                    var graphCanvas = new Graphs.GraphCanvas(G);
                    var tc = new Test.TabCanvas(canvas, graphCanvas);
                    tc.Invalidate();

                    var tabPane = document.createElement('div');
                    tabPane.className = "tab-pane active";
                    tabPane.id = "Tab" + Test.App._tabID;
                    tabPane.appendChild(canvas);

                    var tabControlContent = document.getElementById("TabControlContent");
                    $t = Bridge.getEnumerator(tabControlContent.children);
                    try {
                        while ($t.moveNext()) {
                            var child = $t.Current;
                            child.className = "tab-pane";
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }tabControlContent.appendChild(tabPane);

                    var tab = document.createElement('li');
                    tab.className = "active";

                    var anchor = document.createElement('a');
                    anchor.setAttribute("data-toggle", "tab");
                    anchor.textContent = name;
                    anchor.href = "#Tab" + Test.App._tabID;
                    Test.App._canvasLookup.set(anchor.href, tc);
                    Test.App._currentTabCanvas = anchor.href;

                    tab.appendChild(anchor);

                    var tabControl = document.getElementById("TabControl");
                    $t1 = Bridge.getEnumerator(tabControl.children);
                    try {
                        while ($t1.moveNext()) {
                            var child1 = $t1.Current;
                            child1.className = "narf";
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }tabControl.insertBefore(tab, Test.App._newSheetTab);

                    Test.App._tabID = (Test.App._tabID + 1) | 0;
                },
                OnKeyDown: function (e) {
                    var tc = Test.App.CurrentTabCanvas;

                    switch (e.key) {
                        case "f": 
                            tc.GraphCanvas.DoZoomFit();
                            break;
                        case "-": 
                            tc.GraphCanvas.DoZoom(-1, new GraphicsLayer.Box.ctor(0.5, 0.5));
                            break;
                        case "+": 
                            tc.GraphCanvas.DoZoom(1, new GraphicsLayer.Box.ctor(0.5, 0.5));
                            break;
                        case "i": 
                            tc.GraphCanvas.ToggleVertexIndices();
                            break;
                        case "I": 
                            tc.GraphCanvas.RotateVertexIndices();
                            break;
                        case "j": 
                            tc.GraphCanvas.ToggleEdgeIndices();
                            break;
                        case "J": 
                            tc.GraphCanvas.RotateEdgeIndices();
                            break;
                        case "r": 
                            tc.GraphCanvas.DoReverseSelectedEdges();
                            break;
                        case "R": 
                            tc.GraphCanvas.DoRotateSelectedEdges();
                            break;
                        case "y": 
                            if (e.ctrlKey) {
                                tc.GraphCanvas.DoRedo();
                            }
                            break;
                        case "z": 
                            if (e.ctrlKey) {
                                tc.GraphCanvas.DoUndo();
                            }
                            break;
                    }
                },
                AskSage: function (s) {
                    var div = Test.App.AppendSageDiv(s);

                    sagecell.makeSagecell({"inputLocation": "div.compute", hide: ["permalink", "fullScreen"], autoeval:false});
                    $("#SageModal").modal('show');
                },
                AskSageAuto: function (s) {
                    Test.App.AppendSageDiv(s);

                    sagecell.makeSagecell({"inputLocation": "div.compute", hide: ["permalink", "evalButton", "fullScreen", "editor"], autoeval:true});
                    $("#SageModal").modal('show');
                },
                AskSageAsync: function (G, sageCodeAboutG) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1], $step);
                                    switch ($step) {
                                        case 0: {
                                            $task1 = Test.App.AskSageAsync$1(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(G.GetEdgeWeights()), "')", '\n', sageCodeAboutG));
                                            $step = 1;
                                            $task1.continueWith($asyncBody);
                                            return;
                                        }
                                        case 1: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                AskSageAsync$1: function (sageCode) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        output, 
                        response, 
                        ss, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4], $step);
                                    switch ($step) {
                                        case 0: {
                                            output = document.getElementById("SageSecretOutputHole");
                                            output.textContent = "working";
                                            Test.App.AppendSageDiv(sageCode);

                                            sagecell.makeSagecell({"inputLocation": "div.compute", hide: ["permalink", "evalButton", "fullScreen", "editor"], autoeval:true, outputLocation:"#SageSecretOutputHole"});

                                            
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            if ( !System.String.contains(output.textContent,"Accepted:") ) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $task1 = System.Threading.Tasks.Task.delay(100);
                                            $step = 3;
                                            $task1.continueWith($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task1.getAwaitedResult();
                                            
                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {
                                            response = output.textContent;
                                            if (System.String.isNullOrEmpty(response)) {
                                                $tcs.setResult("flibble");
                                                return;
                                            }

                                            ss = System.Linq.Enumerable.from(System.String.split(response, System.Array.init(['\n'], System.String), null, 1)).firstOrDefault($asm.$.Test.App.f109, null);
                                            if (System.String.isNullOrEmpty(ss)) {
                                                $tcs.setResult("flabble");
                                                return;
                                            }

                                            ss = ss.substr(((((System.String.indexOf(ss, "text/plain") + ("text/plain").length) | 0) + 3) | 0));
                                            ss = ss.substr(0, System.String.indexOf(ss, "\""));

                                            $tcs.setResult(ss);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                AppendSageDiv: function (s) {
                    var $t;
                    if (Test.App._sageContainer.childElementCount > 0) {
                        Test.App._sageContainer.removeChild(($t = Test.App._sageContainer.children)[System.Array.index(0, $t)]);
                    }
                    var div = document.createElement('div');
                    div.className = "compute";
                    div.textContent = s;
                    Test.App._sageContainer.appendChild(div);

                    return div;
                }
            }
        }
    });

    Bridge.ns("Test.App", $asm.$);

    Bridge.apply($asm.$.Test.App, {
        f1: function (e) {
            if ((Bridge.is(e.target, HTMLSpanElement)) || (Bridge.is(e.target, HTMLAnchorElement))) {
                e.preventDefault();
            }
            var tc = Test.App._canvasLookup.get(Test.App._currentTabCanvas);
            var s = tc.GraphCanvas.DoCopy();
            if (!System.String.isNullOrEmpty(s)) {
                e.clipboardData.setData("Text", s);
            }
        },
        f2: function (e) {
            e.preventDefault();
            var s = e.clipboardData.getData("Text");
            var tc = Test.App._canvasLookup.get(Test.App._currentTabCanvas);
            tc.GraphCanvas.DoPaste(s || "");
        },
        f3: function (e) {
            e.preventDefault();
        },
        f4: function () {
            Test.App.CurrentTabCanvas.SageManual();
        },
        f5: function () {
            Test.App.CurrentTabCanvas.SageGraph6();
        },
        f6: function () {
            Test.App.CurrentTabCanvas.SageSparse6();
        },
        f7: function () {
            Test.App.CurrentTabCanvas.SageChromaticNumber();
        },
        f8: function () {
            Test.App.CurrentTabCanvas.SageChromaticPolynomial();
        },
        f9: function () {
            Test.App.CurrentTabCanvas.SageColoring();
        },
        f10: function () {
            Test.App.CurrentTabCanvas.SageIndependentSet();
        },
        f11: function () {
            Test.App.CurrentTabCanvas.SageIsPerfect();
        },
        f12: function () {
            Test.App.CurrentTabCanvas.SageMatchingPolynomial();
        },
        f13: function () {
            Test.App.CurrentTabCanvas.SagePathwidth();
        },
        f14: function () {
            Test.App.CurrentTabCanvas.SageTreewidth();
        },
        f15: function () {
            Test.App.CurrentTabCanvas.SageTuttePolynomial();
        },
        f16: function () {
            Test.App.CurrentTabCanvas.SageVertexCover();
        },
        f17: function () {
            Test.App.CurrentTabCanvas.SageCliqueComplex();
        },
        f18: function () {
            Test.App.CurrentTabCanvas.SageCliqueMaximum();
        },
        f19: function () {
            Test.App.CurrentTabCanvas.SageCliqueNumber();
        },
        f20: function () {
            Test.App.CurrentTabCanvas.SageCliquePolynomial();
        },
        f21: function () {
            Test.App.CurrentTabCanvas.SageBridges();
        },
        f22: function () {
            Test.App.CurrentTabCanvas.SageGomoryHuTree();
        },
        f23: function () {
            Test.App.CurrentTabCanvas.SageRandomSpanningTree();
        },
        f24: function () {
            Test.App.CurrentTabCanvas.SageApexVertices();
        },
        f25: function () {
            Test.App.CurrentTabCanvas.SageIsApex();
        },
        f26: function () {
            Test.App.CurrentTabCanvas.SageIsArcTransitive();
        },
        f27: function () {
            Test.App.CurrentTabCanvas.SageIsAsteroidalTripleFree();
        },
        f28: function () {
            Test.App.CurrentTabCanvas.SageIsBiconnected();
        },
        f29: function () {
            Test.App.CurrentTabCanvas.SageIsBipartite();
        },
        f30: function () {
            Test.App.CurrentTabCanvas.SageIsBlockGraph();
        },
        f31: function () {
            Test.App.CurrentTabCanvas.SageIsCartesianProduct();
        },
        f32: function () {
            Test.App.CurrentTabCanvas.SageIsDistanceRegular();
        },
        f33: function () {
            Test.App.CurrentTabCanvas.SageIsEdgeTransitive();
        },
        f34: function () {
            Test.App.CurrentTabCanvas.SageIsEvenHoleFree();
        },
        f35: function () {
            Test.App.CurrentTabCanvas.SageIsForest();
        },
        f36: function () {
            Test.App.CurrentTabCanvas.SageIsHalfTransitive();
        },
        f37: function () {
            Test.App.CurrentTabCanvas.SageIsLineGraph();
        },
        f38: function () {
            Test.App.CurrentTabCanvas.SageIsLongAntiholeFree();
        },
        f39: function () {
            Test.App.CurrentTabCanvas.SageIsLongHoleFree();
        },
        f40: function () {
            Test.App.CurrentTabCanvas.SageIsOddHoleFree();
        },
        f41: function () {
            Test.App.CurrentTabCanvas.SageIsOverfull();
        },
        f42: function () {
            Test.App.CurrentTabCanvas.SageIsPartialCube();
        },
        f43: function () {
            Test.App.CurrentTabCanvas.SageIsPrime();
        },
        f44: function () {
            Test.App.CurrentTabCanvas.SageIsSemiSymmetric();
        },
        f45: function () {
            Test.App.CurrentTabCanvas.SageIsSplit();
        },
        f46: function () {
            Test.App.CurrentTabCanvas.SageIsStronglyRegular();
        },
        f47: function () {
            Test.App.CurrentTabCanvas.SageIsTree();
        },
        f48: function () {
            Test.App.CurrentTabCanvas.SageIsTriangleFree();
        },
        f49: function () {
            Test.App.CurrentTabCanvas.SageIsWeaklyChordal();
        },
        f50: function () {
            Test.App.CurrentTabCanvas.SageOddGirth();
        },
        f51: function () {
            Test.App.CurrentTabCanvas.SageFractionalChromaticIndex();
        },
        f52: function () {
            Test.App.CurrentTabCanvas.SageHasPerfectMatching();
        },
        f53: function () {
            Test.App.CurrentTabCanvas.SageKirchhoffSymanzikPolynomial();
        },
        f54: function () {
            Test.App.CurrentTabCanvas.SageLovaszTheta();
        },
        f55: function () {
            Test.App.CurrentTabCanvas.SageMatching();
        },
        f56: function () {
            Test.App.CurrentTabCanvas.SageMaximumAverageDegree();
        },
        f57: function () {
            Test.App.CurrentTabCanvas.SageSeidelAdjacencyMatrix();
        },
        f58: function () {
            Test.App.CurrentTabCanvas.SageNetworkxGraph();
        },
        f59: function () {
            Test.App.CurrentTabCanvas.SageAdjacencyMatrix();
        },
        f60: function () {
            Test.App.CurrentTabCanvas.SageIncidenceMatrix();
        },
        f61: function () {
            Test.App.CurrentTabCanvas.SageDistanceMatrix();
        },
        f62: function () {
            Test.App.CurrentTabCanvas.SageKirchhoffMatrix();
        },
        f63: function () {
            Test.App.CurrentTabCanvas.SageDensity();
        },
        f64: function () {
            Test.App.CurrentTabCanvas.SageOrder();
        },
        f65: function () {
            Test.App.CurrentTabCanvas.SageSize();
        },
        f66: function () {
            Test.App.CurrentTabCanvas.SageAverageDegree();
        },
        f67: function () {
            Test.App.CurrentTabCanvas.SageDegreeSequence();
        },
        f68: function () {
            Test.App.CurrentTabCanvas.SageCycleBasis();
        },
        f69: function () {
            Test.App.CurrentTabCanvas.SageAllPaths();
        },
        f70: function () {
            Test.App.CurrentTabCanvas.SageTrianglesCount();
        },
        f71: function () {
            Test.App.CurrentTabCanvas.SageSpectrum();
        },
        f72: function () {
            Test.App.CurrentTabCanvas.SageEigenvectors();
        },
        f73: function () {
            Test.App.CurrentTabCanvas.SageEigenspaces();
        },
        f74: function () {
            Test.App.CurrentTabCanvas.SageAutomorphismGroup();
        },
        f75: function () {
            Test.App.CurrentTabCanvas.SageIsVertexTransitive();
        },
        f76: function () {
            Test.App.CurrentTabCanvas.SageCanonicalLabel();
        },
        f77: function () {
            Test.App.CurrentTabCanvas.SageIsCayley();
        },
        f78: function () {
            Test.App.CurrentTabCanvas.SageIsEulerian();
        },
        f79: function () {
            Test.App.CurrentTabCanvas.SageIsPlanar();
        },
        f80: function () {
            Test.App.CurrentTabCanvas.SageIsRegular();
        },
        f81: function () {
            Test.App.CurrentTabCanvas.SageIsChordal();
        },
        f82: function () {
            Test.App.CurrentTabCanvas.SageIsCirculant();
        },
        f83: function () {
            Test.App.CurrentTabCanvas.SageIsInterval();
        },
        f84: function () {
            Test.App.CurrentTabCanvas.SageIsGallaiTree();
        },
        f85: function () {
            Test.App.CurrentTabCanvas.SageIsClique();
        },
        f86: function () {
            Test.App.CurrentTabCanvas.SageIsCycle();
        },
        f87: function () {
            Test.App.CurrentTabCanvas.SageIsIndependentSet();
        },
        f88: function () {
            Test.App.CurrentTabCanvas.SageIsTransitivelyReduced();
        },
        f89: function () {
            Test.App.CurrentTabCanvas.SageIsEquitable();
        },
        f90: function () {
            Test.App.CurrentTabCanvas.SageEccentricity();
        },
        f91: function () {
            Test.App.CurrentTabCanvas.SageRadius();
        },
        f92: function () {
            Test.App.CurrentTabCanvas.SageDiameter();
        },
        f93: function () {
            Test.App.CurrentTabCanvas.SageGirth();
        },
        f94: function () {
            Test.App.CurrentTabCanvas.SageEdgeConnectivity();
        },
        f95: function () {
            Test.App.CurrentTabCanvas.SageVertexConnectivity();
        },
        f96: function () {
            Test.App.CurrentTabCanvas.SageIsHamiltonian();
        },
        f97: function () {
            Test.App.CurrentTabCanvas.SageCharacteristicPolynomial();
        },
        f98: function () {
            Test.App.CurrentTabCanvas.SageGenus();
        },
        f99: function () {
            Test.App.CurrentTabCanvas.SageLayoutSpring();
        },
        f100: function () {
            Test.App.CurrentTabCanvas.SageLayoutRanked();
        },
        f101: function () {
            Test.App.CurrentTabCanvas.SageLayoutExtendRandomly();
        },
        f102: function () {
            Test.App.CurrentTabCanvas.SageLayoutCircular();
        },
        f103: function () {
            Test.App.CurrentTabCanvas.SageLayoutTree();
        },
        f104: function () {
            Test.App.CurrentTabCanvas.SageLayoutGraphviz();
        },
        f105: function () {
            Test.App.CurrentTabCanvas.SageLayoutPlanar();
        },
        f106: function (ee) {
            Test.App.CurrentTabCanvas.SageLoadNamedGraph(Bridge.cast(ee.currentTarget, HTMLElement).textContent);
        },
        f107: function (ee) {
            ee.preventDefault();
            if (!$(this).hasClass("new-sheet-anchor")) {
                var d = $(this);
                Test.App._currentTabCanvas = ee.target.href;
                var canvas = Test.App.CurrentTabCanvas.Canvas;
                d.tab("show");
            }
        },
        f108: function (ee) {
            ee.preventDefault();
            Test.App.NewTab();
        },
        f109: function (line) {
        return System.String.contains(line,"Accepted:");
    }
    });

    Bridge.define("Test.HelperExtensions", {
        statics: {
            methods: {
                ToColor: function (argb) {
                    return System.String.format("rgba({0},{1},{2},{3:0.00})", Bridge.box(argb.R, System.Int32), Bridge.box(argb.G, System.Int32), Bridge.box(argb.B, System.Int32), Bridge.box(argb.A / 255.0, System.Double, System.Double.format, System.Double.getHashCode));
                }
            }
        }
    });

    Bridge.define("Test.LayoutAnimation", {
        statics: {
            fields: {
                Steps: 0
            },
            ctors: {
                init: function () {
                    this.Steps = 100;
                }
            }
        },
        fields: {
            _update: null,
            _finalUpdate: null,
            _layout: null,
            _xstep: null,
            _ystep: null,
            _step: 0,
            _G: null
        },
        ctors: {
            init: function () {
                this._step = 0;
            },
            ctor: function (update, finalUpdate, layout, G) {
                this.$initialize();
                this._G = G;
                this._update = update;
                this._finalUpdate = finalUpdate;
                this._layout = layout;

                try {
                    this._xstep = System.Array.init(this._layout.Count, 0, System.Double);
                    this._ystep = System.Array.init(this._layout.Count, 0, System.Double);
                    for (var i = 0; i < this._layout.Count; i = (i + 1) | 0) {
                        this._xstep[System.Array.index(i, this._xstep)] = (this._layout.getItem(i).X - this._G.Vertices.getItem(i).X) / Test.LayoutAnimation.Steps;
                        this._ystep[System.Array.index(i, this._ystep)] = (this._layout.getItem(i).Y - this._G.Vertices.getItem(i).Y) / Test.LayoutAnimation.Steps;
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            }
        },
        methods: {
            Animate: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        if ( this._step < Test.LayoutAnimation.Steps ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        this.DoStep();
                                        $task1 = System.Threading.Tasks.Task.delay(10);
                                        $step = 3;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoStep: function () {
                var $t, $t1;
                for (var i = 0; i < this._layout.Count; i = (i + 1) | 0) {
                    $t = this._G.Vertices.getItem(i);
                    $t.X += this._xstep[System.Array.index(i, this._xstep)];
                    $t1 = this._G.Vertices.getItem(i);
                    $t1.Y += this._ystep[System.Array.index(i, this._ystep)];
                }

                this._update();
                this._step = (this._step + 1) | 0;
                if (this._step >= Test.LayoutAnimation.Steps) {
                    this.OnFinish();
                }
            },
            OnFinish: function () {
                for (var i = 0; i < this._layout.Count; i = (i + 1) | 0) {
                    this._G.Vertices.getItem(i).X = this._layout.getItem(i).X;
                    this._G.Vertices.getItem(i).Y = this._layout.getItem(i).Y;
                }
                this._finalUpdate();
            }
        }
    });

    Bridge.define("Algorithms.DataStructures.UnionFindTrackedRoots$1", function (T) { return {
        inherits: [Algorithms.DataStructures.UnionFind$1(T)],
        fields: {
            _roots: null
        },
        ctors: {
            init: function () {
                this._roots = new (System.Collections.Generic.List$1(Algorithms.DataStructures.UnionFind$1.Node(T)))();
            }
        },
        methods: {
            FindAllExcept: function (nodes) {
                return System.Linq.Enumerable.from(this._roots).except(System.Linq.Enumerable.from(nodes).select(Bridge.fn.bind(this, function (n) {
                            return this.Find(n);
                        })));
            },
            RootAdded: function (n) {
                this._roots.add(n);
            },
            RootRemoved: function (n) {
                this._roots.remove(n);
            }
        }
    }; });

    Bridge.define("Algorithms.FixerBreaker.Chronicle.ChronicledBranch", {
        inherits: [System.Collections.Generic.IEnumerable$1(System.Collections.Generic.IEnumerable$1(Algorithms.FixerBreaker.Move))],
        props: {
            Alpha: 0,
            Beta: 0,
            SwapComponents: null
        },
        alias: ["getEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$IEnumerable$1$Algorithms$FixerBreaker$Move$getEnumerator", "System$Collections$Generic$IEnumerable$1$getEnumerator"]],
        ctors: {
            ctor: function (S, alpha, beta, partitions) {
                this.$initialize();
                this.Alpha = alpha;
                this.Beta = beta;
                this.SwapComponents = System.Linq.Enumerable.from(partitions).select(function (p) {
                        return System.Linq.Enumerable.from(p).select(function (i) {
                                return S.getItem(i);
                            }).toList(System.Int32);
                    }).toList(System.Collections.Generic.List$1(System.Int32));
            }
        },
        methods: {
            getEnumerator: function () {
                return System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.EnumerateShortLexNonempty(this.SwapComponents.Count)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.Chronicle.ChronicledBranch.f1)).getEnumerator();
            },
            System$Collections$IEnumerable$getEnumerator: function () {
                return this.getEnumerator();
            },
            EnumerateMoves: function (cf) {
                return new (Bridge.GeneratorEnumerable$1(Algorithms.FixerBreaker.Move))(Bridge.fn.bind(this, function (cf) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        $t,
                        s,
                        $t1,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.FixerBreaker.Move))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = 0;
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ( i < cf.Count ) {
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 8;
                                        continue;
                                    }
                                    case 2: {
                                        if (!cf.getItem(i)) {
                                                $step = 7;
                                                continue;
                                            }

                                            $t = Bridge.getEnumerator(this.SwapComponents.getItem(i));
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ($t.moveNext()) {
                                                s = $t.Current;
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = ($t1 = new Algorithms.FixerBreaker.Move(), $t1.Added = this.Alpha, $t1.Removed = this.Beta, $t1.Stack = s, $t1);
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 8: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.Chronicle.ChronicledBranch", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.Chronicle.ChronicledBranch, {
        f1: function (cf) {
            return this.EnumerateMoves(cf);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        statics: {
            methods: {
                ColorableWithoutEdge: function (knowledge, board, edgeIndex) {
                    return Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge$1(knowledge, board.Stacks, edgeIndex);
                },
                ColorableWithoutEdge$1: function (knowledge, stacks, edgeIndex) {
                    var lg = knowledge.GraphKnowledge.LineGraph;

                    return lg.IsChoosable(System.Linq.Enumerable.range(0, lg.N).select(function (e) {
                        if (e === edgeIndex) {
                            return System.Int64(-1);
                        }

                        return knowledge.GetEdgeColorList$1(stacks, e);
                    }).toList(System.Int64));
                }
            }
        },
        props: {
            Reason: {
                get: function () {
                    return "color all";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        methods: {
            Analyze: function (knowledge, board) {
                var lineGraph = knowledge.GraphKnowledge.LineGraph;
                var canColor = lineGraph.IsChoosable(System.Linq.Enumerable.range(0, lineGraph.N).select(function (e) {
                    return knowledge.GetEdgeColorList(board, e);
                }).toList(System.Int64));

                if (canColor) {
                    knowledge.getItem(board.Template.Value).getItem(board.ColorCount).AddWin(board, this.Reason);
                }

                return canColor;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.CommonColorAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        props: {
            Reason: {
                get: function () {
                    return "common color";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        methods: {
            Analyze: function (knowledge, board) {
                var commonColor = System.Linq.Enumerable.from(board.Stacks).aggregate(System.Int64(-1), $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.CommonColorAnalyzer.f1).ne(System.Int64(0));

                if (commonColor) {
                    knowledge.getItem(board.Template.Value).getItem(board.ColorCount).AddWin(board, this.Reason);
                }

                return commonColor;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.CommonColorAnalyzer", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.CommonColorAnalyzer, {
        f1: function (t, s) {
            return t.and(s);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.SwapAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        props: {
            FindCleanestWin: false,
            DoSuperabundantCheck: false,
            Reason: {
                get: function () {
                    return "good swap";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return true;
                }
            },
            ChildReason: {
                get: function () {
                    return "";
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        ctors: {
            ctor: function (findCleanestWin, superabundantOnly) {
                if (findCleanestWin === void 0) { findCleanestWin = true; }
                if (superabundantOnly === void 0) { superabundantOnly = true; }

                this.$initialize();
                this.FindCleanestWin = findCleanestWin;
                this.DoSuperabundantCheck = superabundantOnly;
            }
        },
        methods: {
            IsChildBoardBetter: function (knowledge, board, childBoard) {
                return false;
            },
            Analyze: function (knowledge, board) {
                var $t, $t1, $t2;
                var potKnowledge = knowledge.getItem(board.Template.Value).getItem(board.ColorCount);
                var graphKnowledge = knowledge.GraphKnowledge;

                var boardKnowledge = potKnowledge.getItem(board);
                if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(boardKnowledge)) {
                    return true;
                }

                var win = false;
                var winDepth = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Infinity;
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(potKnowledge.ColorPairs).orderByDescending(function (pair) {
                        return System.Linq.Enumerable.from(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateExactlyOneIntersecters(board, pair)).count() % 2;
                    }));
                try {
                    while ($t.moveNext()) {
                        var colorPair = $t.Current;
                        var colorPairWinDepth = 0;
                        var winningSwaps = new (System.Collections.Generic.List$1(System.Object))();
                        var improvingSwaps = new (System.Collections.Generic.List$1(System.Object))();
                        var winningSwapAlwaysExists = true;
                        var improvingSwapAlwaysExists = true;

                        $t1 = Bridge.getEnumerator(Algorithms.FixerBreaker.Chronicle.BranchGenerator.EnumerateBranches(board, colorPair), Algorithms.FixerBreaker.Chronicle.ChronicledBranch);
                        try {
                            while ($t1.moveNext()) {
                                var branch = $t1.Current;
                                var winningSwap = null;
                                var improvingSwap = null;

                                var branchWinDepth = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Infinity;

                                $t2 = Bridge.getEnumerator(branch);
                                try {
                                    while ($t2.moveNext()) {
                                        var swap = $t2.Current;
                                        var childBoard = board.Clone();
                                        childBoard.DoMoveCombination(swap);

                                        if (this.DoSuperabundantCheck && !Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition(graphKnowledge.Graph, childBoard)) {
                                            continue;
                                        }

                                        var childBoardKnowledge = potKnowledge.getItem(childBoard);
                                        if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(childBoardKnowledge) && ((childBoardKnowledge.Depth + 1) | 0) < branchWinDepth) {
                                            branchWinDepth = (childBoardKnowledge.Depth + 1) | 0;
                                            winningSwap = { item1: branch.SwapComponents, item2: System.Linq.Enumerable.from(swap).toList(Algorithms.FixerBreaker.Move), item3: childBoardKnowledge.Reason };

                                            if (!this.FindCleanestWin) {
                                                break;
                                            }
                                        } else if (this.IsChildBoardBetter(knowledge, board, childBoard)) {
                                            improvingSwap = { item1: branch.SwapComponents, item2: System.Linq.Enumerable.from(swap).toList(Algorithms.FixerBreaker.Move), item3: System.String.concat(this.ChildReason, " better") };
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$dispose();
                                    }
                                }
                                colorPairWinDepth = Math.max(colorPairWinDepth, branchWinDepth);

                                if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(winningSwap)) {
                                    winningSwaps.add(winningSwap);
                                    improvingSwaps.add(winningSwap);
                                } else {
                                    winningSwapAlwaysExists = false;
                                    if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Exists(improvingSwap)) {
                                        improvingSwaps.add(improvingSwap);
                                    } else {
                                        improvingSwapAlwaysExists = false;
                                        break;
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        if (winningSwapAlwaysExists) {
                            if (colorPairWinDepth < winDepth) {
                                winDepth = colorPairWinDepth;

                                win = true;
                                potKnowledge.AddWin$1(board, this.Reason, winDepth, colorPair, winningSwaps);

                                if (!this.FindCleanestWin) {
                                    break;
                                }
                            }
                        } else if (improvingSwapAlwaysExists) {
                            potKnowledge.AddImprovement(board, this.ChildReason, colorPairWinDepth, colorPair, improvingSwaps);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return win;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.KiersteadAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        statics: {
            methods: {
                IsKierstead: function (knowledge, board, enforceDegreeRequirement, reason) {
                    if (enforceDegreeRequirement === void 0) { enforceDegreeRequirement = false; }
                    if (reason === void 0) { reason = ""; }
                    return System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.KiersteadAnalyzer.EnumerateKiersteadEdgeIndices(knowledge, board, enforceDegreeRequirement, reason)).any();
                },
                IsKierstead$1: function (knowledge, board, edgeIndex, enforceDegreeRequirement) {
                    var $t;
                    if (enforceDegreeRequirement === void 0) { enforceDegreeRequirement = false; }
                    $t = Bridge.getEnumerator(knowledge.GraphKnowledge.ConnectedOrderings.Value.get(knowledge.GraphKnowledge.Edges.getItem(edgeIndex)));
                    try {
                        while ($t.moveNext()) {
                            var ordering = $t.Current;
                            var penultimate = ordering.getItem(((ordering.Count - 2) | 0));
                            if (enforceDegreeRequirement && Algorithms.Int64Usage.PopulationCount(board.Stacks.getItem(penultimate)) <= knowledge.GraphKnowledge.Graph.Degree(penultimate)) {
                                continue;
                            }

                            if (Algorithms.FixerBreaker.KnowledgeEngine.KiersteadAnalyzer.IsKierstead$2(knowledge, board, edgeIndex, ordering)) {
                                return true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return false;
                },
                IsKierstead$2: function (knowledge, board, edgeIndex, ordering) {
                    var gn = knowledge.GraphKnowledge;

                    return gn.LineGraph.IsChoosable(System.Linq.Enumerable.range(0, gn.LineGraph.N).select(function (e) {
                        var $t;
                        if (e === edgeIndex) {
                            return System.Int64(-1);
                        }

                        var edge = gn.Edges.getItem(e);
                        var j = Math.max(ordering.indexOf(edge.item1), ordering.indexOf(edge.item2));
                        var priorStacks = System.Linq.Enumerable.from(board.Stacks).where(function (stack, i) {
                                return ordering.indexOf(i) < j;
                            }).toList(System.Int64);

                        var allowedList = System.Int64(0);
                        var list = knowledge.GetEdgeColorList(board, e);
                        $t = Bridge.getEnumerator(Algorithms.Int64Usage.EnumerateBits(list), System.Int32);
                        try {
                            while ($t.moveNext()) {
                                var alpha = $t.Current;
                                if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.d_H(alpha, priorStacks) % 2 === 0) {
                                    allowedList = Algorithms.Int64Usage.SetBit(allowedList, System.Int64(alpha));
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        return allowedList;
                    }).toList(System.Int64));
                },
                EnumerateKiersteadEdgeIndices: function (knowledge, board, enforceDegreeRequirement, reason) {
                    return new (Bridge.GeneratorEnumerable$1(System.Int32))(Bridge.fn.bind(this, function (knowledge, board, enforceDegreeRequirement, reason) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            g,
                            internalVertices,
                            $t,
                            edgeIndex,
                            e,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Int32))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (enforceDegreeRequirement === void 0) { enforceDegreeRequirement = false; }
                                                if (reason === void 0) { reason = ""; }
                                                g = knowledge.GraphKnowledge.Graph;
                                                internalVertices = System.Linq.Enumerable.from(g.Vertices).where(function (v) {
                                                        return g.Degree(v) >= 2;
                                                    }).toList(System.Int32);

                                                $t = Bridge.getEnumerator(knowledge.GraphKnowledge.EdgeIndices);
                                                $step = 1;
                                                continue;
                                        }
                                        case 1: {
                                            if ($t.moveNext()) {
                                                    edgeIndex = $t.Current;
                                                    $step = 2;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 2: {
                                            e = knowledge.GraphKnowledge.Edges.getItem(edgeIndex);
                                                if (internalVertices.contains(e.item1) && internalVertices.contains(e.item2)) {
                                                    $step = 1;
                                                    continue;
                                                }

                                                if (Algorithms.FixerBreaker.KnowledgeEngine.KiersteadAnalyzer.IsKierstead$1(knowledge, board, edgeIndex)) {
                                                    $step = 3;
                                                    continue;
                                                } 
                                                $step = 5;
                                                continue;
                                        }
                                        case 3: {
                                            knowledge.getItem(board.Template.Value).getItem(board.ColorCount).AddWin(board, reason);
                                                $enumerator.current = edgeIndex;
                                                $step = 4;
                                                return true;
                                        }
                                        case 4: {
                                            $step = 5;
                                            continue;
                                        }
                                        case 5: {
                                            $step = 1;
                                            continue;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        },
        props: {
            Reason: {
                get: function () {
                    return "run kierstead";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        methods: {
            Analyze: function (knowledge, board) {
                return Algorithms.FixerBreaker.KnowledgeEngine.KiersteadAnalyzer.IsKierstead(knowledge, board, true, this.Reason);
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.KnowledgeTree", {
        inherits: function () { return [Algorithms.FixerBreaker.Tree$1(Algorithms.FixerBreaker.KnowledgeEngine.KnowledgeTree)]; },
        props: {
            Swap: null,
            ColorPair: null,
            Board: null,
            Note: null,
            Number: 0
        },
        methods: {
            AddChild$1: function (swap) {
                var $t;
                var child = ($t = new Algorithms.FixerBreaker.KnowledgeEngine.KnowledgeTree(), $t.Swap = swap, $t);
                this.AddChild(child);

                return child;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.ReductionAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        props: {
            Reason: {
                get: function () {
                    return "reducible";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        methods: {
            Analyze: function (knowledge, board) {
                var $t, $t1;
                var g = knowledge.GraphKnowledge.Graph;

                $t = Bridge.getEnumerator(knowledge.GraphKnowledge.Edges);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        var x = { v : Math.min(e.item1, e.item2) };
                        var y = { v : Math.max(e.item1, e.item2) };

                        var common = board.Stacks.getItem(x.v).and(board.Stacks.getItem(y.v));
                        var stacks = System.Linq.Enumerable.from(board.Stacks).toList(System.Int64);

                        $t1 = Bridge.getEnumerator(Algorithms.Int64Usage.EnumerateBits(common), System.Int32);
                        try {
                            while ($t1.moveNext()) {
                                var c = $t1.Current;
                                stacks.setItem(x.v, Algorithms.Int64Usage.ClearBit(board.Stacks.getItem(x.v), System.Int64(c)));
                                stacks.setItem(y.v, Algorithms.Int64Usage.ClearBit(board.Stacks.getItem(y.v), System.Int64(c)));

                                if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition$1(g, stacks, board.Pot, (function ($me, x, y) {
                                    return function (X) {
                                        return X.contains(x.v) && X.contains(y.v) ? 1 : 0;
                                    };
                                })(this, x, y))) {
                                    knowledge.getItem(board.Template.Value).getItem(board.ColorCount).AddWin(board, System.String.format("color {0}{1} with {2}", Bridge.box(((x.v + 1) | 0), System.Int32), Bridge.box(((y.v + 1) | 0), System.Int32), Bridge.box(c, System.Int32)));
                                    return true;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IMind],
        props: {
            StopAnalysisOnBreakerWin: false,
            NearlyColorableOnly: false,
            SuperabundantOnly: false,
            MinPot: 0,
            MaxPot: 0,
            BreakerWonBoard: null,
            FixerWonAllNearlyColorableBoards: false,
            TotalPositions: 0,
            Knowledge: null,
            ColoringAnalyzer: null,
            SwapAnalyzer: null,
            BoardLookup: null,
            BoardIDLookup: null,
            RemainingBoardIDs: null,
            WonBoardIDs: null,
            NextBoardID: 0
        },
        alias: [
            "MaxPot", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$MaxPot",
            "FixerWonAllNearlyColorableBoards", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$FixerWonAllNearlyColorableBoards",
            "TotalPositions", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$TotalPositions",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$Analyze"
        ],
        ctors: {
            ctor: function (g) {
                this.$initialize();
                this.SuperabundantOnly = false;
                this.NearlyColorableOnly = false;
                this.MaxPot = Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Infinity;
                this.Knowledge = new Algorithms.FixerBreaker.KnowledgeEngine.Knowledge(g);

                this.ColoringAnalyzer = new Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer();
            }
        },
        methods: {
            Analyze: function (template, progress) {
                var $t;
                if (progress === void 0) { progress = null; }
                this.BoardLookup = new (System.Collections.Generic.Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board))();
                this.BoardIDLookup = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32))();
                this.WonBoardIDs = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList();
                this.SwapAnalyzer = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimSwapAnalyzer(this.Knowledge, this.BoardLookup, this.BoardIDLookup);

                this.FixerWonAllNearlyColorableBoards = true;

                var minimumColorCount = Math.max(this.MinPot, System.Linq.Enumerable.from(template.Sizes).max());
                var maximumColorCount = Math.min(this.MaxPot, System.Linq.Enumerable.from(template.Sizes).sum());

                var foundAtLeastOneBoard = false;
                $t = Bridge.getEnumerator(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.Interval(minimumColorCount, maximumColorCount), System.Int32);
                try {
                    while ($t.moveNext()) {
                        var colorCount = $t.Current;
                        this.GenerateAllBoards(template, colorCount, progress);
                        if (foundAtLeastOneBoard && this.BoardLookup.count <= 0) {
                            break;
                        }

                        this.TotalPositions = this.BoardLookup.count;
                        foundAtLeastOneBoard = true;
                        this.RemainingBoardIDs = System.Linq.Enumerable.from(this.BoardLookup.getKeys()).toList(System.Int32);

                        var breakerWin = !this.Analyze$1(progress);
                        if (breakerWin && this.StopAnalysisOnBreakerWin) {
                            return false;
                        }

                        this.Knowledge.getItem(template).Promote(colorCount);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return System.Linq.Enumerable.from(this.Knowledge.getItem(template).LostBoards).count() <= 0;
            },
            Analyze$1: function (progress) {
                var $t;
                if (progress === void 0) { progress = null; }
                var winLength = 0;

                var totalBoards = this.RemainingBoardIDs.Count;
                var lastP = -1;

                for (var i = (this.RemainingBoardIDs.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    var id = this.RemainingBoardIDs.getItem(i);

                    var b = this.BoardLookup.get(id);
                    if (this.ColoringAnalyzer.Analyze(this.Knowledge, b)) {
                        this.RemainingBoardIDs.removeAt(i);
                        this.WonBoardIDs.Add(id);

                        if (!Bridge.staticEquals(progress, null)) {
                            var p = (Bridge.Int.div(Bridge.Int.mul(100, (((totalBoards - this.RemainingBoardIDs.Count) | 0))), totalBoards)) | 0;
                            if (p > lastP) {
                                progress({ item1: "Finding all colorable positions...", item2: p });
                                lastP = p;
                            }
                        }
                    }
                }

                while (this.RemainingBoardIDs.Count > 0) {
                    winLength = (winLength + 1) | 0;

                    var count = this.RemainingBoardIDs.Count;

                    for (var i1 = (this.RemainingBoardIDs.Count - 1) | 0; i1 >= 0; i1 = (i1 - 1) | 0) {
                        var id1 = this.RemainingBoardIDs.getItem(i1);

                        var b1 = this.BoardLookup.get(id1);
                        if (this.SwapAnalyzer.Analyze(id1, this.WonBoardIDs)) {
                            this.RemainingBoardIDs.removeAt(i1);
                            this.WonBoardIDs.Add(id1);

                            if (!Bridge.staticEquals(progress, null)) {
                                var p1 = (Bridge.Int.div(Bridge.Int.mul(100, (((totalBoards - this.RemainingBoardIDs.Count) | 0))), totalBoards)) | 0;
                                if (p1 > lastP) {
                                    progress({ item1: System.String.format("Finding all {0} move wins...", Bridge.box(winLength, System.Int32)), item2: p1 });
                                    lastP = p1;
                                }
                            }
                        }
                    }

                    if (this.RemainingBoardIDs.Count === count) {
                        $t = Bridge.getEnumerator(this.RemainingBoardIDs);
                        try {
                            while ($t.moveNext()) {
                                var id2 = $t.Current;
                                var b2 = this.BoardLookup.get(id2);
                                this.Knowledge.getItem(b2.Template.Value).getItem(b2.ColorCount).AddLoss(b2);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        var g = { v : this.Knowledge.GraphKnowledge.Graph };

                        var nearlyColorable = System.Linq.Enumerable.range(0, this.Knowledge.GraphKnowledge.LineGraph.N).all(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind.f1));
                        if (nearlyColorable) {
                            this.FixerWonAllNearlyColorableBoards = false;
                            this.BreakerWonBoard = System.Linq.Enumerable.from(this.RemainingBoardIDs).where((function ($me, g) {
                                    return Bridge.fn.bind($me, function (id3) {
                                        var b3 = this.BoardLookup.get(id3);
                                        return Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition(g.v, b3) && Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, b3, 0);
                                    });
                                })(this, g)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind.f2)).firstOrDefault(null, null);

                            if (this.BreakerWonBoard == null) {
                                this.BreakerWonBoard = this.BoardLookup.get(System.Linq.Enumerable.from(this.RemainingBoardIDs).first(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind.f3)));
                            }
                        }

                        return false;
                    }
                }

                return true;
            },
            GenerateAllBoards: function (template, colorCount, progress) {
                var $t;
                if (progress === void 0) { progress = null; }
                var boards = new (System.Collections.Generic.HashSet$1(Algorithms.FixerBreaker.Board)).ctor();

                var vertices = System.Linq.Enumerable.range(0, template.Sizes.Count).toList(System.Int32);
                var potSet = System.Linq.Enumerable.range(0, colorCount).toList(System.Int32);
                var pot = Algorithms.Int64Usage.ToInt64(potSet);

                var fix = System.Linq.Enumerable.from(vertices).orderBy(function (v) {
                        return Math.abs(((template.Sizes.getItem(v) - ((Bridge.Int.div(colorCount, 2)) | 0)) | 0));
                    }).first();
                var lastP = -1;
                var current = 0;
                var total = System.Linq.Enumerable.from(vertices).aggregate(System.Int64(1), function (x, v) {
                        if (v === fix) {
                            return x;
                        }

                        return x.mul(Algorithms.Utility.ListUtility.BinomialCoefficient(System.Int64(potSet.Count), System.Int64(template.Sizes.getItem(v))));
                    });

                $t = Bridge.getEnumerator(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(vertices).select(function (v) {
                        if (v === fix) {
                            return Algorithms.GenericExtensions.EnList(System.Collections.Generic.List$1(System.Int32), System.Linq.Enumerable.from(potSet).take(template.Sizes.getItem(v)).toList(System.Int32));
                        }

                        return Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, potSet, template.Sizes.getItem(v));
                    })), System.Collections.Generic.IEnumerable$1(System.Collections.Generic.List$1(System.Int32)));
                try {
                    while ($t.moveNext()) {
                        var assignmentSets = $t.Current;
                        var sets = System.Linq.Enumerable.from(assignmentSets).toList(System.Collections.Generic.List$1(System.Int32));
                        var totalColors = System.Linq.Enumerable.from(sets).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind.f4).distinct().count();
                        if (totalColors < colorCount) {
                            continue;
                        }

                        var stacks = System.Linq.Enumerable.from(sets).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind.f5).toList(System.Int64);

                        if (this.SuperabundantOnly && !Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition$1(this.Knowledge.GraphKnowledge.Graph, stacks, pot)) {
                            continue;
                        }

                        var board = new Algorithms.FixerBreaker.Board(stacks, pot);

                        var count = boards.Count;
                        boards.add(board);

                        if (boards.Count > count) {
                            this.BoardLookup.set(this.NextBoardID, board);
                            this.BoardIDLookup.set(board, this.NextBoardID);

                            this.NextBoardID = (this.NextBoardID + 1) | 0;
                        }

                        if (!Bridge.staticEquals(progress, null)) {
                            var p = System.Int64.clip32(System.Int64(Bridge.Int.mul(100, current)).div(total));
                            if (p > lastP) {
                                progress({ item1: "Finding all positions...", item2: p });
                                lastP = p;
                            }
                        }

                        current = (current + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.SlimMind, {
        f1: function (e) {
            return System.Linq.Enumerable.from(this.RemainingBoardIDs).any(Bridge.fn.bind(this, function (id3) {
                    return Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, this.BoardLookup.get(id3), e);
                }));
        },
        f2: function (id3) {
            return this.BoardLookup.get(id3);
        },
        f3: function (id3) {
            return Algorithms.FixerBreaker.KnowledgeEngine.ColoringAnalyzer.ColorableWithoutEdge(this.Knowledge, this.BoardLookup.get(id3), 0);
        },
        f4: function (set) {
            return set;
        },
        f5: function (list) {
            return Algorithms.Int64Usage.ToInt64(list);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTree", {
        inherits: function () { return [Algorithms.FixerBreaker.Tree$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTree)]; },
        props: {
            Board: null,
            IsColorable: false,
            IsSuperabundant: false,
            IsFixerWin: false,
            GameTreeIndex: 0,
            SameAsIndex: 0,
            Info: null
        },
        methods: {
            AddChild$1: function (tree, info) {
                tree.Info = info;
                this.AddChild(tree);
            },
            equals: function (obj) {
                var gg = Bridge.as(obj, Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTree);
                if (gg == null) {
                    return false;
                }

                return gg.Board.Equals(this.Board);
            },
            getHashCode: function () {
                return this.Board.getHashCode();
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo", {
        inherits: [System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo)],
        methods: {
            Add: function (breakerChoice, i, j, fixerResponse) {
                var $t;
                this.add(($t = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo(), $t.Partition = System.Linq.Enumerable.from(breakerChoice).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo.f1).toList(System.Collections.Generic.List$1(System.Int32)), $t.Alpha = i, $t.Beta = j, $t.Response = fixerResponse, $t.SwapVertices = Algorithms.Int64Usage.ToSet$1(fixerResponse), $t));
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo, {
        f1: function (choice) {
            return Algorithms.Int64Usage.ToSet$1(choice);
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GreedyWinFilter", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.IWinFilter],
        fields: {
            _swapAnalyzer: null
        },
        ctors: {
            ctor: function (swapAnalyzer) {
                this.$initialize();
                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.IWinFilter.ctor.call(this);
                this._swapAnalyzer = swapAnalyzer;
            }
        },
        methods: {
            Filter: function (R, W) {
                return Algorithms.GenericExtensions.IndicesWhere(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, R, Bridge.fn.bind(this, function (b) {
                    return this._swapAnalyzer.Analyze(b, W);
                }));
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofBuilder],
        fields: {
            _permutationLinked: null
        },
        ctors: {
            ctor: function (mind, usePermutations) {
                if (usePermutations === void 0) { usePermutations = false; }

                this.$initialize();
                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofBuilder.ctor.call(this, mind, usePermutations);

            }
        },
        methods: {
            ExtractCases: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6;
                this.Cases = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase))();

                this._permutationLinked = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,System.Collections.Generic.List$1(System.Object)))();

                var indices = System.Linq.Enumerable.range(0, this.Mind.ColorableBoards.getItem(0).Stacks.Value.length).toList(System.Int32);
                var permutations = System.Linq.Enumerable.from(Algorithms.Utility.Permutation.EnumerateAll(indices.Count)).toList(Algorithms.Utility.Permutation);

                var caseNumber = 0;

                var colorableCase = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase(this.Mind, 0, this.Mind.ColorableBoards);
                this.Cases.add(colorableCase);
                caseNumber = (caseNumber + 1) | 0;

                var remainingBoards = System.Linq.Enumerable.from(this.Mind.NonColorableBoards).except(this.Mind.BreakerWonBoards).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                var wonBoards = System.Linq.Enumerable.from(this.Mind.ColorableBoards).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                while (remainingBoards.Count > 0) {
                    var proofCase = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase(this.Mind, caseNumber);
                    this.Cases.add(proofCase);

                    var addedRootBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                    var addedBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                    $t = Bridge.getEnumerator(remainingBoards);
                    try {
                        while ($t.moveNext()) {
                            var board = $t.Current;
                            if (addedBoards.contains(board)) {
                                continue;
                            }

                            var treeInfo = this.Mind.GetWinTreeInfo(board);
                            var childBoards = System.Linq.Enumerable.from(treeInfo).select(function (bc) {
                                    return new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, bc.Alpha, bc.Beta, bc.Response, board._stackCount);
                                }).distinct().toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);

                            if (Algorithms.Utility.ListUtility.SubsetEqual(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, childBoards, wonBoards)) {
                                addedRootBoards.add(board);
                                addedBoards.add(board);
                                this._permutationLinked.set(board, new (System.Collections.Generic.List$1(System.Object))());

                                if (this.UsePermutations) {
                                    $t1 = Bridge.getEnumerator(permutations);
                                    try {
                                        while ($t1.moveNext()) {
                                            var p = $t1.Current;
                                            var pb = board.Permute(p, indices);
                                            if (wonBoards.contains(pb) || addedBoards.contains(pb)) {
                                                continue;
                                            }

                                            var closed = true;
                                            $t2 = Bridge.getEnumerator(childBoards);
                                            try {
                                                while ($t2.moveNext()) {
                                                    var cb = $t2.Current;
                                                    if (!wonBoards.contains(cb.Permute(p, indices))) {
                                                        closed = false;
                                                        break;
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$dispose();
                                                }
                                            }
                                            if (closed) {
                                                this._permutationLinked.get(board).add({ item1: p, item2: pb });
                                                addedBoards.add(pb);
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t1, System.IDisposable)) {
                                            $t1.System$IDisposable$dispose();
                                        }
                                    }}
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    $t3 = Bridge.getEnumerator(addedRootBoards);
                    try {
                        while ($t3.moveNext()) {
                            var board1 = $t3.Current;
                            proofCase.AddBoard(board1);
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$dispose();
                        }
                    }
                    $t4 = Bridge.getEnumerator(addedBoards);
                    try {
                        while ($t4.moveNext()) {
                            var board2 = $t4.Current;
                            wonBoards.add(board2);
                            remainingBoards.remove(board2);
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$dispose();
                        }
                    }
                    caseNumber = (caseNumber + 1) | 0;
                }

                if (this.Mind.BreakerWonBoards.Count > 0) {
                    $t5 = Bridge.getEnumerator(System.Linq.Enumerable.from(this.Mind.BreakerWonBoards).groupBy(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder.f1)));
                    try {
                        while ($t5.moveNext()) {
                            var group = $t5.Current;
                            var lostCase = ($t6 = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase(this.Mind, caseNumber, group.toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)), $t6.BreakerWin = true, $t6.Superabundant = group.key(), $t6);
                            this.Cases.add(lostCase);
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$dispose();
                        }
                    }}
            },
            GetHandledCaseNumber: function (b, bc) {
                var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(b._trace, bc.Alpha, bc.Beta, bc.Response, b._stackCount);
                if (this.Cases.getItem(0).Boards.contains(childBoard)) {
                    return 1;
                }

                return ((System.Linq.Enumerable.from(Algorithms.GenericExtensions.IndicesWhere(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase, System.Linq.Enumerable.from(this.Cases).skip(1), Bridge.fn.bind(this, function (cc) {
                        return System.Linq.Enumerable.from(cc.Boards).selectMany(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder.f3)).contains(childBoard);
                    }))).first() + 2) | 0);
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder, {
        f1: function (b) {
            return this.Mind.IsSuperabundant(b);
        },
        f2: function (tup) {
            return tup.item2;
        },
        f3: function (bb) {
            return System.Linq.Enumerable.from(System.Array.init([bb], Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)).union(System.Linq.Enumerable.from(this._permutationLinked.get(bb)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder.f2));
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SmartFilter", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.IWinFilter],
        fields: {
            _fixerResponses: null,
            _fixerResponseCount: 0,
            _breakerChoicesCache: null
        },
        ctors: {
            init: function () {
                this._fixerResponses = System.Array.init(8192, System.UInt64(0), System.UInt64);
                this._breakerChoicesCache = new (System.Collections.Generic.Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))))();
            }
        },
        methods: {
            Filter: function (R, W) {
                throw new System.NotImplementedException();
            },
            Analyze: function (board) {
                var colorPairs = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < board._length; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < board._length; j = (j + 1) | 0) {
                        colorPairs.add({ item1: i, item2: j });
                    }
                }

                return System.Linq.Enumerable.from(colorPairs).orderBy(function (cp) {
                        return Algorithms.Int64Usage.PopulationCount$1((board._trace[System.Array.index(cp.item1, board._trace)].xor(board._trace[System.Array.index(cp.item2, board._trace)])));
                    }).select(Bridge.fn.bind(this, function (cp) {
                    var $t;
                    return ($t = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.ColorPairOutcome(), $t.Colors = cp, $t.FixerOutcomes = this.AnalyzeColorPair(cp, board), $t);
                }));
            },
            AnalyzeColorPair: function (colors, board) {
                return new (Bridge.GeneratorEnumerable$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome))(Bridge.fn.bind(this, function (colors, board) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        i,
                        j,
                        x,
                        y,
                        swappable,
                        $t,
                        breakerChoice,
                        responses,
                        $t1,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        i = colors.item1;
                                            j = colors.item2;

                                            x = board._trace[System.Array.index(i, board._trace)];
                                            y = board._trace[System.Array.index(j, board._trace)];
                                            swappable = x.xor(y);

                                            $t = Bridge.getEnumerator(this.GetBreakerChoices(swappable));
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                breakerChoice = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        this.GetFixerResponses(breakerChoice);
                                            responses = System.Linq.Enumerable.range(1, ((this._fixerResponseCount - 1) | 0)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SmartFilter.f1)).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SmartFilter.f2);

                                            $enumerator.current = ($t1 = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome(), $t1.BreakerChoice = breakerChoice, $t1.Exits = responses.select(function (response) {
                                                return new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, i, j, response, board._stackCount);
                                            }).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard), $t1);
                                            $step = 3;
                                            return true;
                                    }
                                    case 3: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            GetFixerResponses: function (possibleMoves) {
                this._fixerResponseCount = 1 << possibleMoves.Count;
                var tableLength = this._fixerResponses.length;
                while (tableLength <= this._fixerResponseCount) {
                    tableLength = Bridge.Int.mul(tableLength, 2);
                }
                if (tableLength > this._fixerResponses.length) {
                    this._fixerResponses = System.Array.init(tableLength, System.UInt64(0), System.UInt64);
                }

                var subset = 1;
                while (subset < this._fixerResponseCount) {
                    var response = System.UInt64(0);
                    var x = { v : subset };

                    while (x.v !== 0) {
                        response = response.or(possibleMoves.getItem(Algorithms.Int32Usage.GetAndClearLeastSignificantBit(x)));
                    }

                    this._fixerResponses[System.Array.index(subset, this._fixerResponses)] = response;
                    subset = (subset + 1) | 0;
                }
            },
            GetBreakerChoices: function (swappable) {
                var $t, $t1, $t2;
                var choices = { };
                if (!this._breakerChoicesCache.tryGetValue(swappable, choices)) {
                    var bits = Algorithms.Int64Usage.GetBits$1(swappable);
                    var partitions = Algorithms.FixerBreaker.Chronicle.BranchGenerator.GetPartitions(bits.Count);
                    choices.v = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64)))(partitions.Count);

                    $t = Bridge.getEnumerator(partitions);
                    try {
                        while ($t.moveNext()) {
                            var partition = $t.Current;
                            var choice = new (System.Collections.Generic.List$1(System.UInt64))(partition.Count);
                            choices.v.add(choice);

                            $t1 = Bridge.getEnumerator(partition);
                            try {
                                while ($t1.moveNext()) {
                                    var part = $t1.Current;
                                    var x = System.UInt64(0);
                                    $t2 = Bridge.getEnumerator(part);
                                    try {
                                        while ($t2.moveNext()) {
                                            var i = $t2.Current;
                                            x = x.or(bits.getItem(i));
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }
                                    choice.add(x);
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    this._breakerChoicesCache.set(swappable, choices.v);
                }

                return choices.v;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SmartFilter", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SmartFilter, {
        f1: function (k) {
            return this._fixerResponses[System.Array.index(k, this._fixerResponses)];
        },
        f2: function (fr) {
            return Algorithms.Int64Usage.PopulationCount$1(fr) <= 1;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IMind],
        fields: {
            _remainingBoards: null,
            _wonBoards: null,
            _swapAnalyzer: null,
            _coloringAnalyzer: null,
            _graph: null,
            _lineGraph: null,
            _edges: null,
            _totalPositions: 0,
            _gameTreeIndex: 0
        },
        props: {
            MinPot: 0,
            MaxPot: 0,
            FixerWonAllNearlyColorableBoards: false,
            HasNonSuperabundantBoardThatIsNearlyColorable: false,
            TotalPositions: {
                get: function () {
                    return this._totalPositions;
                }
            },
            BreakerWonBoard: null,
            BoardCounts: null,
            BoardCountsList: null,
            OnlyConsiderNearlyColorableBoards: false,
            ExcludeNonNearlyColorableNonSuperabundantBoards: false,
            MissingEdgeIndex: 0,
            SuperabundantOnly: false,
            ThinkHarder: false,
            PerformCompleteAnalysis: false,
            ColoringAnalyzer: {
                get: function () {
                    return this._coloringAnalyzer;
                }
            },
            NonColorableBoards: null,
            ColorableBoards: null,
            BreakerWonBoards: null,
            FixerWonBoards: {
                get: function () {
                    return this._wonBoards;
                }
            },
            BoardsOfDepth: null,
            ExtraPsi: 0,
            WinFilter: null
        },
        alias: [
            "MaxPot", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$MaxPot",
            "FixerWonAllNearlyColorableBoards", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$FixerWonAllNearlyColorableBoards",
            "TotalPositions", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$TotalPositions",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IMind$Analyze"
        ],
        ctors: {
            ctor: function (g, proofFindingMode, weaklyFixable) {
                if (proofFindingMode === void 0) { proofFindingMode = false; }
                if (weaklyFixable === void 0) { weaklyFixable = false; }

                this.$initialize();
                this._graph = g;
                this.BuildLineGraph();

                this._coloringAnalyzer = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimColoringAnalyzer(this._lineGraph, Bridge.fn.cacheBind(this, this.GetEdgeColorList));
                this._swapAnalyzer = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimSwapAnalyzer(g.N, proofFindingMode, proofFindingMode || weaklyFixable);
                this._wonBoards = new (System.Collections.Generic.HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)).ctor();
                this._remainingBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();

                this.MissingEdgeIndex = -1;
            }
        },
        methods: {
            Analyze: function (template, progress) {
                if (progress === void 0) { progress = null; }
                this._wonBoards.clear();
                this._remainingBoards.clear();
                this.BoardCountsList = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))();
                this.BreakerWonBoard = null;
                this.NonColorableBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                this.ColorableBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                this.BreakerWonBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();

                if (this.WinFilter == null) {
                    this.WinFilter = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GreedyWinFilter(this._swapAnalyzer);
                }

                this.FixerWonAllNearlyColorableBoards = true;

                var minimumColorCount = Math.max(this.MinPot, System.Linq.Enumerable.from(template.Sizes).max());
                var maximumColorCount = Math.min(this.MaxPot, System.Linq.Enumerable.from(template.Sizes).sum());

                var foundAtLeastOneBoard = false;
                var fixerWin = true;
                for (var colorCount = minimumColorCount; colorCount <= maximumColorCount; colorCount = (colorCount + 1) | 0) {
                    this.GenerateAllBoards(template, colorCount, progress);
                    if (this.OnlyConsiderNearlyColorableBoards) {
                        if (this.MissingEdgeIndex >= 0) {
                            Algorithms.GenericExtensions.RemoveAll(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, this._remainingBoards, Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f1), $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f2);
                        } else {
                            Algorithms.GenericExtensions.RemoveAll(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, this._remainingBoards, Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f3), $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f2);
                        }
                    }

                    if (foundAtLeastOneBoard && this._remainingBoards.Count <= 0) {
                        break;
                    }

                    this._totalPositions = (this._remainingBoards.Count + this._wonBoards.Count) | 0;
                    foundAtLeastOneBoard = true;

                    fixerWin = !!(fixerWin & this.Analyze$1(progress));
                }

                return fixerWin;
            },
            Analyze$1: function (progress) {
                var $t, $t1;
                if (progress === void 0) { progress = null; }
                var winLength = 0;
                var totalBoards = this._remainingBoards.Count;
                var lastP = -1;

                this.BoardsOfDepth = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)))();
                this.BoardCounts = new (System.Collections.Generic.List$1(System.Int32))();
                this.BoardCountsList.add(this.BoardCounts);
                this.BoardCounts.add(this._remainingBoards.Count);

                for (var i = (this._remainingBoards.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    var b = this._remainingBoards.getItem(i);
                    if (this._coloringAnalyzer.Analyze(b)) {
                        this._remainingBoards.removeAt(i);
                        this._wonBoards.add(b);
                        this.ColorableBoards.add(b);
                    }

                    if (!Bridge.staticEquals(progress, null)) {
                        var p = (Bridge.Int.div(Bridge.Int.mul(100, (((totalBoards - this._remainingBoards.Count) | 0))), totalBoards)) | 0;
                        if (p > lastP) {
                            progress({ item1: "Finding all colorable positions...", item2: p });
                            lastP = p;
                        }
                    }
                }

                this.BoardsOfDepth.set(winLength, System.Linq.Enumerable.from(this._wonBoards).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard));
                this.BoardCounts.add(this._remainingBoards.Count);

                var nonSuperabundantBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();

                for (var i1 = (this._remainingBoards.Count - 1) | 0; i1 >= 0; i1 = (i1 - 1) | 0) {
                    var b1 = this._remainingBoards.getItem(i1);
                    if (!this.IsSuperabundant(b1)) {
                        if (this.OnlyConsiderNearlyColorableBoards && this.MissingEdgeIndex >= 0) {
                            this.HasNonSuperabundantBoardThatIsNearlyColorable = true;
                            this.BreakerWonBoard = b1;

                            if (!this.PerformCompleteAnalysis) {
                                return false;
                            }
                        }

                        this._remainingBoards.removeAt(i1);
                        nonSuperabundantBoards.add(b1);
                    }

                    if (!Bridge.staticEquals(progress, null)) {
                        var p1 = (Bridge.Int.div(Bridge.Int.mul(100, (((totalBoards - this._remainingBoards.Count) | 0))), totalBoards)) | 0;
                        if (p1 > lastP) {
                            progress({ item1: "Finding all non-superabundant positions...", item2: p1 });
                            lastP = p1;
                        }
                    }
                }

                if (nonSuperabundantBoards.Count > 0 && !this.SuperabundantOnly) {
                    if (!this.OnlyConsiderNearlyColorableBoards && !this.ExcludeNonNearlyColorableNonSuperabundantBoards) {
                        this.FixerWonAllNearlyColorableBoards = false;
                        this.BreakerWonBoard = nonSuperabundantBoards.getItem(0);
                        this.BreakerWonBoards.addRange(nonSuperabundantBoards);

                        if (!this.PerformCompleteAnalysis) {
                            return false;
                        }
                    } else if (this.ExistsNearlyColorableBoardForEachEdge(nonSuperabundantBoards)) {
                        this.FixerWonAllNearlyColorableBoards = false;
                        this.HasNonSuperabundantBoardThatIsNearlyColorable = true;
                        this.BreakerWonBoard = nonSuperabundantBoards.getItem(0);
                        this.BreakerWonBoards.addRange(nonSuperabundantBoards);
                        if (!this.PerformCompleteAnalysis) {
                            return false;
                        }
                    }
                }

                this.BoardCounts.add(this._remainingBoards.Count);
                this.NonColorableBoards.addRange(this._remainingBoards);

                while (this._remainingBoards.Count > 0) {
                    var count = this._remainingBoards.Count;
                    winLength = (winLength + 1) | 0;

                    var boardIndicesToAdd = { v : System.Linq.Enumerable.from(this.WinFilter.Filter(this._remainingBoards, this._wonBoards)).orderByDescending($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f4).toList(System.Int32) };
                    var wonBoards = System.Linq.Enumerable.from(this._remainingBoards).where((function ($me, boardIndicesToAdd) {
                            return function (b2, i2) {
                                return boardIndicesToAdd.v.contains(i2);
                            };
                        })(this, boardIndicesToAdd)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                    $t = Bridge.getEnumerator(wonBoards);
                    try {
                        while ($t.moveNext()) {
                            var b2 = $t.Current;
                            this._wonBoards.add(b2);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }this.BoardsOfDepth.set(winLength, wonBoards);

                    $t1 = Bridge.getEnumerator(boardIndicesToAdd.v);
                    try {
                        while ($t1.moveNext()) {
                            var i2 = $t1.Current;
                            this._remainingBoards.removeAt(i2);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    if (!Bridge.staticEquals(progress, null)) {
                        var p2 = (Bridge.Int.div(Bridge.Int.mul(100, (((totalBoards - this._remainingBoards.Count) | 0))), totalBoards)) | 0;
                        if (p2 > lastP) {
                            progress({ item1: System.String.format("Finding all {0} move wins...", Bridge.box(winLength, System.Int32)), item2: p2 });
                            lastP = p2;
                        }
                    }

                    this.BoardCounts.add(this._remainingBoards.Count);

                    if (this._remainingBoards.Count === count) {
                        this.BreakerWonBoards.addRange(this._remainingBoards);

                        if (this.BreakerWonBoard == null) {
                            this.BreakerWonBoard = this._remainingBoards.getItem(0);
                        }

                        if (this.OnlyConsiderNearlyColorableBoards && this.MissingEdgeIndex >= 0) {
                            this.FixerWonAllNearlyColorableBoards = false;
                        } else if (this.ExistsNearlyColorableBoardForEachEdge(this._remainingBoards)) {
                            this.FixerWonAllNearlyColorableBoards = false;
                            this.BreakerWonBoard = System.Linq.Enumerable.from(this._remainingBoards).firstOrDefault(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f5), null);

                            if (this.BreakerWonBoard == null) {
                                this.BreakerWonBoard = System.Linq.Enumerable.from(this._remainingBoards).first(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f5));
                            }
                        }

                        return false;
                    }
                }

                return true;
            },
            NearlyColorableForEdge: function (board, edgeIndex) {
                return this._coloringAnalyzer.ColorableWithoutEdge(board, edgeIndex);
            },
            ExistsNearlyColorableBoardForEachEdge: function (boards) {
                return System.Linq.Enumerable.range(0, this._lineGraph.N).all(Bridge.fn.bind(this, function (e) {
                    return System.Linq.Enumerable.from(boards).any(Bridge.fn.bind(this, function (b) {
                            return this.NearlyColorableForEdge(b, e);
                        }));
                }));
            },
            NearlyColorableForSomeEdge: function (board) {
                return System.Linq.Enumerable.range(0, this._lineGraph.N).any(Bridge.fn.bind(this, function (e) {
                    return this.NearlyColorableForEdge(board, e);
                }));
            },
            LookAtSuperabundance: function () {
                var packs = System.Linq.Enumerable.range(0, this._lineGraph.N).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f6)).toList(System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard));
                var goodPacks = System.Linq.Enumerable.from(packs).where(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f8)).toList(System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard));
            },
            IsSuperabundant: function (b) {
                var subset = System.UInt64(0);

                var total = 0;
                while (subset.lt((System.UInt64(1).shl(b._stackCount)))) {
                    total = 0;
                    for (var i = 0; i < b._length; i = (i + 1) | 0) {
                        total = (total + (((Bridge.Int.div(Algorithms.Int64Usage.PopulationCount$1((subset.and(b._trace[System.Array.index(i, b._trace)]))), 2)) | 0))) | 0;
                    }

                    var e = this._graph.EdgesOn(Algorithms.Int64Usage.ToSet$1(subset));
                    if (total < e) {
                        return false;
                    }

                    subset = subset.inc();
                }

                if (this.ExtraPsi > 0) {
                    return total >= ((this._graph.E + this.ExtraPsi) | 0);
                }

                return true;
            },
            ComputeAbundanceSurplus: function (b) {
                var total = 0;
                for (var i = 0; i < b._length; i = (i + 1) | 0) {
                    total = (total + (((Bridge.Int.div(Algorithms.Int64Usage.PopulationCount$1(b._trace[System.Array.index(i, b._trace)]), 2)) | 0))) | 0;
                }

                return ((total - this._graph.E) | 0);
            },
            ComputeMatchingAbundanceShadow: function (b) {
                var shadow = new (System.Collections.Generic.List$1(System.Int32))();

                var subset = System.UInt64(0);
                while (subset.lt((System.UInt64(1).shl(b._stackCount)))) {
                    var e = { };
                    if (!this.IsMatchingAbundant(b, subset, e)) {
                        shadow.add(e.v);
                    }
                    subset = subset.inc();
                }

                shadow.sort();

                return shadow;
            },
            IsMatchingAbundant: function (b, subset, e) {
                e.v = this._graph.EdgesOn(Algorithms.Int64Usage.ToSet$1(subset));

                var total = 0;
                for (var i = 0; i < b._length; i = (i + 1) | 0) {
                    var vc = Algorithms.Int64Usage.ToSet$1((subset.and(b._trace[System.Array.index(i, b._trace)])));
                    total = (total + (this._lineGraph.IndependenceNumber$1(this._graph.EdgeIndicesOn(vc)))) | 0;
                }

                return total >= e.v;
            },
            GenerateAllBoards: function (template, colorCount, progress) {
                var $t;
                if (progress === void 0) { progress = null; }
                if (!Bridge.staticEquals(progress, null)) {
                    progress({ item1: "Finding all positions...", item2: 0 });
                }

                $t = Bridge.getEnumerator(BitLevelGeneration.Assignments_ulong.Generate(template.Sizes, colorCount));
                try {
                    while ($t.moveNext()) {
                        var t = $t.Current;
                        var b = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.ctor(t, template.Sizes.Count);
                        this._remainingBoards.add(b);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            BuildLineGraph: function () {
                var adjacent = this._graph.Adjacent;
                var n = ((System.Array.getLength(adjacent, 0) - 1) + 1) | 0;

                this._edges = new (System.Collections.Generic.List$1(System.Object))();
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        if (adjacent.get([i, j])) {
                            this._edges.add({ item1: i, item2: j });
                        }
                    }
                }

                var meets = System.Array.create(false, null, System.Boolean, this._edges.Count, this._edges.Count);
                for (var i1 = 0; i1 < this._edges.Count; i1 = (i1 + 1) | 0) {
                    for (var j1 = (i1 + 1) | 0; j1 < this._edges.Count; j1 = (j1 + 1) | 0) {
                        if (this._edges.getItem(i1).item1 === this._edges.getItem(j1).item1 || this._edges.getItem(i1).item1 === this._edges.getItem(j1).item2 || this._edges.getItem(i1).item2 === this._edges.getItem(j1).item1 || this._edges.getItem(i1).item2 === this._edges.getItem(j1).item2) {
                            meets.set([i1, j1], (meets.set([j1, i1], true), true));
                        }
                    }
                }

                this._lineGraph = new Algorithms.Graph.ctor(meets);
            },
            GetEdgeColorList: function (b, e) {
                var v1 = this._edges.getItem(e).item1;
                var v2 = this._edges.getItem(e).item2;
                var stacks = b.Stacks.Value;

                return stacks[System.Array.index(v1, stacks)].and(stacks[System.Array.index(v2, stacks)]);
            },
            GetWinTreeInfo: function (board) {
                return this._swapAnalyzer.WinTreeInfo.get(board);
            },
            BuildGameTree: function (board, win) {
                if (win === void 0) { win = true; }
                var seenBoards = new (System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,System.Int32))();
                this._gameTreeIndex = 1;
                return this.BuildGameTree$1(board, seenBoards, win);
            },
            BuildGameTree$1: function (board, seenBoards, win, depth) {
                var $t;
                if (win === void 0) { win = true; }
                if (depth === void 0) { depth = 0; }
                seenBoards.set(board, this._gameTreeIndex);
                var tree = ($t = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTree(), $t.Board = board, $t.IsFixerWin = win, $t);
                tree.IsColorable = this._coloringAnalyzer.Analyze(board);
                tree.IsSuperabundant = win || this.IsSuperabundant(board);
                tree.GameTreeIndex = this._gameTreeIndex;
                this._gameTreeIndex = (this._gameTreeIndex + 1) | 0;

                if (tree.IsColorable) {
                    return tree;
                }

                if (!tree.IsSuperabundant) {
                    return tree;
                }

                var treeInfo = { };
                if (win) {
                    this._swapAnalyzer.WinTreeInfo.tryGetValue(board, treeInfo);
                } else {
                    this._swapAnalyzer.LossTreeInfo.tryGetValue(board, treeInfo);
                }

                if (treeInfo.v != null) {
                    var localSeenBoards = new (System.Collections.Generic.HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)).ctor();
                    $t = Bridge.getEnumerator(treeInfo.v);
                    try {
                        while ($t.moveNext()) {
                            var bc = $t.Current;
                            var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(board._trace, bc.Alpha, bc.Beta, bc.Response, board._stackCount);
                            if (localSeenBoards.contains(childBoard)) {
                                continue;
                            }
                            localSeenBoards.add(childBoard);

                            if (!win && seenBoards.containsKey(childBoard)) {
                                continue;
                            }

                            var childTree = this.BuildGameTree$1(childBoard, seenBoards, win, ((depth + 1) | 0));
                            tree.AddChild$1(childTree, bc);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return tree;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind, {
        f1: function (b) {
            return !this.NearlyColorableForEdge(b, this.MissingEdgeIndex);
        },
        f2: function (x) { },
        f3: function (b) {
            return !this.NearlyColorableForSomeEdge(b);
        },
        f4: function (x) {
            return x;
        },
        f5: function (b3) {
            return this._coloringAnalyzer.ColorableWithoutEdge(b3, 0);
        },
        f6: function (e) {
            return System.Linq.Enumerable.from(this._remainingBoards).where(Bridge.fn.bind(this, function (b) {
                    return this._coloringAnalyzer.ColorableWithoutEdge(b, e);
                })).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
        },
        f7: function (ssb) {
            return this.IsSuperabundant(ssb);
        },
        f8: function (pack) {
            return System.Linq.Enumerable.from(pack).all(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimMind.f7));
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.SubTemplateAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer],
        props: {
            SubTemplates: null,
            Reason: {
                get: function () {
                    return "sub template";
                }
            },
            IsKnowledgeDependent: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Reason", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason",
            "IsKnowledgeDependent", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent",
            "Analyze", "Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze"
        ],
        ctors: {
            ctor: function (subTemplates) {
                if (subTemplates === void 0) { subTemplates = []; }

                this.$initialize();
                this.SubTemplates = System.Linq.Enumerable.from(subTemplates).toList(Algorithms.FixerBreaker.KnowledgeEngine.Template);
            }
        },
        methods: {
            Analyze: function (knowledge, board) {
                var $t;
                $t = Bridge.getEnumerator(this.SubTemplates);
                try {
                    while ($t.moveNext()) {
                        var template = $t.Current;
                        var color = { };
                        var x = { };
                        if (this.ContainsSuberabundantSubStacksAboveTemplate(knowledge, board, template, color, x)) {
                            knowledge.getItem(board.Template.Value).getItem(board.ColorCount).AddWin(board, System.String.format("set L({0}) = L({0}) - {1}", Bridge.box(((x.v + 1) | 0), System.Int32), Bridge.box(color.v, System.Int32)));
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            },
            ContainsSuberabundantSubStacksAboveTemplate: function (knowledge, board, template, color, x) {
                var $t;
                color.v = -1;
                x.v = -1;
                var g = knowledge.GraphKnowledge.Graph;
                var stackSets = System.Linq.Enumerable.from(board.Stacks).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.SubTemplateAnalyzer.f1).toList(System.Collections.Generic.List$1(System.Int32));
                var bigs = System.Linq.Enumerable.range(0, stackSets.Count).count(function (i) {
                    return stackSets.getItem(i).Count > template.Sizes.getItem(i);
                });
                if (bigs <= 0 || bigs > 1) {
                    return false;
                }

                var shrinkable = System.Linq.Enumerable.range(0, stackSets.Count).where(function (i) {
                    return stackSets.getItem(i).Count === ((template.Sizes.getItem(i) + 1) | 0);
                }).toList(System.Int32);
                if (shrinkable.Count <= 0) {
                    return false;
                }

                x.v = shrinkable.getItem(0);
                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(stackSets.getItem(x.v)).toList(System.Int32));
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        stackSets.getItem(x.v).remove(c);

                        if (Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.DegreeCondition$1(g, System.Linq.Enumerable.from(stackSets).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.SubTemplateAnalyzer.f2).toList(System.Int64), board.Pot)) {
                            color.v = c;
                            return true;
                        }

                        stackSets.getItem(x.v).add(c);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return false;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.SubTemplateAnalyzer", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.SubTemplateAnalyzer, {
        f1: function (s) {
            return Algorithms.Int64Usage.ToSet(s);
        },
        f2: function (s) {
            return Algorithms.Int64Usage.ToInt64(s);
        }
    });

    Bridge.define("Algorithms.Graph.IsomorphismComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(Algorithms.Graph)],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$Algorithms$Graph$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$Algorithms$Graph$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return Algorithms.Graph.Isomorphic(x, y);
            },
            getHashCode2: function (g) {
                return 0;
            }
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastTarpitEnumerator", {
        inherits: [Algorithms.WordGame.TarpitEnumerator],
        statics: {
            fields: {
                EmptyList: null
            },
            ctors: {
                init: function () {
                    this.EmptyList = new (System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))();
                }
            }
        },
        fields: {
            _words: null,
            _accessibilityChecker: null
        },
        ctors: {
            ctor: function (n) {
                this.$initialize();
                Algorithms.WordGame.TarpitEnumerator.ctor.call(this);
                this._words = new Algorithms.WordGame.Optimized.FastWordGenerator().GenerateWords(n);
                this._accessibilityChecker = new Algorithms.WordGame.Optimized.FastAccessibilityChecker(n);
            }
        },
        methods: {
            GenerateMinimalTarpits: function (foundTarpit) {
                this.GenerateMinimalTarpitsFast(Bridge.fn.bind(this, function (l) {
                    foundTarpit(System.Linq.Enumerable.from(l).select(Bridge.fn.bind(this, $asm.$.Algorithms.WordGame.Optimized.FastTarpitEnumerator.f1)).toList(System.String));
                }));
            },
            GenerateMinimalTarpitsFast: function (foundTarpit) {
                this.GenerateMinimalTarpitsFastIn(this._words, new (System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))(), foundTarpit);
            },
            GenerateMinimalTarpitsFastIn: function (S, mustHaves, foundTarpit) {
                var $t, $t1;
                var excluded = false;

                var extendedMustHaves = System.Linq.Enumerable.from(mustHaves).toList(Algorithms.WordGame.Optimized.FastWord);
                var T = System.Linq.Enumerable.from(S).except(mustHaves).toList(Algorithms.WordGame.Optimized.FastWord);

                $t = Bridge.getEnumerator(T);
                try {
                    while ($t.moveNext()) {
                        var w = $t.Current;
                        var W = this.RunEscape$1(System.Linq.Enumerable.from(S).except(System.Array.init([w], Algorithms.WordGame.Optimized.FastWord)), extendedMustHaves);

                        if (W != null && W.Count > 0) {
                            excluded = true;
                            this.GenerateMinimalTarpitsFastIn(W, extendedMustHaves, foundTarpit);
                        }

                        extendedMustHaves.add(w);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                if (!excluded) {
                    $t1 = Bridge.getEnumerator(mustHaves);
                    try {
                        while ($t1.moveNext()) {
                            var w1 = $t1.Current;
                            var W1 = this.RunEscape(System.Linq.Enumerable.from(S).except(System.Array.init([w1], Algorithms.WordGame.Optimized.FastWord)));
                            if (W1.Count > 0) {
                                excluded = true;
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }
                    if (!excluded) {
                        foundTarpit(S);
                    }
                }
            },
            RunEscape$1: function (S, mustHaves) {
                var $t;
                var T = System.Linq.Enumerable.from(S).toList(Algorithms.WordGame.Optimized.FastWord);
                var R = new (System.Collections.Generic.HashSet$1(Algorithms.WordGame.Optimized.FastWord)).$ctor1(System.Linq.Enumerable.from(this._words).except(T));
                while (true) {
                    if (System.Linq.Enumerable.from(mustHaves).any(Bridge.fn.bind(this, function (w) {
                            return this._accessibilityChecker.IsAccessible(w, R);
                        }))) {
                        return null;
                    }

                    var escapers = System.Linq.Enumerable.from(T).except(mustHaves).where(Bridge.fn.bind(this, function (w) {
                        return this._accessibilityChecker.IsAccessible(w, R);
                    })).toList(Algorithms.WordGame.Optimized.FastWord);

                    $t = Bridge.getEnumerator(escapers);
                    try {
                        while ($t.moveNext()) {
                            var w = $t.Current;
                            T.remove(w);
                            R.add(w);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    if (escapers.Count <= 0) {
                        break;
                    }
                }

                return T;
            },
            RunEscape: function (S) {
                return this.RunEscape$1(S, Algorithms.WordGame.Optimized.FastTarpitEnumerator.EmptyList);
            },
            Wordify: function (b) {
                var $t;
                var st = System.Array.init(b._stackCount, System.Int64(0), System.Int64);
                var traceBits = System.Linq.Enumerable.from(b._trace).select($asm.$.Algorithms.WordGame.Optimized.FastTarpitEnumerator.f2).toList(System.Collections.Generic.List$1(System.Int32));
                for (var c = 0; c < traceBits.Count; c = (c + 1) | 0) {
                    $t = Bridge.getEnumerator(traceBits.getItem(c));
                    try {
                        while ($t.moveNext()) {
                            var i = $t.Current;
                            st[System.Array.index(i, st)] = st[System.Array.index(i, st)].or((System.Int64(1).shl(c)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return Bridge.toArray(System.Linq.Enumerable.from(st).select($asm.$.Algorithms.WordGame.Optimized.FastTarpitEnumerator.f3)).join("");
            },
            EnumerateMinimalTarpits: function () {
                return System.Linq.Enumerable.from(this.EnumerateMinimalTarpitsFast()).select(Bridge.fn.bind(this, $asm.$.Algorithms.WordGame.Optimized.FastTarpitEnumerator.f4));
            },
            EnumerateMinimalTarpitsFast: function () {
                var explored = new (System.Collections.Generic.HashSet$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))).$ctor3(new Algorithms.WordGame.Optimized.FastTarpitEnumerator.SortedListComparer());
                return this.EnumerateMinimalTarpitsFastIn(this._words, explored, new (System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))());
            },
            EnumerateMinimalTarpitsFastIn: function (S, explored, mustHaves) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord)))(Bridge.fn.bind(this, function (S, explored, mustHaves) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        excluded,
                        $t,
                        w,
                        W,
                        $t1,
                        TP,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        excluded = false;

                                            $t = Bridge.getEnumerator(S);
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                w = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 9;
                                        continue;
                                    }
                                    case 2: {
                                        W = this.RunEscape(System.Linq.Enumerable.from(S).except(System.Array.init([w], Algorithms.WordGame.Optimized.FastWord)));
                                            if (W.Count <= 0) {
                                                $step = 1;
                                                continue;
                                            }

                                            excluded = true;

                                            if (Algorithms.Utility.ListUtility.SubsetEqual(Algorithms.WordGame.Optimized.FastWord, mustHaves, W) && !explored.contains(W)) {
                                                $step = 3;
                                                continue;
                                            } 
                                            $step = 8;
                                            continue;
                                    }
                                    case 3: {
                                        $t1 = Bridge.getEnumerator(this.EnumerateMinimalTarpitsFastIn(W, explored, System.Linq.Enumerable.from(mustHaves).toList(Algorithms.WordGame.Optimized.FastWord)), System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord));
                                            $step = 4;
                                            continue;
                                    }
                                    case 4: {
                                        if ($t1.moveNext()) {
                                                TP = $t1.Current;
                                                $step = 5;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $enumerator.current = TP;
                                            $step = 6;
                                            return true;
                                    }
                                    case 6: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        explored.add(W);
                                            mustHaves.add(w);
                                        $step = 1;
                                        continue;
                                    }
                                    case 9: {
                                        if (!excluded) {
                                                $step = 10;
                                                continue;
                                            } 
                                            $step = 12;
                                            continue;
                                    }
                                    case 10: {
                                        $enumerator.current = System.Linq.Enumerable.from(S).toList(Algorithms.WordGame.Optimized.FastWord);
                                            $step = 11;
                                            return true;
                                    }
                                    case 11: {
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            }
        }
    });

    Bridge.ns("Algorithms.WordGame.Optimized.FastTarpitEnumerator", $asm.$);

    Bridge.apply($asm.$.Algorithms.WordGame.Optimized.FastTarpitEnumerator, {
        f1: function (s) {
            return this.Wordify(s);
        },
        f2: function (t) {
            return Algorithms.Int64Usage.ToSet$1(t);
        },
        f3: function (s) {
            switch (s.toString()) {
                case "1": 
                    return 120;
                case "2": 
                    return 121;
                case "4": 
                    return 122;
                default: 
                    return 63;
            }
        },
        f4: function (list) {
            return System.Linq.Enumerable.from(list).select(Bridge.fn.cacheBind(this, this.Wordify)).toList(System.String);
        }
    });

    Bridge.define("Algorithms.WordGame.Optimized.FastTarpitEnumerator.SortedListComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$Algorithms$WordGame$Optimized$FastWord$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Collections$Generic$List$1$Algorithms$WordGame$Optimized$FastWord$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return System.Linq.Enumerable.from(x).sequenceEqual(y);
            },
            getHashCode2: function (list) {
                var $t;
                var hash = 19;
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        hash = (((hash * 31) | 0) + x.getHashCode()) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return hash;
            }
        }
    });

    Bridge.define("Algorithms.WordGame.ReferenceTarpitEnumerator", {
        inherits: [Algorithms.WordGame.TarpitEnumerator],
        fields: {
            _words: null,
            _accessibilityChecker: null
        },
        ctors: {
            ctor: function (n) {
                this.$initialize();
                Algorithms.WordGame.TarpitEnumerator.ctor.call(this);
                this._words = System.Linq.Enumerable.from(new Algorithms.WordGame.WordEnumerator.$ctor1(Algorithms.WordGame.TarpitEnumerator.Alphabet).EnumerateWords(n)).toList(System.String);
                this._accessibilityChecker = new Algorithms.WordGame.AccessibilityChecker(Algorithms.WordGame.TarpitEnumerator.Alphabet);
            }
        },
        methods: {
            EnumerateMinimalTarpits: function () {
                var seen = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                return this.EnumerateMinimalTarpitsIn(this._words, seen);
            },
            EnumerateMinimalTarpitsIn: function (S, seen) {
                return new (Bridge.GeneratorEnumerable$1(System.Collections.Generic.List$1(System.String)))(Bridge.fn.bind(this, function (S, seen) {
                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        excluded,
                        $t,
                        T,
                        W,
                        key,
                        $t1,
                        TP,
                        $async_e;

                    var $enumerator = new (Bridge.GeneratorEnumerator$1(System.Collections.Generic.List$1(System.String)))(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        excluded = false;
                                            $t = Bridge.getEnumerator(System.Linq.Enumerable.from(S).select(function (w) {
                                                    return System.Linq.Enumerable.from(S).except(System.Array.init([w], System.String)).toList(System.String);
                                                }));
                                            $step = 1;
                                            continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                                T = $t.Current;
                                                $step = 2;
                                                continue;
                                            }
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        W = this.RunEscape(T);
                                            if (W.Count <= 0) {
                                                $step = 1;
                                                continue;
                                            }

                                            excluded = true;

                                            key = this.GenerateSimpleKey(W);
                                            if (seen.contains(key)) {
                                                $step = 1;
                                                continue;
                                            }

                                            seen.add(key);
                                            $t1 = Bridge.getEnumerator(this.EnumerateMinimalTarpitsIn(W, seen), System.Collections.Generic.List$1(System.String));
                                            $step = 3;
                                            continue;
                                    }
                                    case 3: {
                                        if ($t1.moveNext()) {
                                                TP = $t1.Current;
                                                $step = 4;
                                                continue;
                                            }
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $enumerator.current = TP;
                                            $step = 5;
                                            return true;
                                    }
                                    case 5: {
                                        $step = 3;
                                        continue;
                                    }
                                    case 6: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {
                                        if (!excluded) {
                                                $step = 8;
                                                continue;
                                            } 
                                            $step = 10;
                                            continue;
                                    }
                                    case 8: {
                                        $enumerator.current = System.Linq.Enumerable.from(S).orderBy($asm.$.Algorithms.WordGame.ReferenceTarpitEnumerator.f1).toList(System.String);
                                            $step = 9;
                                            return true;
                                    }
                                    case 9: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                }, arguments));
            },
            RunEscape: function (S) {
                var T = System.Linq.Enumerable.from(S).toList(System.String);
                while (true) {
                    var R = { v : Algorithms.Utility.ListUtility.Difference(System.String, this._words, T) };
                    if (Algorithms.GenericExtensions.RemoveAll(System.String, T, (function ($me, R) {
                        return Bridge.fn.bind($me, function (w) {
                            return this._accessibilityChecker.IsAccessible(w, R.v);
                        });
                    })(this, R), $asm.$.Algorithms.WordGame.ReferenceTarpitEnumerator.f2) <= 0) {
                        break;
                    }
                }

                return T;
            },
            GenerateSimpleKey: function (S) {
                return Bridge.toArray(System.Linq.Enumerable.from(S).orderBy($asm.$.Algorithms.WordGame.ReferenceTarpitEnumerator.f1)).join(",");
            }
        }
    });

    Bridge.ns("Algorithms.WordGame.ReferenceTarpitEnumerator", $asm.$);

    Bridge.apply($asm.$.Algorithms.WordGame.ReferenceTarpitEnumerator, {
        f1: function (s) {
            return s;
        },
        f2: function (x) { }
    });

    Bridge.define("BitLevelGeneration.BitGraph_long", {
        inherits: [BitLevelGeneration.IGraph_long],
        fields: {
            _vertices: null,
            _neighborhood: null
        },
        props: {
            N: {
                get: function () {
                    return this._vertices.length;
                }
            },
            Vertices: {
                get: function () {
                    return this._vertices;
                }
            }
        },
        alias: [
            "N", "BitLevelGeneration$IGraph_long$N",
            "Vertices", "BitLevelGeneration$IGraph_long$Vertices",
            "IsIndependent", "BitLevelGeneration$IGraph_long$IsIndependent",
            "Degree", "BitLevelGeneration$IGraph_long$Degree",
            "DegreeInSet", "BitLevelGeneration$IGraph_long$DegreeInSet",
            "NeighborsInSet", "BitLevelGeneration$IGraph_long$NeighborsInSet",
            "MaximalIndependentSubsets", "BitLevelGeneration$IGraph_long$MaximalIndependentSubsets"
        ],
        ctors: {
            ctor: function (edgeWeights) {
                this.$initialize();
                var n = Bridge.Int.clip32((1 + Math.sqrt(((1 + Bridge.Int.mul(8, edgeWeights.Count)) | 0))) / 2);
                this._vertices = System.Linq.Enumerable.range(0, n).toArray(System.Int32);

                this._neighborhood = System.Array.init(n, System.Int64(0), System.Int64);

                var k = 0;
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    var iBit = System.Int64(1).shl(i);
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        var jBit = System.Int64(1).shl(j);

                        if (edgeWeights.getItem(k) !== 0) {
                            this._neighborhood[System.Array.index(i, this._neighborhood)] = this._neighborhood[System.Array.index(i, this._neighborhood)].or(jBit);
                            this._neighborhood[System.Array.index(j, this._neighborhood)] = this._neighborhood[System.Array.index(j, this._neighborhood)].or(iBit);
                        }

                        k = (k + 1) | 0;
                    }
                }
            },
            $ctor1: function (n, neighborhood) {
                this.$initialize();
                this._vertices = System.Linq.Enumerable.range(0, n).toArray(System.Int32);
                this._neighborhood = neighborhood;
            }
        },
        methods: {
            IsIndependent: function (set) {
                return BitLevelGeneration.BitUsage_long.TrueForAllBitIndices(set, Bridge.fn.bind(this, function (i) {
                    return (this._neighborhood[System.Array.index(i, this._neighborhood)].and(set)).equals(System.Int64(0));
                }));
            },
            Degree: function (v) {
                return BitLevelGeneration.BitUsage_long.PopulationCount(this._neighborhood[System.Array.index(v, this._neighborhood)]);
            },
            DegreeInSet: function (v, set) {
                return BitLevelGeneration.BitUsage_long.PopulationCount((this._neighborhood[System.Array.index(v, this._neighborhood)].and(set)));
            },
            NeighborsInSet: function (v, set) {
                return this._neighborhood[System.Array.index(v, this._neighborhood)].and(set);
            },
            MaximalIndependentSubsets: function (set) {
                var list = new (System.Collections.Generic.List$1(System.Int64))(8);
                this.BronKerbosch(set, System.Int64(0), System.Int64(0), list);
                return list;
            },
            BronKerbosch: function (P, R, X, list) {
                if (P.equals(System.Int64(0)) && X.equals(System.Int64(0))) {
                    list.add(R);
                } else {
                    var u = this.TomitaPivot(P, X);
                    var q = P.and(((System.Int64(1).shl(u)).or(this._neighborhood[System.Array.index(u, this._neighborhood)])));

                    while (q.ne(System.Int64(0))) {
                        var bit = q.and(q.neg());
                        var v = BitLevelGeneration.BitUsage_long.Extract(bit);
                        var non = (bit.or(this._neighborhood[System.Array.index(v, this._neighborhood)])).not();

                        this.BronKerbosch(P.and(non), R.or(bit), X.and(non), list);

                        q = q.xor(bit);
                        P = P.xor(bit);
                        X = X.or(bit);
                    }
                }
            },
            TomitaPivot: function (P, X) {
                var min = 2147483647;
                var best = -1;
                var q = P.or(X);

                while (q.ne(System.Int64(0))) {
                    var bit = q.and(q.neg());
                    var u = BitLevelGeneration.BitUsage_long.Extract(bit);

                    var n = BitLevelGeneration.BitUsage_long.PopulationCount(((bit.or(this._neighborhood[System.Array.index(u, this._neighborhood)])).and(P)));
                    if (n < min) {
                        min = n;
                        best = u;
                    }

                    q = q.xor(bit);
                }

                return best;
            }
        }
    });

    Bridge.define("BitLevelGeneration.BitGraph_uint", {
        inherits: [BitLevelGeneration.IGraph_uint],
        fields: {
            _vertices: null,
            _neighborhood: null
        },
        props: {
            N: {
                get: function () {
                    return this._vertices.length;
                }
            },
            Vertices: {
                get: function () {
                    return this._vertices;
                }
            }
        },
        alias: [
            "N", "BitLevelGeneration$IGraph_uint$N",
            "Vertices", "BitLevelGeneration$IGraph_uint$Vertices",
            "IsIndependent", "BitLevelGeneration$IGraph_uint$IsIndependent",
            "Degree", "BitLevelGeneration$IGraph_uint$Degree",
            "DegreeInSet", "BitLevelGeneration$IGraph_uint$DegreeInSet",
            "NeighborsInSet", "BitLevelGeneration$IGraph_uint$NeighborsInSet",
            "MaximalIndependentSubsets", "BitLevelGeneration$IGraph_uint$MaximalIndependentSubsets"
        ],
        ctors: {
            ctor: function (edgeWeights) {
                this.$initialize();
                var n = Bridge.Int.clip32((1 + Math.sqrt(((1 + Bridge.Int.mul(8, edgeWeights.Count)) | 0))) / 2);
                this._vertices = System.Linq.Enumerable.range(0, n).toArray(System.Int32);

                this._neighborhood = System.Array.init(n, 0, System.UInt32);

                var k = 0;
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    var iBit = (1 << i) >>> 0;
                    for (var j = (i + 1) | 0; j < n; j = (j + 1) | 0) {
                        var jBit = (1 << j) >>> 0;

                        if (edgeWeights.getItem(k) !== 0) {
                            this._neighborhood[System.Array.index(i, this._neighborhood)] = (this._neighborhood[System.Array.index(i, this._neighborhood)] | jBit) >>> 0;
                            this._neighborhood[System.Array.index(j, this._neighborhood)] = (this._neighborhood[System.Array.index(j, this._neighborhood)] | iBit) >>> 0;
                        }

                        k = (k + 1) | 0;
                    }
                }
            },
            $ctor1: function (n, neighborhood) {
                this.$initialize();
                this._vertices = System.Linq.Enumerable.range(0, n).toArray(System.Int32);
                this._neighborhood = neighborhood;
            }
        },
        methods: {
            IsIndependent: function (set) {
                return BitLevelGeneration.BitUsage_uint.TrueForAllBitIndices(set, Bridge.fn.bind(this, function (i) {
                    return (((this._neighborhood[System.Array.index(i, this._neighborhood)] & set) >>> 0)) === 0;
                }));
            },
            Degree: function (v) {
                return BitLevelGeneration.BitUsage_uint.PopulationCount(this._neighborhood[System.Array.index(v, this._neighborhood)]);
            },
            DegreeInSet: function (v, set) {
                return BitLevelGeneration.BitUsage_uint.PopulationCount((((this._neighborhood[System.Array.index(v, this._neighborhood)] & set) >>> 0)));
            },
            NeighborsInSet: function (v, set) {
                return ((this._neighborhood[System.Array.index(v, this._neighborhood)] & set) >>> 0);
            },
            MaximalIndependentSubsets: function (set) {
                var list = new (System.Collections.Generic.List$1(System.UInt32))(8);
                this.BronKerbosch(set, 0, 0, list);
                return list;
            },
            BronKerbosch: function (P, R, X, list) {
                if (P === 0 && X === 0) {
                    list.add(R);
                } else {
                    var u = this.TomitaPivot(P, X);
                    var q = (P & ((((((1 << u) >>> 0)) | this._neighborhood[System.Array.index(u, this._neighborhood)]) >>> 0))) >>> 0;

                    while (q !== 0) {
                        var bit = (q & (((~q + 1) >>> 0))) >>> 0;
                        var v = BitLevelGeneration.BitUsage_uint.Extract(bit);
                        var non = ~(((bit | this._neighborhood[System.Array.index(v, this._neighborhood)]) >>> 0));

                        this.BronKerbosch(((P & non) >>> 0), ((R | bit) >>> 0), ((X & non) >>> 0), list);

                        q = (q ^ bit) >>> 0;
                        P = (P ^ bit) >>> 0;
                        X = (X | bit) >>> 0;
                    }
                }
            },
            TomitaPivot: function (P, X) {
                var min = 2147483647;
                var best = -1;
                var q = (P | X) >>> 0;

                while (q !== 0) {
                    var bit = (q & (((~q + 1) >>> 0))) >>> 0;
                    var u = BitLevelGeneration.BitUsage_uint.Extract(bit);

                    var n = BitLevelGeneration.BitUsage_uint.PopulationCount(((((((bit | this._neighborhood[System.Array.index(u, this._neighborhood)]) >>> 0)) & P) >>> 0)));
                    if (n < min) {
                        min = n;
                        best = u;
                    }

                    q = (q ^ bit) >>> 0;
                }

                return best;
            }
        }
    });

    Bridge.define("GraphicsLayer.ICanvas", {
        inherits: [GraphicsLayer.IProduceMouseEvents],
        $kind: "interface"
    });

    Bridge.define("Graphs.Edge", {
        inherits: [GraphicsLayer.IPaintable,Graphs.IHittable],
        statics: {
            fields: {
                LabelFont: null,
                LabelBrushColor: null,
                IndexFont: null,
                IndexBrushColor: null
            },
            ctors: {
                init: function () {
                    this.LabelFont = new GraphicsLayer.Font("Times New Roman", 18);
                    this.LabelBrushColor = new GraphicsLayer.ARGB.$ctor1(120, 0, 0, 255);
                    this.IndexFont = new GraphicsLayer.Font("System", 8);
                    this.IndexBrushColor = new GraphicsLayer.ARGB.$ctor1(200, 200, 0, 0);
                }
            }
        },
        fields: {
            _V1: null,
            _V2: null,
            _Orientation: 0,
            _thickness: 0,
            _Color: null,
            _penColor: null,
            _IsSelected: false,
            _Multiplicity: 0,
            _style: null,
            _showIndex: false
        },
        props: {
            ParentIndex: 0,
            IndexAngle: 0,
            V1: {
                get: function () {
                    return this._V1;
                },
                set: function (value) {
                    this._V1 = value;
                }
            },
            V2: {
                get: function () {
                    return this._V2;
                },
                set: function (value) {
                    this._V2 = value;
                }
            },
            Orientation: {
                get: function () {
                    return this._Orientation;
                },
                set: function (value) {
                    this._Orientation = value;

                    this.UpdateStyle();
                }
            },
            Thickness: {
                get: function () {
                    return this._thickness;
                },
                set: function (value) {
                    this._thickness = value;
                }
            },
            Color: {
                get: function () {
                    return this._Color;
                },
                set: function (value) {
                    this._Color = value;
                    this._penColor = this._Color;
                }
            },
            IsSelected: {
                get: function () {
                    return this._IsSelected;
                },
                set: function (value) {
                    if (value === this._IsSelected) {
                        return;
                    }

                    this._IsSelected = value;

                    this.Color = this._IsSelected ? new GraphicsLayer.ARGB.ctor(50, 205, 50) : new GraphicsLayer.ARGB.ctor(0, 0, 0);
                }
            },
            Multiplicity: {
                get: function () {
                    return this._Multiplicity;
                },
                set: function (value) {
                    this._Multiplicity = Math.max(1, value);
                }
            },
            Style: {
                get: function () {
                    return this._style;
                },
                set: function (value) {
                    if (value == null) {
                        return;
                    }

                    var style = value;
                    if (System.String.contains(style,"~~|~|~~")) {
                        var parts = System.String.split(style, System.Array.init(["~~|~|~~"], System.String), null, 0);
                        if (parts.length >= 2) {
                            style = parts[System.Array.index(0, parts)];
                            this.Label = parts[System.Array.index(1, parts)];
                        }
                    }

                    if (System.String.startsWith(style, "+") && !System.String.isNullOrEmpty(this._style)) {
                        this._style = System.String.concat(this._style, (System.String.concat(", ", System.String.trimStart(style, [43]))));
                    } else {
                        this._style = System.String.trimStart(style, [43]);
                    }
                }
            },
            Label: null
        },
        alias: [
            "Paint", "GraphicsLayer$IPaintable$Paint",
            "Hit", "Graphs$IHittable$Hit"
        ],
        ctors: {
            init: function () {
                this._thickness = 4;
                this._Color = new GraphicsLayer.ARGB.ctor(0, 0, 0);
                this._penColor = new GraphicsLayer.ARGB.ctor(0, 0, 0);
                this._showIndex = false;
            },
            $ctor1: function (v1, v2) {
                Graphs.Edge.$ctor2.call(this, v1, v2, Graphs.Edge.Orientations.None);
            },
            $ctor2: function (v1, v2, orientation) {
                this.$initialize();
                this._V1 = v1;
                this._V2 = v2;
                this._Orientation = orientation;
                this._Multiplicity = 1;
            },
            ctor: function (e, vertices) {
                this.$initialize();
                this.V1 = vertices.getItem(e.IndexV1);
                this.V2 = vertices.getItem(e.IndexV2);
                this.Orientation = e.Orientation;
                this.Thickness = e.Thickness;
                this.Multiplicity = e.Multiplicity;
                this.Style = e.Style;
                this.Label = e.Label;
            }
        },
        methods: {
            Paint: function (g, width, height) {
                if (Bridge.referenceEquals(this._V1, this._V2)) {
                    // Draw self loop.
                } else {
                    var maxRadius1 = Math.max(this._V1.LocalBounds.Width, this._V1.LocalBounds.Height) / 2;
                    var maxRadius2 = Math.max(this._V2.LocalBounds.Width, this._V2.LocalBounds.Height) / 2;

                    var cos = (this._V2.X - this._V1.X) / Math.sqrt((this._V2.X - this._V1.X) * (this._V2.X - this._V1.X) + (this._V2.Y - this._V1.Y) * (this._V2.Y - this._V1.Y));
                    cos = Math.min(Math.max(cos, -1), 1);

                    var sin = (this._V2.Y - this._V1.Y) / Math.sqrt((this._V2.X - this._V1.X) * (this._V2.X - this._V1.X) + (this._V2.Y - this._V1.Y) * (this._V2.Y - this._V1.Y));
                    sin = Math.min(Math.max(sin, -1), 1);

                    var angle = Math.acos(cos);
                    if (this._V1.Y > this._V2.Y) {
                        angle = -angle;
                    }

                    if (isNaN(angle)) {
                        return;
                    }

                    var angleStep = 1.5707963267948966 / this._Multiplicity;
                    var evenModifier = (this._Multiplicity % 2 === 0) ? 0.5 : 0;

                    var topStart = new GraphicsLayer.Box.ctor(0, 0);
                    var topFinish = new GraphicsLayer.Box.ctor(0, 0);
                    var first = true;
                    for (var i = (Bridge.Int.div(((-(((this._Multiplicity - 1) | 0))) | 0), 2)) | 0; i < Math.ceil((((this._Multiplicity + 1) | 0)) / 2.0); i = (i + 1) | 0) {
                        var startAngle = angle + angleStep * (i - evenModifier);
                        var finishAngle = angle - angleStep * (i - evenModifier);

                        var start = this.LocalToGlobal(Graphs.Vector.op_Addition(this._V1.Location, Graphs.Utility.PolarToRectangular(maxRadius1 + 0.01, startAngle)), width, height);
                        var finish = this.LocalToGlobal(Graphs.Vector.op_Subtraction(this._V2.Location, Graphs.Utility.PolarToRectangular(maxRadius2 + 0.01, finishAngle)), width, height);


                        if (first) {
                            first = false;
                            topStart = start;
                            topFinish = finish;
                        }

                        g.GraphicsLayer$IGraphics$DrawLine(this._penColor, start, finish, this._thickness);
                    }

                    if (this._Orientation !== Graphs.Edge.Orientations.None) {
                        var points = System.Array.init(3, null, GraphicsLayer.Box);
                        if (this._Orientation === Graphs.Edge.Orientations.Forward) {
                            var sweep = Graphs.Vector.op_Subtraction(this._V2.Location, Graphs.Utility.PolarToRectangular(maxRadius2 + 0.025, angle));

                            points[System.Array.index(0, points)] = this.LocalToGlobal(Graphs.Utility.RotateAroundPoint$1(sweep, this._V2.Location, 0.17453292519943295), width, height);
                            points[System.Array.index(1, points)] = this.LocalToGlobal(Graphs.Vector.op_Subtraction(this._V2.Location, Graphs.Utility.PolarToRectangular(maxRadius2 + 0.005, angle)), width, height);
                            points[System.Array.index(2, points)] = this.LocalToGlobal(Graphs.Utility.RotateAroundPoint$1(sweep, this._V2.Location, -0.17453292519943295), width, height);
                        } else if (this._Orientation === Graphs.Edge.Orientations.Backward) {
                            var sweep1 = Graphs.Vector.op_Addition(this._V1.Location, Graphs.Utility.PolarToRectangular(maxRadius1 + 0.025, angle));

                            points[System.Array.index(0, points)] = this.LocalToGlobal(Graphs.Utility.RotateAroundPoint$1(sweep1, this._V1.Location, 0.17453292519943295), width, height);
                            points[System.Array.index(1, points)] = this.LocalToGlobal(Graphs.Vector.op_Addition(this._V1.Location, Graphs.Utility.PolarToRectangular(maxRadius1 + 0.005, angle)), width, height);
                            points[System.Array.index(2, points)] = this.LocalToGlobal(Graphs.Utility.RotateAroundPoint$1(sweep1, this._V1.Location, -0.17453292519943295), width, height);
                        }

                        g.GraphicsLayer$IGraphics$FillPolygon(new GraphicsLayer.ARGB.ctor(0, 0, 0), points);
                    }

                    var label = this.Label;
                    if (!System.String.isNullOrEmpty(label)) {
                        var box = g.GraphicsLayer$IGraphics$MeasureString(label, Graphs.Edge.LabelFont);
                        var bounds = new GraphicsLayer.Box.$ctor1(topStart.X + (topFinish.X - topStart.X) / 2 - box.Width / 2 - 0.75 * box.Width * sin, topStart.Y + (topFinish.Y - topStart.Y) / 2 - box.Height / 2 + 0.75 * box.Height * cos, box.Width, box.Height);
                        g.GraphicsLayer$IGraphics$DrawString(label, Graphs.Edge.LabelFont, Graphs.Edge.LabelBrushColor, bounds);
                    }

                    if (this._showIndex) {
                        var bounds1 = new GraphicsLayer.Box.$ctor1(topStart.X + (topFinish.X - topStart.X) / 2, topStart.Y + (topFinish.Y - topStart.Y) / 2, 10, 10);
                        var cx = (bounds1.Left + bounds1.Right) / 2;
                        var cy = (bounds1.Bottom + bounds1.Top) / 2;
                        var r = Math.max(bounds1.Width, bounds1.Height) / 2 + 5;
                        var bb = new GraphicsLayer.Box.$ctor1(cx + r * Math.cos(this.IndexAngle) - 5, cy + r * Math.sin(this.IndexAngle) - 5, 10, 10);
                        g.GraphicsLayer$IGraphics$DrawString(this.ParentIndex.toString(), Graphs.Edge.IndexFont, Graphs.Edge.IndexBrushColor, bb);
                    }
                }
            },
            LocalToGlobal: function (local, width, height) {
                return new GraphicsLayer.Box.ctor(width * local.X, height * local.Y);
            },
            Hit: function (x, y) {
                return false;
            },
            Meets: function (other) {
                return Bridge.referenceEquals(this._V1, other.V1) || Bridge.referenceEquals(this._V2, other.V1) || Bridge.referenceEquals(this._V1, other.V2) || Bridge.referenceEquals(this._V2, other.V2);
            },
            UpdateStyle: function () {
                if (this.Style == null) {
                    this.Style = "";
                }

                var sb = new System.Text.StringBuilder();
                this.Style = sb.toString();
            },
            ToggleIndex: function () {
                this._showIndex = !this._showIndex;
            },
            RotateIndex: function () {
                this.IndexAngle += 0.19634954084936207;
                if (this.IndexAngle >= 6.2831853071795862) {
                    this.IndexAngle = 0;
                }
            }
        }
    });

    Bridge.define("Graphs.Graph", {
        inherits: [GraphicsLayer.IPaintable],
        statics: {
            fields: {
                GraphExtension: null,
                EdgeWeightExtension: null
            },
            ctors: {
                init: function () {
                    this.GraphExtension = ".graph";
                    this.EdgeWeightExtension = ".edge weight";
                }
            }
        },
        fields: {
            _vertices: null,
            _edges: null,
            _ModifyListsToken: null,
            _FileName: null,
            _showVertexIndices: false,
            _showEdgeIndices: false
        },
        props: {
            IsDirected: {
                get: function () {
                    return System.Linq.Enumerable.from(this._edges).any($asm.$.Graphs.Graph.f1);
                }
            },
            SelectedItems: {
                get: function () {
                    var $t, $t1;
                    this._ModifyListsToken;
                    {
                        var selectedItems = new (System.Collections.Generic.List$1(Graphs.IHittable))();
                        $t = Bridge.getEnumerator(this.SelectedVertices);
                        try {
                            while ($t.moveNext()) {
                                var i = $t.Current;
                                selectedItems.add(i);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }$t1 = Bridge.getEnumerator(this.SelectedEdges);
                        try {
                            while ($t1.moveNext()) {
                                var i1 = $t1.Current;
                                selectedItems.add(i1);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        return selectedItems;
                    }
                }
            },
            SelectedVertices: {
                get: function () {
                    this._ModifyListsToken;
                    return System.Linq.Enumerable.from(this._vertices).where($asm.$.Graphs.Graph.f2).toList(Graphs.Vertex);
                }
            },
            SelectedEdges: {
                get: function () {
                    this._ModifyListsToken;
                    return System.Linq.Enumerable.from(this._edges).where($asm.$.Graphs.Graph.f3).toList(Graphs.Edge);
                }
            },
            BoundingRectangle: {
                get: function () {
                    var $t;
                    this._ModifyListsToken;
                    {
                        var left = System.Double.max;
                        var right = System.Double.min;
                        var top = System.Double.max;
                        var bottom = System.Double.min;

                        $t = Bridge.getEnumerator(this._vertices);
                        try {
                            while ($t.moveNext()) {
                                var v = $t.Current;
                                left = Math.min(left, v.LocalBounds.Left);
                                right = Math.max(right, v.LocalBounds.Right);
                                top = Math.min(top, v.LocalBounds.Top);
                                bottom = Math.max(bottom, v.LocalBounds.Bottom);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        return new GraphicsLayer.Box.$ctor1(left, top, right - left, bottom - top);
                    }
                }
            },
            SelectedBoundingRectangle: {
                get: function () {
                    var $t;
                    var sv = System.Linq.Enumerable.from(this.SelectedVertices).toList(Graphs.Vertex);
                    if (sv.Count <= 0) {
                        return this.BoundingRectangle;
                    }

                    this._ModifyListsToken;
                    {
                        var left = System.Double.max;
                        var right = System.Double.min;
                        var top = System.Double.max;
                        var bottom = System.Double.min;

                        $t = Bridge.getEnumerator(sv);
                        try {
                            while ($t.moveNext()) {
                                var v = $t.Current;
                                left = Math.min(left, v.LocalBounds.Left);
                                right = Math.max(right, v.LocalBounds.Right);
                                top = Math.min(top, v.LocalBounds.Top);
                                bottom = Math.max(bottom, v.LocalBounds.Bottom);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        return new GraphicsLayer.Box.$ctor1(left, top, right - left, bottom - top);
                    }
                }
            },
            Name: {
                get: function () {
                    return this._FileName;
                },
                set: function (value) {
                    this._FileName = value;
                }
            },
            Vertices: {
                get: function () {
                    return this._vertices;
                }
            },
            Edges: {
                get: function () {
                    return this._edges;
                }
            },
            ParametersDirty: false
        },
        alias: ["Paint", "GraphicsLayer$IPaintable$Paint"],
        ctors: {
            init: function () {
                this._vertices = new (System.Collections.Generic.List$1(Graphs.Vertex))();
                this._edges = new (System.Collections.Generic.List$1(Graphs.Edge))();
                this._ModifyListsToken = {  };
            },
            ctor: function () {
                this.$initialize();
                this.ParametersDirty = true;
            },
            $ctor2: function (g) {
                Graphs.Graph.ctor.call(this);
                this._vertices = System.Linq.Enumerable.from(g.Vertices).select($asm.$.Graphs.Graph.f4).toList(Graphs.Vertex);
                this._edges = System.Linq.Enumerable.from(g.Edges).select(Bridge.fn.bind(this, $asm.$.Graphs.Graph.f5)).toList(Graphs.Edge);
                this.Name = g.Name;
            },
            $ctor3: function (vertices, edges) {
                this.$initialize();
                this._vertices = System.Linq.Enumerable.from(vertices).toList(Graphs.Vertex);
                this._edges = System.Linq.Enumerable.from(edges).toList(Graphs.Edge);
            },
            $ctor1: function (g, position, directed) {
                if (directed === void 0) { directed = true; }

                Graphs.Graph.ctor.call(this);
                if (g.VertexWeight != null && g.VertexWeight.Count === g.N) {
                    this._vertices = System.Linq.Enumerable.from(g.Vertices).select(function (v) {
                            return new Graphs.Vertex.$ctor4(position.getItem(v).X, position.getItem(v).Y, g.VertexWeight.getItem(v).toString());
                        }).toList(Graphs.Vertex);
                } else {
                    this._vertices = System.Linq.Enumerable.from(g.Vertices).select(function (v) {
                            return new Graphs.Vertex.$ctor3(position.getItem(v).X, position.getItem(v).Y);
                        }).toList(Graphs.Vertex);
                }
                this._edges = new (System.Collections.Generic.List$1(Graphs.Edge))();

                for (var i = 0; i < g.N; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < g.N; j = (j + 1) | 0) {
                        if (directed) {
                            if (g.Directed.get([i, j])) {
                                this._edges.add(new Graphs.Edge.$ctor2(this._vertices.getItem(i), this._vertices.getItem(j), Graphs.Edge.Orientations.Forward));
                            } else {
                                if (g.Adjacent.get([i, j])) {
                                    this._edges.add(new Graphs.Edge.$ctor2(this._vertices.getItem(j), this._vertices.getItem(i), Graphs.Edge.Orientations.Forward));
                                }
                            }
                        } else if (g.Adjacent.get([i, j])) {
                            this._edges.add(new Graphs.Edge.$ctor2(this._vertices.getItem(i), this._vertices.getItem(j), Graphs.Edge.Orientations.None));
                        }
                    }
                }
            }
        },
        methods: {
            Paint: function (g, width, height) {
                var $t, $t1;
                this._ModifyListsToken;
                {
                    if (this.ParametersDirty) {
                        var graph = new Algorithms.Graph.$ctor1(this.GetEdgeWeights());
                        var n = this.Vertices.Count;

                        for (var i = 0; i < this.Vertices.Count; i = (i + 1) | 0) {
                            this.Vertices.getItem(i).IsUniversal = graph.Degree(i) === ((n - 1) | 0);
                        }

                        this.ParametersDirty = false;
                    }

                    var jj = 0;
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            v.ParentIndex = Bridge.identity(jj, (jj = (jj + 1) | 0));
                            v.Paint(g, width, height);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    jj = 0;
                    $t1 = Bridge.getEnumerator(this._edges);
                    try {
                        while ($t1.moveNext()) {
                            var e = $t1.Current;
                            e.ParentIndex = Bridge.identity(jj, (jj = (jj + 1) | 0));
                            e.Paint(g, width, height);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$dispose();
                        }
                    }}
            },
            GetEdgeWeights: function () {
                var weights = new (System.Collections.Generic.List$1(System.Int32))();

                for (var i = 0; i < this._vertices.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this._vertices.Count; j = (j + 1) | 0) {
                        var e = { };
                        if (this.EdgeExists$1(this._vertices.getItem(i), this._vertices.getItem(j), e)) {
                            weights.add(1);
                        } else {
                            if (this.EdgeExists$1(this._vertices.getItem(j), this._vertices.getItem(i), e)) {
                                if (e.v.Orientation === Graphs.Edge.Orientations.None) {
                                    weights.add(1);
                                } else {
                                    weights.add(-1);
                                }
                            } else {
                                weights.add(0);
                            }
                        }
                    }
                }

                return weights;
            },
            ModifyOrientation: function (edgeWeights) {
                var k = 0;
                for (var i = 0; i < this._vertices.Count; i = (i + 1) | 0) {
                    for (var j = (i + 1) | 0; j < this._vertices.Count; j = (j + 1) | 0) {
                        var w = edgeWeights.getItem(k);

                        if (w !== 0) {
                            var e = this.GetEdge(this._vertices.getItem(i), this._vertices.getItem(j));

                            if (Bridge.referenceEquals(e.V1, this._vertices.getItem(i)) && Bridge.referenceEquals(e.V2, this._vertices.getItem(j))) {
                                if (w < 0) {
                                    e.Orientation = Graphs.Edge.Orientations.Backward;
                                } else {
                                    e.Orientation = Graphs.Edge.Orientations.Forward;
                                }
                            } else {
                                if (w < 0) {
                                    e.Orientation = Graphs.Edge.Orientations.Forward;
                                } else {
                                    e.Orientation = Graphs.Edge.Orientations.Backward;
                                }
                            }
                        }

                        k = (k + 1) | 0;
                    }
                }

                this.ParametersDirty = true;
            },
            Clone: function () {
                var s = GraphsCore.CompactSerializer.Serialize(this);
                var g = GraphsCore.CompactSerializer.Deserialize(s);
                if (g != null) {
                    g.ParametersDirty = true;
                } else {
                    System.Console.WriteLine("clone is null");
                }
                return g;
            },
            HitTest: function (x, y) {
                var $t, $t1;
                $t = Bridge.getEnumerator(this._vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        if (v.Hit(x, y)) {
                            return v;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(this._edges);
                try {
                    while ($t1.moveNext()) {
                        var e = $t1.Current;
                        if (e.Hit(x, y)) {
                            return e;
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                return null;
            },
            UnselectAll: function () {
                this.UnselectAllVertices();
                this.UnselectAllEdges();
            },
            UnselectAllVertices: function () {
                var $t;
                $t = Bridge.getEnumerator(this._vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        v.IsSelected = false;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            UnselectAllEdges: function () {
                var $t;
                $t = Bridge.getEnumerator(this._edges);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        e.IsSelected = false;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            SelectEdges: function (edges, symmetricDifference) {
                var $t;
                this.UnselectAllVertices();
                if (!symmetricDifference) {
                    this.UnselectAllEdges();
                }

                $t = Bridge.getEnumerator(edges, Graphs.Edge);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        e.IsSelected = symmetricDifference ? !e.IsSelected : true;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            SelectVertices: function (vertices, symmetricDifference) {
                var $t;
                this.UnselectAllEdges();
                if (!symmetricDifference) {
                    this.UnselectAllVertices();
                }

                $t = Bridge.getEnumerator(vertices, Graphs.Vertex);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        v.IsSelected = symmetricDifference ? !v.IsSelected : true;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            SelectObjects: function (selectionPoints, symmetricDifference) {
                try {
                    var bounds = new Graphs.PolygonContainer(selectionPoints.toArray());

                    var verticesInPolygon = System.Linq.Enumerable.from(this._vertices).where(function (v) {
                            return bounds.Contains(new GraphicsLayer.Box.ctor(v.X, v.Y));
                        }).toList(Graphs.Vertex);

                    if (verticesInPolygon.Count > 0) {
                        this.SelectVertices(verticesInPolygon, symmetricDifference);
                    } else {
                        var edgesHittingPolygon = System.Linq.Enumerable.from(this._edges).where(function (e) {
                                for (var i = 0; i < selectionPoints.Count; i = (i + 1) | 0) {
                                    var start = selectionPoints.getItem(i);
                                    var end = selectionPoints.getItem((((i + 1) | 0)) % selectionPoints.Count);

                                    if (Graphs.Utility.HaveIntersection(start, end, Graphs.Vector.op_Implicit(e.V1.Location), Graphs.Vector.op_Implicit(e.V2.Location))) {
                                        return true;
                                    }
                                }

                                return false;
                            }).toList(Graphs.Edge);

                        this.SelectEdges(edgesHittingPolygon, symmetricDifference);
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            AddVertex: function (v) {
                if (this._showVertexIndices) {
                    v.ToggleIndex();
                }
                this._ModifyListsToken;
                this._vertices.add(v);

                this.ParametersDirty = true;
                return true;
            },
            RemoveVertex: function (v) {
                var $t;
                var neighbors = this.FindNeighbors(v);
                $t = Bridge.getEnumerator(neighbors);
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        this.RemoveEdge(v, x);
                        this.RemoveEdge(x, v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this._ModifyListsToken;
                this._vertices.remove(v);

                this.ParametersDirty = neighbors.Count > 0;

                return neighbors.Count > 0;
            },
            AddEdge$1: function (v1, v2, multiplicity) {
                if (multiplicity === void 0) { multiplicity = 1; }
                return this.AddEdge(v1, v2, Graphs.Edge.Orientations.None, multiplicity);
            },
            AddEdge: function (v1, v2, orientation, multiplicity, thickness, style, label) {
                if (multiplicity === void 0) { multiplicity = 1; }
                if (thickness === void 0) { thickness = 3.0; }
                if (style === void 0) { style = ""; }
                if (label === void 0) { label = ""; }
                if (Bridge.referenceEquals(v1, v2)) {
                    // Not allowing self-loops for now.
                    return false;
                }

                if (!this.EdgeExists(v1, v2) && !this.EdgeExists(v2, v1)) {
                    this._ModifyListsToken;
                    {
                        var edge = new Graphs.Edge.$ctor2(v1, v2, orientation);
                        edge.Multiplicity = multiplicity;
                        edge.Thickness = thickness;
                        edge.Style = style;
                        edge.Label = label;
                        if (this._showEdgeIndices) {
                            edge.ToggleIndex();
                        }
                        this._edges.add(edge);
                        this.ParametersDirty = true;

                        return true;
                    }
                }

                return false;
            },
            AddEdge$2: function (e) {
                this.AddEdge(e.V1, e.V2, e.Orientation, Math.max(1, e.Multiplicity), e.Thickness, e.Style, e.Label);
            },
            RemoveEdge: function (v1, v2) {
                var $t;
                var toRemove;

                this._ModifyListsToken;
                {
                    toRemove = System.Linq.Enumerable.from(this._edges).where(function (e) {
                            return Bridge.referenceEquals(e.V1, v1) && Bridge.referenceEquals(e.V2, v2);
                        }).toList(Graphs.Edge);
                }

                $t = Bridge.getEnumerator(toRemove);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        this._edges.remove(e);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.ParametersDirty = toRemove.Count > 0;
                return toRemove.Count > 0;
            },
            EdgeExists: function (v1, v2) {
                var edge = { };
                return this.EdgeExists$1(v1, v2, edge);
            },
            EdgeExists$1: function (v1, v2, edge) {
                var $t;
                edge.v = null;

                this._ModifyListsToken;
                {
                    $t = Bridge.getEnumerator(this._edges);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            edge.v = e;
                            if (Bridge.referenceEquals(e.V1, v1) && Bridge.referenceEquals(e.V2, v2) && (e.Orientation === Graphs.Edge.Orientations.None || e.Orientation === Graphs.Edge.Orientations.Forward)) {
                                return true;
                            }

                            if (Bridge.referenceEquals(e.V1, v2) && Bridge.referenceEquals(e.V2, v1) && e.Orientation === Graphs.Edge.Orientations.Backward) {
                                return true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return false;
            },
            GetEdge: function (v1, v2) {
                var $t;
                this._ModifyListsToken;
                {
                    $t = Bridge.getEnumerator(this._edges);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            if (Bridge.referenceEquals(e.V1, v1) && Bridge.referenceEquals(e.V2, v2) || Bridge.referenceEquals(e.V1, v2) && Bridge.referenceEquals(e.V2, v1)) {
                                return e;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return null;
            },
            InducedSubgraph: function (vertices) {
                var $t, $t1, $t2;
                var induced = new Graphs.Graph.ctor();
                $t = Bridge.getEnumerator(vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        induced.AddVertex(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(induced.Vertices);
                try {
                    while ($t1.moveNext()) {
                        var v1 = $t1.Current;
                        $t2 = Bridge.getEnumerator(induced.Vertices);
                        try {
                            while ($t2.moveNext()) {
                                var v2 = $t2.Current;
                                var e = { };
                                if (this.EdgeExists$1(v1, v2, e)) {
                                    induced.AddEdge(v1, v2, e.v.Orientation !== Graphs.Edge.Orientations.None ? Graphs.Edge.Orientations.Forward : Graphs.Edge.Orientations.None, e.v.Multiplicity, e.v.Thickness, e.v.Style, e.v.Label);
                                }
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }
                return induced.Clone();
            },
            DisjointUnion: function (g) {
                var $t, $t1;
                $t = Bridge.getEnumerator(g.Vertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        this.AddVertex(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                $t1 = Bridge.getEnumerator(g.Edges);
                try {
                    while ($t1.moveNext()) {
                        var e = $t1.Current;
                        this.AddEdge$2(e);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }},
            FindNeighbors: function (v) {
                var $t;
                var neighbors = new (System.Collections.Generic.List$1(Graphs.Vertex))();

                this._ModifyListsToken;
                {
                    $t = Bridge.getEnumerator(this._edges);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            if (Bridge.referenceEquals(e.V1, v)) {
                                neighbors.add(e.V2);
                            }
                            if (Bridge.referenceEquals(e.V2, v)) {
                                neighbors.add(e.V1);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}

                return neighbors;
            },
            Translate: function (offset) {
                var $t;
                this._ModifyListsToken;
                {
                    $t = Bridge.getEnumerator(this._vertices);
                    try {
                        while ($t.moveNext()) {
                            var v = $t.Current;
                            v.X += offset.X;
                            v.Y += offset.Y;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}
            },
            ToggleEdgeIndices: function () {
                var $t;
                this._showEdgeIndices = !this._showEdgeIndices;
                $t = Bridge.getEnumerator(this.Edges);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        a.ToggleIndex();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }},
            ToggleVertexIndices: function () {
                var $t;
                this._showVertexIndices = !this._showVertexIndices;
                $t = Bridge.getEnumerator(this.Vertices);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        a.ToggleIndex();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}
        }
    });

    Bridge.ns("Graphs.Graph", $asm.$);

    Bridge.apply($asm.$.Graphs.Graph, {
        f1: function (e) {
            return e.Orientation !== Graphs.Edge.Orientations.None;
        },
        f2: function (v) {
            return v.IsSelected;
        },
        f3: function (e) {
            return e.IsSelected;
        },
        f4: function (v) {
            return new Graphs.Vertex.ctor(v);
        },
        f5: function (e) {
            return new Graphs.Edge.ctor(e, this._vertices);
        }
    });

    Bridge.define("Graphs.GraphCanvas", {
        inherits: [GraphicsLayer.IPaintable],
        statics: {
            fields: {
                DefaultBaseViewScale: 0,
                MaxZoomScale: 0,
                _gridStep: 0,
                SelectionPenColor: null,
                GridPenColor: null,
                BackgroundColor: null
            },
            ctors: {
                init: function () {
                    this.DefaultBaseViewScale = 800;
                    this.MaxZoomScale = 6000;
                    this._gridStep = 0.04;
                    this.SelectionPenColor = new GraphicsLayer.ARGB.ctor(0, 0, 255);
                    this.GridPenColor = new GraphicsLayer.ARGB.$ctor1(75, 0, 10, 0);
                    this.BackgroundColor = new GraphicsLayer.ARGB.ctor(247, 247, 247);
                }
            }
        },
        fields: {
            BaseViewScale: 0,
            ZoomDelta: 0,
            MinZoom: 0,
            _zoomFitNextPaint: false,
            _snapToGrid: false,
            _drawGrid: false,
            _graph: null,
            _DraggedVertex: null,
            _selectionPoints: null,
            _SelectionPointsToken: null,
            _controlWasDown: false,
            _canvas: null,
            _state: 0,
            _viewScale: 0,
            _Zoom: 0,
            _secondaryConverter: null,
            _history: null,
            _historyIndex: 0
        },
        events: {
            GraphModified: null,
            NameModified: null
        },
        props: {
            SnapToGrid: {
                get: function () {
                    return this._snapToGrid;
                },
                set: function (value) {
                    var needRedraw = value && !this._snapToGrid;
                    this._snapToGrid = value;
                    if (needRedraw) {
                        this.Invalidate();
                    }
                }
            },
            GridStep: {
                get: function () {
                    return Graphs.GraphCanvas._gridStep;
                },
                set: function (value) {
                    var needRedraw = this.SnapToGrid && value !== Graphs.GraphCanvas._gridStep;
                    Graphs.GraphCanvas._gridStep = value;
                    if (needRedraw) {
                        this.Invalidate();
                    }
                }
            },
            DrawGrid: {
                get: function () {
                    return this._drawGrid;
                },
                set: function (value) {
                    var needRedraw = this._drawGrid !== value;
                    this._drawGrid = value;
                    if (needRedraw) {
                        this.Invalidate();
                    }
                }
            },
            HasPainted: false,
            Width: 0,
            Height: 0,
            Graph: {
                get: function () {
                    return this._graph;
                }
            },
            Canvas: {
                get: function () {
                    return this._canvas;
                },
                set: function (value) {
                    this._canvas = value;

                    this._canvas.GraphicsLayer$IProduceMouseEvents$addMouseMoved(Bridge.fn.cacheBind(this, this.OnMouseMove));
                    this._canvas.GraphicsLayer$IProduceMouseEvents$addMouseButtonDown(Bridge.fn.cacheBind(this, this.OnMouseDown));
                    this._canvas.GraphicsLayer$IProduceMouseEvents$addMouseButtonUp(Bridge.fn.cacheBind(this, this.OnMouseUp));
                    this._canvas.GraphicsLayer$IProduceMouseEvents$addMouseButtonDoubleClicked(Bridge.fn.cacheBind(this, this.OnMouseDoubleClick));
                }
            },
            Zoom: {
                set: function (value) {
                    if (value === this._Zoom) {
                        return;
                    }

                    this._Zoom = value;
                    var scale = Bridge.Int.clip32(this._Zoom * this.BaseViewScale);
                    if (scale > Graphs.GraphCanvas.MaxZoomScale) {
                        scale = Graphs.GraphCanvas.MaxZoomScale;
                        this._Zoom = (Bridge.Int.div(scale, this.BaseViewScale)) | 0;
                    }

                    this.ViewScale = scale;
                }
            },
            ViewScale: {
                get: function () {
                    return this._viewScale;
                },
                set: function (value) {
                    if (value === this._viewScale) {
                        return;
                    }

                    this._viewScale = value;
                }
            },
            IsEmpty: {
                get: function () {
                    return this._graph.Vertices.Count <= 0;
                }
            }
        },
        alias: ["Paint", "GraphicsLayer$IPaintable$Paint"],
        ctors: {
            init: function () {
                this.BaseViewScale = Graphs.GraphCanvas.DefaultBaseViewScale;
                this.ZoomDelta = 0.15;
                this.MinZoom = 0.15;
                this._snapToGrid = true;
                this._drawGrid = true;
                this._selectionPoints = new (System.Collections.Generic.List$1(GraphicsLayer.Box))();
                this._SelectionPointsToken = {  };
                this._state = Graphs.GraphCanvas.States.Idle;
                this._viewScale = Graphs.GraphCanvas.DefaultBaseViewScale;
                this._Zoom = 1.0;
                this._history = new (System.Collections.Generic.List$1(Graphs.GraphCanvas.HistoricalGraph))();
                this._historyIndex = 0;
            },
            ctor: function (graph, secondaryConverter) {
                if (secondaryConverter === void 0) { secondaryConverter = null; }

                this.$initialize();                var $t;

                this._graph = graph != null ? graph : new Graphs.Graph.ctor();
                this._secondaryConverter = secondaryConverter;
                this._history.add(($t = new Graphs.GraphCanvas.HistoricalGraph(), $t.Graph = this._graph.Clone(), $t.Zoom = this._Zoom, $t.ViewScale = this._viewScale, $t));
        }
    },
    methods: {
        SetZoomDelta: function (d) {
            this.ZoomDelta = d;
            this.MinZoom = d;
        },
        Invalidate: function () {
            if (this.Canvas != null) {
                this.Canvas.GraphicsLayer$ICanvas$Invalidate();
            }
        },
        GraphChanged: function () {
            var $t;
            if (((((this._history.Count - this._historyIndex) | 0) - 1) | 0) > 0) {
                this._history.removeRange(((this._historyIndex + 1) | 0), ((((this._history.Count - this._historyIndex) | 0) - 1) | 0));
            }

            this._history.add(($t = new Graphs.GraphCanvas.HistoricalGraph(), $t.Graph = this._graph.Clone(), $t.Zoom = this._Zoom, $t.ViewScale = this._viewScale, $t));
            this._historyIndex = (this._history.Count - 1) | 0;

            if (!Bridge.staticEquals(this.GraphModified, null)) {
                this.GraphModified(this.Graph);
            }
        },
        DoUndo: function () {
            if (this._historyIndex <= 0) {
                return false;
            }

            this._historyIndex = (this._historyIndex - 1) | 0;
            this.ObeyHistory();

            return this._historyIndex > 0;
        },
        DoRedo: function () {
            if (this._historyIndex >= ((this._history.Count - 1) | 0)) {
                return false;
            }

            this._historyIndex = (this._historyIndex + 1) | 0;
            this.ObeyHistory();

            return this._historyIndex < ((this._history.Count - 1) | 0);
        },
        ObeyHistory: function () {
            this._graph = this._history.getItem(this._historyIndex).Graph.Clone();
            this.ViewScale = this._history.getItem(this._historyIndex).ViewScale;
            this.Zoom = this._history.getItem(this._historyIndex).Zoom;
            this._graph.ParametersDirty = true;

            if (!Bridge.staticEquals(this.GraphModified, null)) {
                this.GraphModified(this.Graph);
            }

            this.Invalidate();
        },
        Save: function (name) {
            this._graph.Name = name;
            return ""; // _graph.Serialize();
        },
        DoZoom: function (amount, location) {
            var width = this.Width;
            var height = this.Height;

            var oldCenter = new Graphs.Vector(width / this._viewScale * location.X, height / this._viewScale * location.Y);

            this.Zoom = Math.max(this.MinZoom, this._Zoom + this.ZoomDelta * amount);

            var center = new Graphs.Vector(width / this._viewScale * location.X, height / this._viewScale * location.Y);

            this._graph.Translate(Graphs.Vector.op_Subtraction(center, oldCenter));

            this.Invalidate();
        },
        DoZoomFit: function () {
            if (this._graph.Vertices.Count <= 0) {
                this.Zoom = 1;
                this.Invalidate();
                return;
            }

            var width = this.Width;
            var height = this.Height;
            var bounds = this._graph.SelectedBoundingRectangle;
            var c = new Graphs.Vector(bounds.Left + bounds.Width / 2, bounds.Top + bounds.Height / 2);

            var actual = Math.min(width, height);
            this.Zoom = 0.9 * actual / Math.max(bounds.Width, bounds.Height) / this.BaseViewScale;

            var center = new Graphs.Vector(width / this._viewScale * 0.5, height / this._viewScale * 0.5);
            this._graph.Translate(Graphs.Vector.op_Subtraction(center, c));

            this.Invalidate();
        },
        DoDelete: function () {
            var $t, $t1;
            if (this._graph.SelectedVertices.Count > 0) {
                $t = Bridge.getEnumerator(this._graph.SelectedVertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        this._graph.RemoveVertex(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }}

            if (this._graph.SelectedEdges.Count > 0) {
                $t1 = Bridge.getEnumerator(this._graph.SelectedEdges);
                try {
                    while ($t1.moveNext()) {
                        var e = $t1.Current;
                        this._graph.RemoveEdge(e.V1, e.V2);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$dispose();
                    }
                }}

            this.Invalidate();
            this.GraphChanged();
        },
        DoReverseSelectedEdges: function () {
            var $t;
            if (this._graph.SelectedEdges.Count > 0) {
                $t = Bridge.getEnumerator(this._graph.SelectedEdges);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        var oo = e.Orientation;
                        if (oo === Graphs.Edge.Orientations.Forward) {
                            oo = Graphs.Edge.Orientations.Backward;
                        } else {
                            if (oo === Graphs.Edge.Orientations.Backward) {
                                oo = Graphs.Edge.Orientations.Forward;
                            }
                        }

                        e.Orientation = oo;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.Invalidate();
                this.GraphChanged();
            }
        },
        DoRotateSelectedEdges: function () {
            var $t;
            if (this._graph.SelectedEdges.Count > 0) {
                $t = Bridge.getEnumerator(this._graph.SelectedEdges);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        var oo = e.Orientation;
                        if (oo === Graphs.Edge.Orientations.Forward) {
                            oo = Graphs.Edge.Orientations.Backward;
                        } else {
                            if (oo === Graphs.Edge.Orientations.Backward) {
                                oo = Graphs.Edge.Orientations.None;
                            } else {
                                if (oo === Graphs.Edge.Orientations.None) {
                                    oo = Graphs.Edge.Orientations.Forward;
                                }
                            }
                        }

                        e.Orientation = oo;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                this.Invalidate();
                this.GraphChanged();
            }
        },
        DoCut: function () {
            this.DoCopy();
            this.DoDelete();
        },
        DoCopy: function (verbose) {
            if (verbose === void 0) { verbose = false; }
            var h = this._graph.InducedSubgraph(this._graph.SelectedVertices);
            return GraphsCore.CompactSerializer.Serialize(h);
        },
        DoPaste: function (s) {
            var g = null;
            if (System.String.contains(s,"tikzpicture")) {
                //g = TeXConverter.FromTikz(s);
            } else if (GraphsCore.CompactSerializer.LooksLikeASerializedGraph(s)) {
                g = GraphsCore.CompactSerializer.Deserialize(s);
            } else {
                //g = Graph.Deserialize(s);
            }

            if (g != null) {
                this._graph.DisjointUnion(g);

                this.Invalidate();
                this.GraphChanged();
            } else if (System.Linq.Enumerable.from(System.String.split(s.trim(), [32].map(function(i) {{ return String.fromCharCode(i); }}))).all($asm.$.Graphs.GraphCanvas.f1)) {
                try {
                    //g = GraphIO.GraphFromEdgeWeightString(s);
                    if (g != null) {
                        this._graph.DisjointUnion(g);

                        this.Invalidate();
                        this.GraphChanged();
                    }

                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            } else {
                try {
                    //g = GraphIO.GraphFromGraph6(s.Trim());

                    if (g != null) {
                        var empty = this._graph.Vertices.Count <= 0;
                        this._graph.DisjointUnion(g);

                        if (empty) {
                            this.NameModified(g.Name);
                        }

                        this.Invalidate();
                        this.GraphChanged();
                    }
                }
                catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }
            }
        },
        DoComplement: function () {
            for (var i = 0; i < this._graph.SelectedVertices.Count; i = (i + 1) | 0) {
                for (var j = (i + 1) | 0; j < this._graph.SelectedVertices.Count; j = (j + 1) | 0) {
                    var v1 = this._graph.SelectedVertices.getItem(i);
                    var v2 = this._graph.SelectedVertices.getItem(j);

                    var edgeExists = this._graph.EdgeExists(v1, v2) || this._graph.EdgeExists(v2, v1);

                    if (edgeExists) {
                        this._graph.RemoveEdge(v1, v2);
                        this._graph.RemoveEdge(v2, v1);
                    } else {
                        this._graph.AddEdge$1(v1, v2);
                    }
                }
            }

            this.Invalidate();

            this.GraphChanged();
        },
        DoSquare: function () {
            var $t, $t1;
            var g = new Graphs.Graph.ctor();

            var vertexMap = new (System.Collections.Generic.Dictionary$2(Graphs.Vertex,Graphs.Vertex))();
            $t = Bridge.getEnumerator(this._graph.Vertices);
            try {
                while ($t.moveNext()) {
                    var v = $t.Current;
                    var w = new Graphs.Vertex.$ctor4(v.X, v.Y, v.Label);
                    g.AddVertex(w);

                    vertexMap.set(v, w);
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            $t1 = Bridge.getEnumerator(this._graph.Vertices);
            try {
                while ($t1.moveNext()) {
                    var v1 = $t1.Current;
                    var q = System.Linq.Enumerable.from(this._graph.FindNeighbors(v1)).union(System.Array.init([v1], Graphs.Vertex)).toList(Graphs.Vertex);

                    for (var i = 0; i < q.Count; i = (i + 1) | 0) {
                        for (var j = (i + 1) | 0; j < q.Count; j = (j + 1) | 0) {
                            g.AddEdge$1(vertexMap.get(q.getItem(i)), vertexMap.get(q.getItem(j)));
                        }
                    }
                }
            } finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }

            return g;
        },
        DoLineGraph: function () {
            var $t, $t1, $t2, $t3;
            var g = new Graphs.Graph.ctor();

            var edgeToCliqueMap = new (System.Collections.Generic.Dictionary$2(Graphs.Edge,System.Collections.Generic.List$1(Graphs.Vertex)))();
            $t = Bridge.getEnumerator(this._graph.Edges);
            try {
                while ($t.moveNext()) {
                    var e = $t.Current;
                    var clique = new (System.Collections.Generic.List$1(Graphs.Vertex))();

                    for (var i = 0; i < e.Multiplicity; i = (i + 1) | 0) {
                        var v = new Graphs.Vertex.$ctor3((e.V1.X + e.V2.X) / 2, (e.V1.Y + e.V2.Y) / 2);
                        g.AddVertex(v);
                        v.Label = e.Label;

                        $t1 = Bridge.getEnumerator(clique);
                        try {
                            while ($t1.moveNext()) {
                                var other = $t1.Current;
                                g.AddEdge$1(other, v);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$dispose();
                            }
                        }
                        clique.add(v);
                    }

                    edgeToCliqueMap.set(e, clique);
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            for (var i1 = 0; i1 < this._graph.Edges.Count; i1 = (i1 + 1) | 0) {
                for (var j = (i1 + 1) | 0; j < this._graph.Edges.Count; j = (j + 1) | 0) {
                    if (this._graph.Edges.getItem(i1).Meets(this._graph.Edges.getItem(j))) {
                        $t2 = Bridge.getEnumerator(edgeToCliqueMap.get(this._graph.Edges.getItem(i1)));
                        try {
                            while ($t2.moveNext()) {
                                var v1 = $t2.Current;
                                $t3 = Bridge.getEnumerator(edgeToCliqueMap.get(this._graph.Edges.getItem(j)));
                                try {
                                    while ($t3.moveNext()) {
                                        var v2 = $t3.Current;
                                        g.AddEdge$1(v1, v2);
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$dispose();
                            }
                        }}
                }
            }

            return g;
        },
        DoContractSelectedSubgraph: function () {
            var $t, $t1;
            var selected = this._graph.SelectedVertices;
            if (selected.Count <= 0) {
                return;
            }

            var x = System.Linq.Enumerable.from(selected).average($asm.$.Graphs.GraphCanvas.f2);
            var y = System.Linq.Enumerable.from(selected).average($asm.$.Graphs.GraphCanvas.f3);

            var contractedVertex = new Graphs.Vertex.$ctor3(x, y);
            this._graph.AddVertex(contractedVertex);

            var neighbors = System.Linq.Enumerable.from(selected).selectMany(Bridge.fn.bind(this, $asm.$.Graphs.GraphCanvas.f4)).distinct();

            $t = Bridge.getEnumerator(neighbors);
            try {
                while ($t.moveNext()) {
                    var neighbor = $t.Current;
                    this._graph.AddEdge$1(contractedVertex, neighbor);
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            $t1 = Bridge.getEnumerator(selected);
            try {
                while ($t1.moveNext()) {
                    var v = $t1.Current;
                    this._graph.RemoveVertex(v);
                }
            } finally {
                if (Bridge.is($t1, System.IDisposable)) {
                    $t1.System$IDisposable$dispose();
                }
            }
            this.Invalidate();

            this.GraphChanged();
        },
        DoIndexLabeling: function () {
            var g = new Algorithms.Graph.$ctor1(this._graph.GetEdgeWeights());

            for (var i = 0; i < this._graph.Vertices.Count; i = (i + 1) | 0) {
                this._graph.Vertices.getItem(i).Label = i.toString();
            }

            this.Invalidate();
            this.GraphChanged();
        },
        DoDegreeLabeling: function () {
            var g = new Algorithms.Graph.$ctor1(this._graph.GetEdgeWeights());

            for (var i = 0; i < this._graph.Vertices.Count; i = (i + 1) | 0) {
                this._graph.Vertices.getItem(i).Label = g.Degree(i).toString();
            }

            this.Invalidate();
            this.GraphChanged();
        },
        DoInDegreeLabeling: function () {
            var g = new Algorithms.Graph.$ctor1(this._graph.GetEdgeWeights());

            for (var i = 0; i < this._graph.Vertices.Count; i = (i + 1) | 0) {
                this._graph.Vertices.getItem(i).Label = g.InDegree(i).toString();
            }

            this.Invalidate();
            this.GraphChanged();
        },
        DoOutDegreeLabeling: function () {
            var g = new Algorithms.Graph.$ctor1(this._graph.GetEdgeWeights());

            for (var i = 0; i < this._graph.Vertices.Count; i = (i + 1) | 0) {
                this._graph.Vertices.getItem(i).Label = g.OutDegree(i).toString();
            }

            this.Invalidate();
            this.GraphChanged();
        },
        DoOutDegreePlusOneLabeling: function () {
            var g = new Algorithms.Graph.$ctor1(this._graph.GetEdgeWeights());

            for (var i = 0; i < this._graph.Vertices.Count; i = (i + 1) | 0) {
                this._graph.Vertices.getItem(i).Label = (((g.OutDegree(i) + 1) | 0)).toString();
            }

            this.Invalidate();
            this.GraphChanged();
        },
        DoClearLabels: function (s, vertices) {
            var $t;
            if (s === void 0) { s = ""; }
            if (vertices === void 0) { vertices = null; }
            if (vertices == null || System.Linq.Enumerable.from(vertices).count() <= 0) {
                vertices = System.Linq.Enumerable.range(0, this._graph.Vertices.Count);
            }

            $t = Bridge.getEnumerator(vertices, System.Int32);
            try {
                while ($t.moveNext()) {
                    var v = $t.Current;
                    this._graph.Vertices.getItem(v).Label = s;
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            this.Invalidate();
            this.GraphChanged();
        },
        DoSnapToGrid: function () {
            var $t;
            if (this.GridStep <= 0) {
                return;
            }

            $t = Bridge.getEnumerator(this._graph.Vertices);
            try {
                while ($t.moveNext()) {
                    var v = $t.Current;
                    v.X = Graphs.GraphCanvas._gridStep * Bridge.Math.round(v.X / Graphs.GraphCanvas._gridStep, 0, 6);
                    v.Y = Graphs.GraphCanvas._gridStep * Bridge.Math.round(v.Y / Graphs.GraphCanvas._gridStep, 0, 6);
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }},
        PaintGrid: function (g) {
            if (!this.DrawGrid || this.GridStep <= 0) {
                return;
            }

            var x = 0.0;
            while (x <= this.Width) {
                g.GraphicsLayer$IGraphics$DrawLine$1(Graphs.GraphCanvas.GridPenColor, x, 0, x, this.Height, 1.0);
                x += this.GridStep * this._viewScale;
            }

            var y = 0.0;
            while (y <= this.Height) {
                g.GraphicsLayer$IGraphics$DrawLine$1(Graphs.GraphCanvas.GridPenColor, 0, y, this.Width, y, 1.0);
                y += this.GridStep * this._viewScale;
            }
        },
        GetHit: function (x, y) {
            return this._graph.HitTest(x, y);
        },
        Paint: function (g, width, height) {
            var $t;
            if (width === 0 || height === 0) {
                return;
            }

            try {
                this.Width = width;
                this.Height = height;

                if (this.SnapToGrid) {
                    this.DoSnapToGrid();
                }

                g.GraphicsLayer$IGraphics$Clear(Graphs.GraphCanvas.BackgroundColor);
                this.PaintGrid(g);

                this._graph.Paint(g, this._viewScale, this._viewScale);

                switch (this._state) {
                    case Graphs.GraphCanvas.States.Idle: 
                        break;
                    case Graphs.GraphCanvas.States.DraggingVertex: 
                        break;
                    case Graphs.GraphCanvas.States.DraggingSelectionRegion: 
                        {
                            var selectionPoints;
                            this._SelectionPointsToken;
                            {
                                selectionPoints = new (System.Collections.Generic.List$1(GraphicsLayer.Box))(this._selectionPoints.Count);
                                $t = Bridge.getEnumerator(this._selectionPoints);
                                try {
                                    while ($t.moveNext()) {
                                        var p = $t.Current;
                                        selectionPoints.add(new GraphicsLayer.Box.ctor(p.X * this._viewScale, p.Y * this._viewScale));
                                    }
                                } finally {
                                    if (Bridge.is($t, System.IDisposable)) {
                                        $t.System$IDisposable$dispose();
                                    }
                                }}

                            if (selectionPoints.Count > 1) {
                                g.GraphicsLayer$IGraphics$DrawLines(Graphs.GraphCanvas.SelectionPenColor, selectionPoints, 1.0);
                            }

                            break;
                        }
                }
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }

            this.HasPainted = true;

            if (this._zoomFitNextPaint) {
                this._zoomFitNextPaint = false;
                this.DoZoomFit();
                this.DoZoom(4, new GraphicsLayer.Box.ctor(0.5, 0.5));
            }
        },
        OnMouseMove: function (X, Y) {
            var $t;
            var x = X / this._viewScale;
            var y = Y / this._viewScale;

            switch (this._state) {
                case Graphs.GraphCanvas.States.Idle: 
                    break;
                case Graphs.GraphCanvas.States.DraggingVertex: 
                    {
                        this._DraggedVertex.X = this._DraggedVertex.DragOffset.X + x;
                        this._DraggedVertex.Y = this._DraggedVertex.DragOffset.Y + y;

                        this.Invalidate();
                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingSelectionRegion: 
                    {
                        this._SelectionPointsToken;
                        {
                            this._selectionPoints.add(new GraphicsLayer.Box.ctor(x, y));

                            this.Invalidate();
                        }
                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingSelectedVertices: 
                    {
                        $t = Bridge.getEnumerator(this._graph.SelectedVertices);
                        try {
                            while ($t.moveNext()) {
                                var v = $t.Current;
                                v.X = v.DragOffset.X + x;
                                v.Y = v.DragOffset.Y + y;
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }
                        this.Invalidate();
                        break;
                    }
            }
        },
        ToggleEdgeIndices: function () {
            this._graph.ToggleEdgeIndices();

            this.Invalidate();
        },
        RotateVertexIndices: function () {
            var $t;
            var x = this._graph.SelectedVertices;
            if (x.Count <= 0) {
                x = this._graph.Vertices;
            }

            $t = Bridge.getEnumerator(x);
            try {
                while ($t.moveNext()) {
                    var a = $t.Current;
                    a.RotateIndex();
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            this.Invalidate();
        },
        RotateEdgeIndices: function () {
            var $t;
            var x = this._graph.SelectedEdges;
            if (x.Count <= 0) {
                x = this._graph.Edges;
            }

            $t = Bridge.getEnumerator(x);
            try {
                while ($t.moveNext()) {
                    var a = $t.Current;
                    a.RotateIndex();
                }
            } finally {
                if (Bridge.is($t, System.IDisposable)) {
                    $t.System$IDisposable$dispose();
                }
            }
            this.Invalidate();
        },
        SetIndex: function (n) {
            var x = this._graph.SelectedVertices;
            if (x.Count === 1) {
                var v = x.getItem(0);
                var i = this._graph.Vertices.indexOf(v);
                if (i !== n) {
                    this._graph.Vertices.remove(v);
                    if (n >= this._graph.Vertices.Count) {
                        this._graph.Vertices.add(v);
                    } else if (n < i) {
                        this._graph.Vertices.insert(n, v);
                    } else {
                        this._graph.Vertices.insert(n, v);
                    }
                }
            } else {
                var y = this._graph.SelectedEdges;
                if (y.Count === 1) {
                    var v1 = y.getItem(0);
                    var i1 = this._graph.Edges.indexOf(v1);
                    if (i1 !== n) {
                        this._graph.Edges.remove(v1);
                        if (n >= this._graph.Edges.Count) {
                            this._graph.Edges.add(v1);
                        } else if (n < i1) {
                            this._graph.Edges.insert(n, v1);
                        } else {
                            this._graph.Edges.insert(n, v1);
                        }
                    }
                }
            }

            this.Invalidate();
        },
        ToggleVertexIndices: function () {
            this._graph.ToggleVertexIndices();

            this.Invalidate();
        },
        OnMouseDown: function (X, Y, button) {
            var $t;
            this._controlWasDown = this.Canvas.GraphicsLayer$ICanvas$IsControlKeyDown;

            var x = X / this._viewScale;
            var y = Y / this._viewScale;

            var o = this.GetHit(x, y);

            switch (this._state) {
                case Graphs.GraphCanvas.States.Idle: 
                    {
                        if (button === GraphicsLayer.MouseButton.Left) {
                            if (o == null) {
                                this._selectionPoints.clear();
                                this._selectionPoints.add(new GraphicsLayer.Box.ctor(x, y));
                                this._state = Graphs.GraphCanvas.States.DraggingSelectionRegion;
                            } else if (Bridge.is(o, Graphs.Vertex)) {
                                if (Bridge.cast(o, Graphs.Vertex).IsSelected) {
                                    $t = Bridge.getEnumerator(this._graph.SelectedVertices);
                                    try {
                                        while ($t.moveNext()) {
                                            var v = $t.Current;
                                            v.DragOffset = new GraphicsLayer.Box.ctor(v.X - x, v.Y - y);
                                        }
                                    } finally {
                                        if (Bridge.is($t, System.IDisposable)) {
                                            $t.System$IDisposable$dispose();
                                        }
                                    }
                                    this._state = Graphs.GraphCanvas.States.DraggingSelectedVertices;
                                } else {
                                    this._DraggedVertex = Bridge.cast(o, Graphs.Vertex);
                                    this._DraggedVertex.DragOffset = new GraphicsLayer.Box.ctor(this._DraggedVertex.X - x, this._DraggedVertex.Y - y);
                                    this._state = Graphs.GraphCanvas.States.DraggingVertex;
                                }
                            } else if (Bridge.is(o, Graphs.Edge)) {
                            }
                        } else if (button === GraphicsLayer.MouseButton.Right) {
                            if (o == null) {
                            } else if (Bridge.is(o, Graphs.Vertex)) {
                            } else if (Bridge.is(o, Graphs.Edge)) {
                            }
                        }

                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingVertex: 
                    break;
                case Graphs.GraphCanvas.States.DraggingSelectionRegion: 
                    break;
            }
        },
        OnMouseUp: function (X, Y, button) {
            var x = X / this._viewScale;
            var y = Y / this._viewScale;

            var o = this.GetHit(x, y);

            switch (this._state) {
                case Graphs.GraphCanvas.States.Idle: 
                    {
                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingVertex: 
                    {
                        if (button === GraphicsLayer.MouseButton.Left) {
                            this._state = Graphs.GraphCanvas.States.Idle;

                            if (this.SnapToGrid) {
                                this.DoSnapToGrid();
                            }

                            this.GraphChanged();
                        }
                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingSelectionRegion: 
                    {
                        if (button === GraphicsLayer.MouseButton.Left) {
                            this._state = Graphs.GraphCanvas.States.Idle;

                            var selectionPoints;
                            this._SelectionPointsToken;
                            {
                                selectionPoints = new (System.Collections.Generic.List$1(GraphicsLayer.Box))(this._selectionPoints);

                                if (selectionPoints.Count > 2) {
                                    this._graph.SelectObjects(selectionPoints, this._controlWasDown);
                                }

                                this.Canvas.GraphicsLayer$ICanvas$SelectedObjects = System.Linq.Enumerable.from(this._graph.SelectedItems).select(function(x) { return Bridge.cast(x, System.Object); });
                                this.Invalidate();
                            }
                        }

                        break;
                    }
                case Graphs.GraphCanvas.States.DraggingSelectedVertices: 
                    {
                        if (button === GraphicsLayer.MouseButton.Left) {
                            this._state = Graphs.GraphCanvas.States.Idle;
                            this.GraphChanged();
                        }
                        break;
                    }
            }

            this.Invalidate();
        },
        OnMouseDoubleClick: function (X, Y, button) {
            var $t;
            var x = X / this._viewScale;
            var y = Y / this._viewScale;

            var o = this.GetHit(x, y);

            var graphChanged = false;
            if (this._state === Graphs.GraphCanvas.States.Idle && !this.Canvas.GraphicsLayer$ICanvas$IsControlKeyDown) {
                if (button === GraphicsLayer.MouseButton.Left) {
                    if (o == null) {
                        var v = new Graphs.Vertex.$ctor3(x, y);
                        if (this._graph.AddVertex(v)) {
                            graphChanged = true;
                        }
                    } else if (Bridge.is(o, Graphs.Vertex)) {
                        var endVertex = Bridge.cast(o, Graphs.Vertex);
                        $t = Bridge.getEnumerator(this._graph.SelectedVertices);
                        try {
                            while ($t.moveNext()) {
                                var v1 = $t.Current;
                                if (this._graph.AddEdge$1(v1, endVertex)) {
                                    graphChanged = true;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}
                } else if (button === GraphicsLayer.MouseButton.Right) {
                    if (Bridge.is(o, Graphs.Vertex)) {
                        if (this._graph.RemoveVertex(Bridge.cast(o, Graphs.Vertex))) {
                            graphChanged = true;
                        }
                    }
                }
            }

            this.Invalidate();

            if (graphChanged) {
                this.GraphChanged();
            }
        },
        ZoomFitNextPaint: function () {
            this._zoomFitNextPaint = true;
            this.Invalidate();
        }
    }
    });

    Bridge.ns("Graphs.GraphCanvas", $asm.$);

    Bridge.apply($asm.$.Graphs.GraphCanvas, {
        f1: function (x) {
            var d = { };
            return System.String.startsWith(x, "[") || System.Int32.tryParse(x, d);
        },
        f2: function (z) {
            return z.X;
        },
        f3: function (z) {
            return z.Y;
        },
        f4: function (v) {
            return this._graph.FindNeighbors(v);
        }
    });

    Bridge.define("Graphs.Vertex", {
        inherits: [GraphicsLayer.IPaintable,Graphs.IHittable],
        statics: {
            fields: {
                LabelFont: null,
                IndexFont: null,
                LabelBrushColor: null,
                IndexBrushColor: null,
                BoundaryPenColor: null,
                BoundarySelectedPenColor: null,
                BoundarySelectedPenWidth: 0,
                DefaultFillBrushColor: null,
                UniversalVertexFillBrushColor: null,
                SelectedFillBrushColor: null
            },
            ctors: {
                init: function () {
                    this.LabelFont = new GraphicsLayer.Font("Times New Roman", 12);
                    this.IndexFont = new GraphicsLayer.Font("System", 8);
                    this.LabelBrushColor = new GraphicsLayer.ARGB.ctor(0, 0, 0);
                    this.IndexBrushColor = new GraphicsLayer.ARGB.$ctor1(200, 200, 0, 0);
                    this.BoundaryPenColor = new GraphicsLayer.ARGB.ctor(0, 0, 0);
                    this.BoundarySelectedPenColor = new GraphicsLayer.ARGB.$ctor1(255, 0, 255, 0);
                    this.BoundarySelectedPenWidth = 2;
                    this.DefaultFillBrushColor = new GraphicsLayer.ARGB.$ctor1(120, 0, 0, 0);
                    this.UniversalVertexFillBrushColor = new GraphicsLayer.ARGB.$ctor1(120, 0, 0, 255);
                    this.SelectedFillBrushColor = new GraphicsLayer.ARGB.$ctor1(255, 0, 255, 127);
                }
            }
        },
        fields: {
            _Location: null,
            _DragOffset: null,
            _label: null,
            _Style: null,
            _IsSelected: false,
            _padding: 0,
            _LocalBounds: null,
            _showIndex: false
        },
        props: {
            ParentIndex: 0,
            IndexAngle: 0,
            Color: null,
            Modifier: 0,
            X: {
                get: function () {
                    return this._Location.X;
                },
                set: function (value) {
                    this._Location.X = value;
                }
            },
            Y: {
                get: function () {
                    return this._Location.Y;
                },
                set: function (value) {
                    this._Location.Y = value;
                }
            },
            Location: {
                get: function () {
                    return this._Location;
                },
                set: function (value) {
                    this._Location = value;
                }
            },
            Label: {
                get: function () {
                    return this._label;
                },
                set: function (value) {
                    if (Bridge.referenceEquals(value, this._label)) {
                        return;
                    }

                    this._label = value;
                }
            },
            Padding: {
                get: function () {
                    return this._padding;
                },
                set: function (value) {
                    if (value === this._padding) {
                        return;
                    }

                    this._padding = value;
                }
            },
            LocalBounds: {
                get: function () {
                    return this._LocalBounds;
                }
            },
            IsSelected: {
                get: function () {
                    return this._IsSelected;
                },
                set: function (value) {
                    if (value === this._IsSelected) {
                        return;
                    }

                    this._IsSelected = value;
                }
            },
            DragOffset: {
                get: function () {
                    return this._DragOffset;
                },
                set: function (value) {
                    this._DragOffset = value;
                }
            },
            Style: {
                get: function () {
                    return this._Style;
                },
                set: function (value) {
                    if (System.String.startsWith(value, "+") && !System.String.isNullOrEmpty(this._Style)) {
                        this._Style = System.String.concat(this._Style, (System.String.concat(", ", System.String.trimStart(value, [43]))));
                    } else {
                        this._Style = System.String.trimStart(value, [43]);
                    }
                }
            },
            IsUniversal: false
        },
        alias: [
            "Paint", "GraphicsLayer$IPaintable$Paint",
            "Hit", "Graphs$IHittable$Hit"
        ],
        ctors: {
            init: function () {
                this._DragOffset = GraphicsLayer.Box.Empty;
                this._padding = 0.02;
                this._LocalBounds = GraphicsLayer.Box.Empty;
                this._showIndex = false;
            },
            $ctor3: function (x, y) {
                Graphs.Vertex.$ctor4.call(this, x, y, "");
            },
            $ctor1: function (v) {
                Graphs.Vertex.$ctor2.call(this, v, "");
            },
            $ctor2: function (v, label) {
                Graphs.Vertex.$ctor4.call(this, v.X, v.Y, label);
            },
            $ctor4: function (x, y, label) {
                this.$initialize();
                this._Location = new Graphs.Vector(x, y);
                this._label = label;
            },
            ctor: function (v) {
                this.$initialize();
                this.Location = new Graphs.Vector(v.Location.X, v.Location.Y);
                this.Label = v.Label;
                this.Padding = v.Padding;
                this.Style = v.Style;
            }
        },
        methods: {
            Paint: function (g, width, height) {
                var bounds = this.ComputeBounds(g, width, height);

                if (!System.String.isNullOrEmpty(this._label)) {
                    if (Bridge.equals(this.Color, null)) {
                        if (this.IsUniversal) {
                            g.GraphicsLayer$IGraphics$FillEllipse(Graphs.Vertex.UniversalVertexFillBrushColor, bounds);
                        }
                    } else {
                        g.GraphicsLayer$IGraphics$FillEllipse(this.Color, bounds);
                    }

                    g.GraphicsLayer$IGraphics$DrawEllipse(this._IsSelected ? Graphs.Vertex.BoundarySelectedPenColor : Graphs.Vertex.BoundaryPenColor, bounds, this._IsSelected ? Graphs.Vertex.BoundarySelectedPenWidth : 1);
                    g.GraphicsLayer$IGraphics$DrawString(this._label, Graphs.Vertex.LabelFont, Graphs.Vertex.LabelBrushColor, bounds);
                } else {
                    if (Bridge.equals(this.Color, null)) {
                        g.GraphicsLayer$IGraphics$FillEllipse(this.IsUniversal ? Graphs.Vertex.UniversalVertexFillBrushColor : Graphs.Vertex.DefaultFillBrushColor, bounds);
                    } else {
                        g.GraphicsLayer$IGraphics$FillEllipse(this.Color, bounds);
                    }


                    g.GraphicsLayer$IGraphics$DrawEllipse(this._IsSelected ? Graphs.Vertex.BoundarySelectedPenColor : Graphs.Vertex.BoundaryPenColor, bounds, this._IsSelected ? Graphs.Vertex.BoundarySelectedPenWidth : 1);
                }

                if (this._showIndex) {
                    var cx = (bounds.Left + bounds.Right) / 2;
                    var cy = (bounds.Bottom + bounds.Top) / 2;
                    var r = Math.max(bounds.Width, bounds.Height) / 2 + 5;
                    var bb = new GraphicsLayer.Box.$ctor1(cx + r * Math.cos(this.IndexAngle) - 5, cy + r * Math.sin(this.IndexAngle) - 5, 10, 10);
                    g.GraphicsLayer$IGraphics$DrawString(this.ParentIndex.toString(), Graphs.Vertex.IndexFont, Graphs.Vertex.IndexBrushColor, bb);
                }
            },
            Hit: function (x, y) {
                var hit = this._LocalBounds.Contains$1(x, y);
                return hit;
            },
            ComputeBounds: function (g, width, height) {
                var bounds;

                if (!System.String.isNullOrEmpty(this._label)) {
                    var size = g.GraphicsLayer$IGraphics$MeasureString(this._label, Graphs.Vertex.LabelFont);

                    bounds = new GraphicsLayer.Box.$ctor1(this.X * width - size.Width / 2, this.Y * height - size.Height / 2, size.Width, size.Height);
                } else {
                    bounds = new GraphicsLayer.Box.$ctor1(this.X * width, this.Y * height, 0, 0);
                }

                bounds.Inflate(this._padding * width, this._padding * height);

                this._LocalBounds = new GraphicsLayer.Box.$ctor1(bounds.X / width, bounds.Y / height, bounds.Width / width, bounds.Height / height);

                return bounds;
            },
            RotateIndex: function () {
                this.IndexAngle += 0.19634954084936207;
                if (this.IndexAngle >= 6.2831853071795862) {
                    this.IndexAngle = 0;
                }
            },
            ToggleIndex: function () {
                this._showIndex = !this._showIndex;
            }
        }
    });

    Bridge.define("Test.Graphics", {
        inherits: [GraphicsLayer.IGraphics],
        fields: {
            _canvas: null,
            _context: null
        },
        alias: [
            "Clear", "GraphicsLayer$IGraphics$Clear",
            "DrawLine", "GraphicsLayer$IGraphics$DrawLine",
            "DrawLine$1", "GraphicsLayer$IGraphics$DrawLine$1",
            "DrawLines", "GraphicsLayer$IGraphics$DrawLines",
            "FillPolygon", "GraphicsLayer$IGraphics$FillPolygon",
            "DrawEllipse", "GraphicsLayer$IGraphics$DrawEllipse",
            "FillEllipse", "GraphicsLayer$IGraphics$FillEllipse",
            "DrawString", "GraphicsLayer$IGraphics$DrawString",
            "MeasureString", "GraphicsLayer$IGraphics$MeasureString"
        ],
        ctors: {
            ctor: function (canvas) {
                this.$initialize();
                this._canvas = canvas;
                this._context = canvas.getContext("2d");
            }
        },
        methods: {
            Clear: function (argb) {
                this._context.fillStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
                this._context.fillRect(0, 0, this._canvas.width, this._canvas.height);
            },
            DrawLine: function (argb, p1, p2, width) {
                if (width === void 0) { width = 1.0; }
                this._context.strokeStyle = Test.HelperExtensions.ToColor(argb);
                this._context.lineWidth = width;
                this._context.globalAlpha = Math.min(1.0, Math.max(0.0, argb.A / 255.0));
                this._context.beginPath();
                this._context.moveTo(p1.X, p1.Y);
                this._context.lineTo(p2.X, p2.Y);
                this._context.stroke();
            },
            DrawLine$1: function (argb, x1, y1, x2, y2, width) {
                if (width === void 0) { width = 1.0; }
                this.DrawLine(argb, new GraphicsLayer.Box.ctor(x1, y1), new GraphicsLayer.Box.ctor(x2, y2), width);
            },
            DrawLines: function (argb, points, width) {
                var $t;
                if (width === void 0) { width = 1.0; }
                this._context.strokeStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.lineWidth = width;
                this._context.beginPath();
                var first = true;
                $t = Bridge.getEnumerator(points, GraphicsLayer.Box);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        if (first) {
                            this._context.moveTo(b.X, b.Y);
                            first = false;
                        } else {
                            this._context.lineTo(b.X, b.Y);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }this._context.stroke();
            },
            FillPolygon: function (argb, points) {
                var $t;
                this._context.fillStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.beginPath();
                var first = true;
                $t = Bridge.getEnumerator(points, GraphicsLayer.Box);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        if (first) {
                            this._context.moveTo(b.X, b.Y);
                            first = false;
                        } else {
                            this._context.lineTo(b.X, b.Y);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }this._context.fill();
            },
            DrawEllipse: function (argb, bounds, width) {
                if (width === void 0) { width = 1.0; }
                this._context.strokeStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.beginPath();
                this._context.arc(bounds.Left + bounds.Width / 2, bounds.Top + bounds.Height / 2, bounds.Width / 2, 0, 6.2831853071795862);
                this._context.stroke();
            },
            FillEllipse: function (argb, bounds) {
                this._context.beginPath();
                this._context.fillStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.arc(bounds.Left + bounds.Width / 2, bounds.Top + bounds.Height / 2, bounds.Width / 2, 0, 6.2831853071795862);
                this._context.fill();
            },
            DrawString: function (s, font, argb, bounds) {
                this._context.font = System.String.concat(font.Name, " ", font.Size, "px");
                this._context.strokeStyle = Test.HelperExtensions.ToColor(argb);
                this._context.globalAlpha = argb.A / 255.0;
                this._context.strokeText(s, bounds.X, bounds.Y);
            },
            MeasureString: function (s, font) {
                this._context.font = System.String.concat(font.Name, " ", font.Size, "px");
                var metrics = this._context.measureText(s);

                return new GraphicsLayer.Box.$ctor1(0, 0, metrics.width, metrics.emHeightAscent + metrics.emHeightDescent);
            }
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.SwapAnalyzer],
        props: {
            ChildReason: {
                get: function () {
                    return "goodness increased";
                }
            }
        },
        ctors: {
            ctor: function (findCleanestWin) {
                if (findCleanestWin === void 0) { findCleanestWin = true; }

                this.$initialize();
                Algorithms.FixerBreaker.KnowledgeEngine.SwapAnalyzer.ctor.call(this, findCleanestWin);
            }
        },
        methods: {
            IsChildBoardBetter: function (knowledge, board, childBoard) {
                var x = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(childBoard.Stacks, childBoard.Pot)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer.f1).toList(System.Int32);
                var y = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(board.Stacks, board.Pot)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer.f1).toList(System.Int32);

                return this.StandardDeviation(x) < this.StandardDeviation(y);
            },
            Mean: function (x) {
                return ((Bridge.Int.div(System.Linq.Enumerable.from(x).sum(), x.Count)) | 0);
            },
            Median: function (x) {
                return System.Linq.Enumerable.from(x).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer.f2).elementAt(((Bridge.Int.div(x.Count, 2)) | 0));
            },
            StandardDeviation: function (x) {
                var mu = this.Mean(x);

                return Math.sqrt(System.Linq.Enumerable.from(x).sum(function (a) {
                        return (a - mu) * (a - mu);
                    }) / x.Count);
            },
            AbsoluteDeviation: function (x) {
                var mu = this.Median(x);

                return System.Linq.Enumerable.from(x).sum(function (a) {
                        return Math.abs(mu - a);
                    });
            },
            PushLeftOrdering: function (knowledge, board, childBoard) {
                var x = this.GetVectors(childBoard);
                var y = this.GetVectors(board);

                for (var i = 0; i < Math.min(x.Count, y.Count); i = (i + 1) | 0) {
                    var c = this.CompareVectors(x.getItem(i), y.getItem(i));

                    if (c > 0) {
                        return true;
                    }
                    if (c < 0) {
                        return false;
                    }
                }

                return x.Count < y.Count;
            },
            GetVectors: function (b) {
                return System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.MetaKnowledge.GetColorGraphs(b.Stacks, b.Pot)).orderByDescending($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer.f1).toList(System.Collections.Generic.List$1(System.Int32));
            },
            CompareVectors: function (x, y) {
                if (x.Count > y.Count) {
                    return -1;
                }
                if (x.Count < y.Count) {
                    return 1;
                }

                for (var i = 0; i < x.Count; i = (i + 1) | 0) {
                    if (x.getItem(i) < y.getItem(i)) {
                        return 1;
                    }
                    if (x.getItem(i) > y.getItem(i)) {
                        return -1;
                    }
                }

                return 0;
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.GoodnessAnalyzer, {
        f1: function (c) {
            return c.Count;
        },
        f2: function (a) {
            return a;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder],
        statics: {
            methods: {
                BeginProof: function (sb) {
                    sb.appendLine("\\begin{proof}");
                },
                EndProof: function (sb) {
                    sb.appendLine("\\end{proof}");
                }
            }
        },
        fields: {
            _figureTikz: null,
            _maxPot: 0,
            _activeIndices: null,
            _activeListSizes: null,
            _possibleListIndices: null,
            _possibleLists: null,
            _allBoards: null,
            _sequenceComparer: null,
            _sequenceGeneralizer: null,
            _orderFilter: null,
            _isWin: false
        },
        props: {
            UseWildCards: false
        },
        ctors: {
            init: function () {
                this._orderFilter = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            ctor: function (mind, figureTikz, usePermutations) {
                if (figureTikz === void 0) { figureTikz = ""; }
                if (usePermutations === void 0) { usePermutations = false; }

                this.$initialize();
                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder.ctor.call(this, mind, usePermutations);
                this._figureTikz = figureTikz;
                this._maxPot = mind.MaxPot;
                this.UseWildCards = true;
            }
        },
        methods: {
            WriteProof: function () {
                var $t, $t1, $t2, $t3;
                var sb = new System.Text.StringBuilder();

                this._isWin = System.Linq.Enumerable.from(this.Cases).all($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f1);

                this.AddFigure(sb);
                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.BeginProof(sb);
                this.GeneratePossibleLists();
                this.GeneralizeAllBoards(sb);

                var wonBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                for (var caseNumber = 1; caseNumber <= this.Cases.Count; caseNumber = (caseNumber + 1) | 0) {
                    var c = this.Cases.getItem(((caseNumber - 1) | 0));
                    var boards = System.Linq.Enumerable.from(c.Boards).orderBy(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f2)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);

                    var thisClaimBoards;
                    if (caseNumber > 1 && !c.BreakerWin) {
                        thisClaimBoards = System.Linq.Enumerable.from(boards).selectMany(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f4)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                    } else {
                        thisClaimBoards = boards;
                    }

                    if (!c.BreakerWin) {
                        wonBoards.addRange(thisClaimBoards);
                    }

                    var thisClaimBoardsTex = this.GeneralizeBoards(thisClaimBoards);

                    sb.appendLine();
                    sb.appendLine("\\bigskip");
                    sb.appendLine(System.String.format(System.String.concat("\\case{{{0}}}{{$B$ is one of the {1} following boards:\n ", thisClaimBoardsTex, ".}}"), Bridge.box(caseNumber, System.Int32), Bridge.box(thisClaimBoards.Count, System.Int32)));
                    sb.appendLine();
                    sb.appendLine("\\bigskip");

                    if (c.BreakerWin) {
                        sb.appendLine();

                        if (c.Superabundant) {
                            sb.appendLine("No single Kempe exchange gets from these boards to a previous case.");
                        } else {
                            sb.appendLine("These boards are not superabundant.");
                        }
                    } else if (caseNumber === 1) {
                        sb.appendLine();
                        sb.appendLine("In all these cases, $H$ is immediately colorable from the lists.");
                    } else {
                        sb.appendLine();

                        var swapCountGroups = System.Linq.Enumerable.from(boards).groupBy(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f6)).toList(System.Linq.Grouping$2);
                        $t = Bridge.getEnumerator(swapCountGroups);
                        try {
                            while ($t.moveNext()) {
                                var swapCountGroup = $t.Current;
                                if (swapCountGroup.key() === 1) {
                                    sb.appendLine("Each of the following boards can be handled by a single Kempe change that has an endpoint at infinity.");

                                    $t1 = Bridge.getEnumerator(swapCountGroup);
                                    try {
                                        while ($t1.moveNext()) {
                                            var b = $t1.Current;
                                            var pp = { };
                                            var listString = b.ToListStringInLexOrder(pp);

                                            var treeInfo = this.Mind.GetWinTreeInfo(b);
                                            var alpha = Math.min(pp.v.getItem(System.Linq.Enumerable.from(treeInfo).first().Alpha), pp.v.getItem(System.Linq.Enumerable.from(treeInfo).first().Beta));
                                            var beta = Math.max(pp.v.getItem(System.Linq.Enumerable.from(treeInfo).first().Alpha), pp.v.getItem(System.Linq.Enumerable.from(treeInfo).first().Beta));
                                            var groups = System.Linq.Enumerable.from(treeInfo).groupBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f7);

                                            if (!this.CheckPermutationGoodNess(alpha, beta, listString, System.Linq.Enumerable.from(treeInfo).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f7).distinct().toList(System.Int32))) {
                                                sb.appendLine();
                                                sb.appendLine("there is badness here");
                                                sb.appendLine();
                                            }

                                            sb.append(System.String.concat("$\\K_{" + alpha + "" + beta + ",\\infty}(", listString, ",", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, groups.orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f8).select(Bridge.fn.bind(this, function (gg) {
                                                return ((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree.Extensions.GetActiveListIndex(gg.key(), b, this._maxPot) + 1) | 0);
                                            })), null), ")"));
                                            sb.appendLine(System.String.concat("\\Rightarrow $ ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, groups.orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f8).select(Bridge.fn.bind(this, function (gg) {
                                                return System.String.concat("$", this.GetChildBoardName(b, gg.first()), "$ (Case ", this.GetHandledCaseNumber(b, gg.first()), ")");
                                            })), null), "."));
                                            sb.appendLine();

                                            if (this._permutationLinked.get(b).Count > 0) {
                                                sb.appendLine();
                                                sb.appendLine();
                                                sb.appendLine(System.String.concat("Free by vertex permutation: ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(this._permutationLinked.get(b)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f9)))));
                                                sb.appendLine();
                                                sb.appendLine();
                                            }

                                            sb.appendLine("\\bigskip");
                                            sb.appendLine();
                                        }
                                    } finally {
                                        if (Bridge.is($t1, System.IDisposable)) {
                                            $t1.System$IDisposable$dispose();
                                        }
                                    }} else if (swapCountGroup.key() === 2) {
                                    sb.appendLine("\\bigskip");
                                    sb.appendLine();
                                    sb.appendLine("Each of the following boards can be handled by a single Kempe change.");
                                    $t2 = Bridge.getEnumerator(swapCountGroup);
                                    try {
                                        while ($t2.moveNext()) {
                                            var b1 = $t2.Current;
                                            var pp1 = { };
                                            var listString1 = b1.ToListStringInLexOrder(pp1);

                                            var treeInfo1 = this.Mind.GetWinTreeInfo(b1);
                                            var alpha1 = Math.min(pp1.v.getItem(System.Linq.Enumerable.from(treeInfo1).first().Alpha), pp1.v.getItem(System.Linq.Enumerable.from(treeInfo1).first().Beta));
                                            var beta1 = Math.max(pp1.v.getItem(System.Linq.Enumerable.from(treeInfo1).first().Alpha), pp1.v.getItem(System.Linq.Enumerable.from(treeInfo1).first().Beta));
                                            var leftover = { v : System.Linq.Enumerable.from(treeInfo1).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo) };

                                            if (!this.CheckPermutationGoodNess(alpha1, beta1, listString1, System.Linq.Enumerable.from(treeInfo1).selectMany($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f10).distinct().toList(System.Int32))) {
                                                sb.appendLine();
                                                sb.appendLine("there is badness here");
                                                sb.appendLine();
                                            }

                                            while (leftover.v.Count > 0) {
                                                var commonestSwapper = { v : Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.MaxIndex(System.Int32, System.Linq.Enumerable.range(0, b1._stackCount), (function ($me, leftover) {
                                                    return function (v) {
                                                        return System.Linq.Enumerable.from(leftover.v).count(function (bc) {
                                                                return bc.SwapVertices.contains(v);
                                                            });
                                                    };
                                                })(this, leftover)) };
                                                var handledAll = System.Linq.Enumerable.from(leftover.v).where((function ($me, commonestSwapper) {
                                                        return function (bc) {
                                                            return bc.SwapVertices.contains(commonestSwapper.v);
                                                        };
                                                    })(this, commonestSwapper)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo);
                                                var handled = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Distinct(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo, System.Int32, handledAll, (function ($me, commonestSwapper) {
                                                        return function (bc) {
                                                            return bc.SwapVertices.Count === 1 ? -1 : System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                        };
                                                    })(this, commonestSwapper))).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo);

                                                sb.append(System.String.concat("$\\K_{" + alpha1 + "" + beta1 + "," + (((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree.Extensions.GetActiveListIndex(commonestSwapper.v, b1, this._maxPot) + 1) | 0)) + "}(", listString1));

                                                var single = System.Linq.Enumerable.from(handled).firstOrDefault($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f11, null);
                                                if (single != null) {
                                                    sb.append(",\\infty");
                                                }

                                                if (System.Linq.Enumerable.from(handled).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f12).count() > 0) {
                                                    sb.append(System.String.concat(",", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, System.Linq.Enumerable.from(handled).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f12).orderBy((function ($me, commonestSwapper) {
                                                        return function (bc) {
                                                            return System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                        };
                                                    })(this, commonestSwapper)).select((function ($me, commonestSwapper) {
                                                        return Bridge.fn.bind($me, function (bc) {
                                                            return ((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree.Extensions.GetActiveListIndex(System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first(), b1, this._maxPot) + 1) | 0);
                                                        });
                                                    })(this, commonestSwapper)), null)));
                                                }
                                                sb.append(")");

                                                sb.appendLine(System.String.concat("\\Rightarrow $ ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(handled).orderBy((function ($me, commonestSwapper) {
                                                        return function (bc) {
                                                            return bc.SwapVertices.Count === 1 ? -1 : System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                        };
                                                    })(this, commonestSwapper)).select(Bridge.fn.bind(this, function (bc) {
                                                    return System.String.concat("$", this.GetChildBoardName(b1, bc), "$ (Case ", this.GetHandledCaseNumber(b1, bc), ")");
                                                })), null), "."));
                                                sb.appendLine();

                                                $t3 = Bridge.getEnumerator(handledAll);
                                                try {
                                                    while ($t3.moveNext()) {
                                                        var bc = $t3.Current;
                                                        leftover.v.remove(bc);
                                                    }
                                                } finally {
                                                    if (Bridge.is($t3, System.IDisposable)) {
                                                        $t3.System$IDisposable$dispose();
                                                    }
                                                }}

                                            if (this._permutationLinked.get(b1).Count > 0) {
                                                sb.appendLine();
                                                sb.appendLine();
                                                sb.appendLine(System.String.concat("Free by vertex permutation: ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(this._permutationLinked.get(b1)).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f9)))));
                                                sb.appendLine();
                                                sb.appendLine();
                                            }

                                            sb.appendLine();
                                            sb.appendLine("\\bigskip");
                                            sb.appendLine();
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$dispose();
                                        }
                                    }}
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}
                }

                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.EndProof(sb);

                return sb.toString();
            },
            CheckPermutationGoodNess: function (alpha, beta, stacksString, swapVertices) {
                var $t;
                var stacks = System.Linq.Enumerable.from(System.String.split(stacksString, [124].map(function(i) {{ return String.fromCharCode(i); }}))).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f14).toList(System.Collections.Generic.List$1(System.Int32));

                var colors = function (_o6) {
                        _o6.add(alpha);
                        _o6.add(beta);
                        return _o6;
                    }(new (System.Collections.Generic.List$1(System.Int32))());
                $t = Bridge.getEnumerator(swapVertices);
                try {
                    while ($t.moveNext()) {
                        var v = $t.Current;
                        if (Algorithms.Utility.ListUtility.IntersectionCount(System.Int32, colors, stacks.getItem(v)) !== 1) {
                            debugger;
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }
                return true;
            },
            GetChildBoardName: function (b, bc) {
                var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(b._trace, bc.Alpha, bc.Beta, bc.Response, b._stackCount);
                return childBoard.ToListStringInLexOrder$1(this._maxPot);
            },
            GeneralizeAllBoards: function (sb) {
                this._allBoards = System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.Union$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, Algorithms.Utility.ListUtility.Union$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, this.Mind.ColorableBoards, this.Mind.NonColorableBoards), this.Mind.BreakerWonBoards)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                this._sequenceComparer = new (Algorithms.Utility.SequenceGeneralizer$1.VectorComparer(System.Int32))();
                this._sequenceGeneralizer = new (Algorithms.Utility.SequenceGeneralizer$1(System.Int32))(this._activeIndices.Count, this._possibleListIndices);

                var allBoardsTex = this.GeneralizeBoards(this._allBoards);

                if (this.Mind.OnlyConsiderNearlyColorableBoards) {
                    sb.appendLine(System.String.concat("We need to handle all boards that are nearly colorable for edge $e$ up to permutation of colors, so it will suffice to handle the following " + this._allBoards.Count + " boards: ", allBoardsTex, "."));
                } else {
                    sb.appendLine(System.String.concat("We need to handle all boards up to permutation of colors, so it will suffice to handle the following " + this._allBoards.Count + " boards: ", allBoardsTex, "."));
                }

                if (this.Mind.BreakerWonBoards.Count > 0) {
                    sb.appendLine(System.String.concat("Unfortunately, the following " + this.Mind.BreakerWonBoards.Count + " boards cannot be handled: ", this.GeneralizeBoards(this.Mind.BreakerWonBoards), "."));
                }

                sb.appendLine();
            },
            GeneralizeBoards: function (boards) {
                if (this.UseWildCards) {
                    var examples = System.Linq.Enumerable.from(boards).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f15)).toList(System.Collections.Generic.List$1(System.Int32));
                    var nonExamples = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct$1(System.Int32, System.Linq.Enumerable.repeat(this._possibleListIndices, this._activeIndices.Count))).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f16).except(System.Linq.Enumerable.from(examples).distinct(this._sequenceComparer), this._sequenceComparer).toList(System.Collections.Generic.List$1(System.Int32));

                    var generalized = this._sequenceGeneralizer.Generalize(examples, nonExamples, false);
                    return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(generalized).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f18)), "and");
                }

                return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(boards).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f2)).orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f19).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f20), "and");
            },
            ToListIndices: function (b) {
                var stacks = System.Linq.Enumerable.from(b.Stacks.Value).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f21).where(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f22)).toList(System.Collections.Generic.List$1(System.Int32));
                return System.Linq.Enumerable.from(stacks).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f23)).toList(System.Int32);
            },
            GeneratePossibleLists: function () {
                var stacks = System.Linq.Enumerable.from(this.Mind.ColorableBoards.getItem(0).Stacks.Value).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f21).toList(System.Collections.Generic.List$1(System.Int32));
                this._activeIndices = System.Linq.Enumerable.from(Algorithms.GenericExtensions.IndicesWhere(System.Collections.Generic.List$1(System.Int32), stacks, Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f22))).toList(System.Int32);
                this._activeListSizes = System.Linq.Enumerable.from(stacks).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f24).where(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f25)).toList(System.Int32);

                var pot = System.Linq.Enumerable.range(0, this._maxPot).toList(System.Int32);
                this._possibleLists = System.Linq.Enumerable.from(System.Linq.Enumerable.from(this._activeListSizes).distinct().orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f26).toList(System.Int32)).selectMany(function (c) {
                        return Algorithms.Utility.ListUtility.EnumerateSublists$1(System.Int32, pot, c);
                    }).toList(System.Collections.Generic.List$1(System.Int32));
                this._possibleListIndices = System.Linq.Enumerable.range(0, this._possibleLists.Count).toList(System.Int32);
            },
            AddFigure: function (sb) {
                var figureID = System.String.concat("fig:", System.Guid.newGuid().toString());

                sb.appendLine("\\begin{figure}");
                sb.appendLine("\\centering");
                sb.appendLine(this._figureTikz);
                sb.appendLine(System.String.concat("\\caption{Vertices are ordered as labeled.}\\label{", figureID, "}"));
                sb.appendLine("\\end{figure}");

                sb.appendLine("\\begin{lem}");
                if (this._isWin) {
                    sb.appendLine(System.String.concat("The graph in Figure \\ref{", figureID, "} is reducible."));
                } else {
                    sb.appendLine(System.String.concat("The graph in Figure \\ref{", figureID, "} is not reducible."));
                }
                sb.appendLine("\\end{lem}");
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder, {
        f1: function (c) {
            return !c.BreakerWin;
        },
        f2: function (b) {
            return b.ToListStringInLexOrder$1(this._maxPot);
        },
        f3: function (tup) {
            return tup.item2;
        },
        f4: function (b) {
            return System.Linq.Enumerable.from(System.Array.init([b], Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)).union(System.Linq.Enumerable.from(this._permutationLinked.get(b)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f3));
        },
        f5: function (ti) {
            return ti.SwapVertices.Count;
        },
        f6: function (b) {
            return System.Linq.Enumerable.from(this.Mind.GetWinTreeInfo(b)).max($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f5);
        },
        f7: function (ss) {
            return ss.SwapVertices.getItem(0);
        },
        f8: function (gg) {
            return gg.key();
        },
        f9: function (ppp) {
            return System.String.concat("$", ppp.item1, "\\Rightarrow ", ppp.item2.ToListStringInLexOrder$1(this._maxPot), "$");
        },
        f10: function (ss) {
            return ss.SwapVertices;
        },
        f11: function (bc) {
            return bc.SwapVertices.Count === 1;
        },
        f12: function (bc) {
            return bc.SwapVertices.Count > 1;
        },
        f13: function (c) {
            return System.Int32.parse(String.fromCharCode(c));
        },
        f14: function (s) {
            return System.Linq.Enumerable.from(System.String.toCharArray(s, 0, s.length)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f13).toList(System.Int32);
        },
        f15: function (b) {
            return this.ToListIndices(b);
        },
        f16: function (ll) {
            return System.Linq.Enumerable.from(ll).toList(System.Int32);
        },
        f17: function (_, i) {
            return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree.Extensions.ToTex(_, this._possibleLists, this._activeListSizes.getItem(i));
        },
        f18: function (gg) {
            return System.String.concat("$", Bridge.toArray(System.Linq.Enumerable.from(gg).select(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryDegreeProofBuilder.f17))).join("|"), "$");
        },
        f19: function (x) {
            return x;
        },
        f20: function (s) {
            return System.String.concat("$", s, "$");
        },
        f21: function (l) {
            return Algorithms.Int64Usage.ToSet(l);
        },
        f22: function (s) {
            return s.Count < this._maxPot;
        },
        f23: function (s) {
            return Algorithms.GenericExtensions.FirstIndex(System.Collections.Generic.List$1(System.Int32), this._possibleLists, function (ss) {
                return System.Linq.Enumerable.from(ss).sequenceEqual(s);
            });
        },
        f24: function (s) {
            return s.Count;
        },
        f25: function (c) {
            return c < this._maxPot;
        },
        f26: function (c) {
            return c;
        }
    });

    Bridge.define("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder", {
        inherits: [Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder],
        fields: {
            _figureTikz: null
        },
        ctors: {
            ctor: function (mind, figureTikz) {
                if (figureTikz === void 0) { figureTikz = ""; }

                this.$initialize();
                Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.PermutationAwareProofBuilder.ctor.call(this, mind);
                this._figureTikz = figureTikz;
            }
        },
        methods: {
            WriteProof: function () {
                var $t, $t1, $t2, $t3, $t4;
                var length = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ(this.Mind.ColorableBoards.getItem(0)).length;
                var allBoards = System.Linq.Enumerable.from(Algorithms.Utility.ListUtility.Union$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard, this.Mind.ColorableBoards, this.Mind.NonColorableBoards)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);

                var comparer = new (Algorithms.Utility.SequenceGeneralizer$1.VectorComparer(System.Int32))();
                var sg = new (Algorithms.Utility.SequenceGeneralizer$1(System.Int32))(length, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f1(new (System.Collections.Generic.List$1(System.Int32))()));

                var zot2 = System.Linq.Enumerable.from(allBoards).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f2).toList(System.Collections.Generic.List$1(System.Int32));
                var examples2 = System.Linq.Enumerable.from(allBoards).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f2).toList(System.Collections.Generic.List$1(System.Int32));

                var nonExamples2 = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Int32, System.Linq.Enumerable.repeat(System.Linq.Enumerable.range(0, 3), length))).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f3).except(System.Linq.Enumerable.from(zot2).distinct(comparer), comparer).toList(System.Collections.Generic.List$1(System.Int32));

                var generalized2 = sg.Generalize(examples2, nonExamples2, false);
                var allBoardsXYZ = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(generalized2).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f5), "or");

                var sb = new System.Text.StringBuilder();
                var figureID = System.String.concat("fig:", System.Guid.newGuid().toString());

                sb.appendLine("\\begin{figure}");
                sb.appendLine("\\centering");
                sb.appendLine(this._figureTikz);
                sb.appendLine(System.String.concat("\\caption{Solid vertices have lists of size 3 and the labeled vertices have lists of size 2.}\\label{", figureID, "}"));
                sb.appendLine("\\end{figure}");

                sb.appendLine("\\begin{lem}");
                sb.appendLine(System.String.concat("The graph in Figure \\ref{", figureID, "} is reducible."));
                sb.appendLine("\\end{lem}");

                var letters = $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f6(new (System.Collections.Generic.List$1(System.String))());
                var stringLength = System.Linq.Enumerable.from(this.Mind.ColorableBoards.getItem(0).Stacks.Value).count($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f7);
                var rng = new System.Random.$ctor1(System.DateTime.getMillisecond(System.DateTime.getNow()));
                var randomString = "";
                for (var i = 0; i < stringLength; i = (i + 1) | 0) {
                    randomString = System.String.concat(randomString, letters.getItem(rng.next$1(3)));
                }

                var randomString2 = "";
                for (var i1 = 0; i1 < stringLength; i1 = (i1 + 1) | 0) {
                    randomString2 = System.String.concat(randomString2, letters.getItem(rng.next$1(3)));
                }

                var randomString3 = "";
                for (var i2 = 0; i2 < stringLength; i2 = (i2 + 1) | 0) {
                    randomString3 = System.String.concat(randomString3, letters.getItem(rng.next$1(3)));
                }

                sb.append("\\begin{proof}");
                sb.appendLine(System.String.concat("Let $X = \\{0,1\\}$, $Y = \\{0,2\\}$ and $Z = \\{1,2\\}$. Then with the vertex ordering in Figure \\ref{", figureID, "}, a string such as ", randomString, ", "));
                sb.appendLine("represents a possible list assignment on $V(H)$ arising from a $3$-edge-coloring of $G-E(H)$.");
                sb.appendLine("By an $X$-Kempe change, we mean flipping colors $0$ and $1$ on a two-colored path in $G-E(H)$.  We call such a path an $X$-path. ");
                sb.appendLine("Any endpoint of an $X$-path in $H$ must end at a $Y$ or $Z$ vertex.  The meanings of $Y$-Kempe change, $Z$-Kempe change, $Y$-path and $Z$-path are analogous.");
                sb.appendLine("Note that if there are an odd number of $Y$'s and $Z$'s, then at least one $X$-path has only one endpoint in $H$.");
                sb.appendLine(System.String.concat("We use shorthand notation like $\\K_{X, 2}(", randomString, ",5,6) \\Rightarrow ", randomString2, ",", randomString3, "$ (Case 1)."));
                sb.appendLine(System.String.concat("This means the $X$-Kempe change on ", randomString, " starting at the second vertex and ending at the fifth and sixth result in boards ", randomString2, " and ", randomString3, " respectively and these are handled by Case 1."));
                sb.appendLine("The $\\infty$ symbol means starting (or ending) outside $H$.");
                sb.appendLine();

                if (this.Mind.OnlyConsiderNearlyColorableBoards) {
                    sb.appendLine(System.String.concat("We need to handle all boards that are nearly colorable for edge $e$ up to permutations of $\\{X,Y,Z\\}$, so it will suffice to handle all boards of the form ", allBoardsXYZ, "."));
                } else {
                    sb.appendLine(System.String.concat("We need to handle all boards up to permutations of $\\{X,Y,Z\\}$, so it will suffice to handle all boards of the form ", allBoardsXYZ, "."));
                }

                sb.appendLine();
                var wonBoards = new (System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))();
                for (var caseNumber = 1; caseNumber <= this.Cases.Count; caseNumber = (caseNumber + 1) | 0) {
                    var c = this.Cases.getItem(((caseNumber - 1) | 0));

                    var boards = c.Boards;
                    var thisClaimBoards;
                    if (caseNumber > 1) {
                        thisClaimBoards = System.Linq.Enumerable.from(boards).selectMany(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f9)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard);
                    } else {
                        thisClaimBoards = boards;
                    }

                    wonBoards.addRange(thisClaimBoards);

                    var zot = System.Linq.Enumerable.from(thisClaimBoards).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f2).toList(System.Collections.Generic.List$1(System.Int32));
                    var examples = System.Linq.Enumerable.from(thisClaimBoards).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f2).toList(System.Collections.Generic.List$1(System.Int32));
                    var nonExamples = System.Linq.Enumerable.from(Algorithms.Utility.LinqExtensions.CartesianProduct(System.Int32, System.Linq.Enumerable.repeat(System.Linq.Enumerable.range(0, 3), length))).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f3).except(System.Linq.Enumerable.from(zot).distinct(comparer), comparer).toList(System.Collections.Generic.List$1(System.Int32));

                    var generalized = sg.Generalize(examples, nonExamples);
                    var boardsXYZ = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(generalized).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f5), "or");

                    sb.appendLine();
                    sb.appendLine("\\bigskip");
                    sb.appendLine(System.String.format(System.String.concat("\\case{{{0}}}{{$B$ is one of ", boardsXYZ, ".}}"), Bridge.box(caseNumber, System.Int32)));
                    sb.appendLine();
                    sb.appendLine("\\bigskip");
                    if (caseNumber === 1) {
                        sb.appendLine();
                        sb.appendLine("In all these cases, $H$ is immediately colorable from the lists.");
                    } else {
                        sb.appendLine();
                        var fixGroups = System.Linq.Enumerable.from(boards).groupBy(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f10));

                        $t = Bridge.getEnumerator(fixGroups);
                        try {
                            while ($t.moveNext()) {
                                var fixGroup = $t.Current;
                                var others = System.Linq.Enumerable.from(letters).toList(System.String);
                                others.remove(fixGroup.key());

                                var swapCountGroups = fixGroup.groupBy(Bridge.fn.bind(this, $asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f12)).toList(System.Linq.Grouping$2);
                                $t1 = Bridge.getEnumerator(swapCountGroups);
                                try {
                                    while ($t1.moveNext()) {
                                        var swapCountGroup = $t1.Current;
                                        if (swapCountGroup.key() === 1) {
                                            $t2 = Bridge.getEnumerator(swapCountGroup);
                                            try {
                                                while ($t2.moveNext()) {
                                                    var b = $t2.Current;
                                                    var treeInfo = this.Mind.GetWinTreeInfo(b);
                                                    var groups = System.Linq.Enumerable.from(treeInfo).groupBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f13);

                                                    sb.append(System.String.concat("$\\K_{", fixGroup.key(), ",\\infty}(", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ(b), ",", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, groups.orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f14).select(function (gg) {
                                                        return ((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.GetXYZIndex(gg.key(), b) + 1) | 0);
                                                    }), null), ")"));
                                                    sb.appendLine(System.String.concat("\\Rightarrow $", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, groups.orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f14).select(Bridge.fn.bind(this, function (gg) {
                                                        return System.String.concat("$", this.GetChildBoardName(b, gg.first()), "$");
                                                    })), null), "( Case ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, System.Linq.Enumerable.from(treeInfo).select(Bridge.fn.bind(this, function (bc) {
                                                            return this.GetHandledCaseNumber(b, bc);
                                                        })).distinct().orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f15)), ")."));
                                                    sb.appendLine();

                                                    if (this._permutationLinked.get(b).Count > 0) {
                                                        sb.appendLine();
                                                        sb.appendLine();
                                                        sb.appendLine(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(this._permutationLinked.get(b)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f16)));
                                                        sb.appendLine();
                                                        sb.appendLine();
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$dispose();
                                                }
                                            }} else if (swapCountGroup.key() === 2) {
                                            $t3 = Bridge.getEnumerator(swapCountGroup);
                                            try {
                                                while ($t3.moveNext()) {
                                                    var b1 = $t3.Current;
                                                    var treeInfo1 = this.Mind.GetWinTreeInfo(b1);
                                                    var leftover = { v : System.Linq.Enumerable.from(treeInfo1).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo) };

                                                    while (leftover.v.Count > 0) {
                                                        var commonestSwapper = { v : Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.MaxIndex(System.Int32, System.Linq.Enumerable.range(0, b1._stackCount), (function ($me, leftover) {
                                                            return function (v) {
                                                                return System.Linq.Enumerable.from(leftover.v).count(function (bc) {
                                                                        return bc.SwapVertices.contains(v);
                                                                    });
                                                            };
                                                        })(this, leftover)) };
                                                        var handledAll = System.Linq.Enumerable.from(leftover.v).where((function ($me, commonestSwapper) {
                                                                return function (bc) {
                                                                    return bc.SwapVertices.contains(commonestSwapper.v);
                                                                };
                                                            })(this, commonestSwapper)).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo);
                                                        var handled = System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Distinct(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo, System.Int32, handledAll, (function ($me, commonestSwapper) {
                                                                return function (bc) {
                                                                    return bc.SwapVertices.Count === 1 ? -1 : System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                                };
                                                            })(this, commonestSwapper))).toList(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.BreakerChoiceInfo);

                                                        sb.append(System.String.concat("$\\K_{", fixGroup.key(), ",", (((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.GetXYZIndex(commonestSwapper.v, b1) + 1) | 0)), "}(", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ(b1)));

                                                        var single = System.Linq.Enumerable.from(handled).firstOrDefault($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f17, null);
                                                        if (single != null) {
                                                            sb.append(",\\infty");
                                                        }

                                                        if (System.Linq.Enumerable.from(handled).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f18).count() > 0) {
                                                            sb.append(System.String.concat(",", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, System.Linq.Enumerable.from(handled).where($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f18).orderBy((function ($me, commonestSwapper) {
                                                                return function (bc) {
                                                                    return System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                                };
                                                            })(this, commonestSwapper)).select((function ($me, commonestSwapper) {
                                                                return function (bc) {
                                                                    return ((Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.GetXYZIndex(System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first(), b1) + 1) | 0);
                                                                };
                                                            })(this, commonestSwapper)), null)));
                                                        }
                                                        sb.append(")");

                                                        sb.appendLine(System.String.concat("\\Rightarrow $", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(handled).orderBy((function ($me, commonestSwapper) {
                                                                return function (bc) {
                                                                    return bc.SwapVertices.Count === 1 ? -1 : System.Linq.Enumerable.from(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Except(System.Int32, bc.SwapVertices, commonestSwapper.v)).first();
                                                                };
                                                            })(this, commonestSwapper)).select(Bridge.fn.bind(this, function (bc) {
                                                            return System.String.concat("$", this.GetChildBoardName(b1, bc), "$");
                                                        })), null), "(Case ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.Int32, System.Linq.Enumerable.from(handled).select(Bridge.fn.bind(this, function (bc) {
                                                                return this.GetHandledCaseNumber(b1, bc);
                                                            })).distinct().orderBy($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f15)), ")."));
                                                        sb.appendLine();

                                                        $t4 = Bridge.getEnumerator(handledAll);
                                                        try {
                                                            while ($t4.moveNext()) {
                                                                var bc = $t4.Current;
                                                                leftover.v.remove(bc);
                                                            }
                                                        } finally {
                                                            if (Bridge.is($t4, System.IDisposable)) {
                                                                $t4.System$IDisposable$dispose();
                                                            }
                                                        }}

                                                    if (this._permutationLinked.get(b1).Count > 0) {
                                                        sb.appendLine();
                                                        sb.appendLine();
                                                        sb.appendLine(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.Extensions.Listify(System.String, System.Linq.Enumerable.from(this._permutationLinked.get(b1)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f16)));
                                                        sb.appendLine();
                                                        sb.appendLine();
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t3, System.IDisposable)) {
                                                    $t3.System$IDisposable$dispose();
                                                }
                                            }}
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$dispose();
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$dispose();
                            }
                        }}

                    sb.appendLine();
                }

                sb.appendLine("\\end{proof}");
                return sb.toString();
            },
            GetChildBoardName: function (b, bc) {
                var childBoard = new Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard.$ctor1(b._trace, bc.Alpha, bc.Beta, bc.Response, b._stackCount);
                return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ(childBoard);
            }
        }
    });

    Bridge.ns("Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder", $asm.$);

    Bridge.apply($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder, {
        f1: function (_o7) {
            _o7.add(0);
            _o7.add(1);
            _o7.add(2);
            return _o7;
        },
        f2: function (b) {
            return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.To012(b);
        },
        f3: function (ll) {
            return System.Linq.Enumerable.from(ll).toList(System.Int32);
        },
        f4: function (_) {
            return Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToTex(_);
        },
        f5: function (gg) {
            return System.String.concat("$", Bridge.toArray(System.Linq.Enumerable.from(gg).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f4)).join(""), "$");
        },
        f6: function (_o8) {
            _o8.add("X");
            _o8.add("Y");
            _o8.add("Z");
            return _o8;
        },
        f7: function (ss) {
            return Algorithms.Int64Usage.PopulationCount(ss) === 2;
        },
        f8: function (tup) {
            return tup.item2;
        },
        f9: function (b) {
            return System.Linq.Enumerable.from(System.Array.init([b], Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)).union(System.Linq.Enumerable.from(this._permutationLinked.get(b)).select($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f8));
        },
        f10: function (b) {
            var treeInfo = this.Mind.GetWinTreeInfo(b);
            var fixLetter = Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ$1(System.Int64((1 << System.Linq.Enumerable.from(treeInfo).first().Alpha) | (1 << System.Linq.Enumerable.from(treeInfo).first().Beta)));

            return fixLetter;
        },
        f11: function (ti) {
            return ti.SwapVertices.Count;
        },
        f12: function (b) {
            return System.Linq.Enumerable.from(this.Mind.GetWinTreeInfo(b)).max($asm.$.Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaximumDegreeThreeProofBuilder.f11);
        },
        f13: function (ss) {
            return ss.SwapVertices.getItem(0);
        },
        f14: function (gg) {
            return gg.key();
        },
        f15: function (xx) {
            return xx;
        },
        f16: function (ppp) {
            return System.String.concat("$", ppp.item1, "\\Rightarrow ", Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree.Extensions.ToXYZ(ppp.item2), "$");
        },
        f17: function (bc) {
            return bc.SwapVertices.Count === 1;
        },
        f18: function (bc) {
            return bc.SwapVertices.Count > 1;
        }
    });

    Bridge.define("Test.TabCanvas", {
        inherits: [GraphicsLayer.ICanvas],
        statics: {
            methods: {
                ExtractPoints: function (x) {
                    return new (Bridge.GeneratorEnumerable$1(Graphs.Vector))(Bridge.fn.bind(this, function (x) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            i,
                            j,
                            p,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(Graphs.Vector))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            i = 0;
                                                
                                            $step = 1;
                                            continue;
                                        }
                                        case 1: {
                                            if ( true ) {
                                                    $step = 2;
                                                    continue;
                                                } 
                                                $step = 4;
                                                continue;
                                        }
                                        case 2: {
                                            j = System.String.indexOf(x, "[", i);
                                                if (j < 0) {
                                                    j = System.String.indexOf(x, "(", i);
                                                    if (j < 0) {
                                                        $step = 4;
                                                        continue;
                                                    }
                                                }
                                                i = j;

                                                j = System.String.indexOf(x, "]", i);
                                                if (j < 0) {
                                                    j = System.String.indexOf(x, ")", i);
                                                    if (j < 0) {
                                                        $step = 4;
                                                        continue;
                                                    }
                                                }
                                                p = System.String.split(x.substr(i, ((j - i) | 0)), [44].map(function(i) {{ return String.fromCharCode(i); }}));
                                                $enumerator.current = new Graphs.Vector(System.Double.parse(System.String.trim(p[System.Array.index(0, p)], [91, 93, 40, 41])), System.Double.parse(System.String.trim(p[System.Array.index(1, p)], [91, 93, 40, 41])));
                                                $step = 3;
                                                return true;
                                        }
                                        case 3: {
                                            i = j;

                                                $step = 1;
                                                continue;
                                        }
                                        case 4: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                },
                ParseAdjacencyMatrix: function (a) {
                    var $t;
                    var bits = System.String.split(System.String.replaceAll(a, "'", ""), System.Array.init([",", "\\\\n", "[", "]", " "], System.String), null, 1);
                    var n = Bridge.Int.clip32(Math.sqrt(bits.length));
                    var adj = System.Array.create(false, null, System.Boolean, n, n);

                    var i = 0;
                    $t = Bridge.getEnumerator(bits);
                    try {
                        while ($t.moveNext()) {
                            var b = $t.Current;
                            adj.set([((Bridge.Int.div(i, n)) | 0), i % n], Bridge.referenceEquals(b, "1"));
                            i = (i + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }
                    return adj;
                }
            }
        },
        fields: {
            _ctrlDown: false,
            _title: null
        },
        events: {
            MouseMoved: null,
            MouseButtonUp: null,
            MouseButtonDown: null,
            MouseButtonDoubleClicked: null
        },
        props: {
            Canvas: null,
            GraphCanvas: null,
            IsControlKeyDown: {
                get: function () {
                    return this._ctrlDown;
                }
            },
            SelectedObjects: {
                set: function (value) { }
            },
            Title: {
                get: function () {
                    return this._title;
                },
                set: function (value) {
                    this._title = value;
                    this.Invalidate();
                }
            }
        },
        alias: [
            "SetClipboardText", "GraphicsLayer$ICanvas$SetClipboardText",
            "GetClipboardText", "GraphicsLayer$ICanvas$GetClipboardText",
            "IsControlKeyDown", "GraphicsLayer$ICanvas$IsControlKeyDown",
            "SelectedObjects", "GraphicsLayer$ICanvas$SelectedObjects",
            "Invalidate", "GraphicsLayer$ICanvas$Invalidate",
            "Title", "GraphicsLayer$ICanvas$Title",
            "addMouseMoved", "GraphicsLayer$IProduceMouseEvents$addMouseMoved",
            "removeMouseMoved", "GraphicsLayer$IProduceMouseEvents$removeMouseMoved",
            "addMouseButtonUp", "GraphicsLayer$IProduceMouseEvents$addMouseButtonUp",
            "removeMouseButtonUp", "GraphicsLayer$IProduceMouseEvents$removeMouseButtonUp",
            "addMouseButtonDown", "GraphicsLayer$IProduceMouseEvents$addMouseButtonDown",
            "removeMouseButtonDown", "GraphicsLayer$IProduceMouseEvents$removeMouseButtonDown",
            "addMouseButtonDoubleClicked", "GraphicsLayer$IProduceMouseEvents$addMouseButtonDoubleClicked",
            "removeMouseButtonDoubleClicked", "GraphicsLayer$IProduceMouseEvents$removeMouseButtonDoubleClicked"
        ],
        ctors: {
            ctor: function (canvas, graphCanvas) {
                this.$initialize();
                this.GraphCanvas = graphCanvas;
                this.Canvas = canvas;
                this.GraphCanvas.Canvas = this;

                this.Canvas.ondblclick = Bridge.fn.combine(this.Canvas.ondblclick, Bridge.fn.cacheBind(this, this.OnMouseDoubleClick));
                this.Canvas.onmousedown = Bridge.fn.combine(this.Canvas.onmousedown, Bridge.fn.cacheBind(this, this.OnMouseButtonDown));
                this.Canvas.onmouseup = Bridge.fn.combine(this.Canvas.onmouseup, Bridge.fn.cacheBind(this, this.OnMouseButtonUp));
                this.Canvas.onmousemove = Bridge.fn.combine(this.Canvas.onmousemove, Bridge.fn.cacheBind(this, this.OnMouseMove));

                this.Canvas.onload = Bridge.fn.cacheBind(this, this.OnLoad);

                this.GraphCanvas.addGraphModified(Bridge.fn.cacheBind(this, this.OnGraphModified));
                this.GraphCanvas.addNameModified(Bridge.fn.cacheBind(this, this.OnNameModified));
            }
        },
        methods: {
            OnNameModified: function (name) {
                this.Title = name;
            },
            SageManual: function () {
                Test.App.AskSage(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n'));
            },
            SageChromaticPolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.chromatic_polynomial()"));
            },
            SageGraph6: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.graph6_string()"));
            },
            SageSparse6: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.sparse6_string()"));
            },
            SageChromaticNumber: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.chromatic_number()"));
            },
            SageChromaticQuasisymmetricFunction: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.chromatic_quasisymmetric_function()"));
            },
            SageChromaticSymmetricFunction: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.chromatic_symmetric_function()"));
            },
            SageColoring: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.coloring()"));
            },
            SageConvexityProperties: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.convexity_properties()"));
            },
            SageHasHomomorphismTo: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_homomorphism_to()"));
            },
            SageIndependentSet: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.independent_set()"));
            },
            SageIndependentSetOfRepresentatives: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.independent_set_of_representatives()"));
            },
            SageIsPerfect: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_perfect()"));
            },
            SageMatchingPolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.matching_polynomial()"));
            },
            SageMinor: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.minor()"));
            },
            SagePathwidth: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.pathwidth()"));
            },
            SageRankDecomposition: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.rank_decomposition()"));
            },
            SageTopologicalMinor: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.topological_minor()"));
            },
            SageTreewidth: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.treewidth()"));
            },
            SageTuttePolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.tutte_polynomial()"));
            },
            SageVertexCover: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_cover()"));
            },
            SageBipartiteColor: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.bipartite_color()"));
            },
            SageBipartiteSets: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.bipartite_sets()"));
            },
            SageGraph6String: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.graph6_string()"));
            },
            SageIsDirected: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_directed()"));
            },
            SageJoin: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.join()"));
            },
            SageSparse6String: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.sparse6_string()"));
            },
            SageToDirected: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.to_directed()"));
            },
            SageToUndirected: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.to_undirected()"));
            },
            SageWriteToEps: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.write_to_eps()"));
            },
            SageCliqueComplex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clique_complex()"));
            },
            SageCliqueMaximum: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clique_maximum()"));
            },
            SageCliqueNumber: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clique_number()"));
            },
            SageCliquePolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clique_polynomial()"));
            },
            SageCliquesContainingVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_containing_vertex()"));
            },
            SageCliquesGetCliqueBipartite: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_get_clique_bipartite()"));
            },
            SageCliquesGetMaxCliqueGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_get_max_clique_graph()"));
            },
            SageCliquesMaximal: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_maximal()"));
            },
            SageCliquesMaximum: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_maximum()"));
            },
            SageCliquesNumberOf: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_number_of()"));
            },
            SageCliquesVertexCliqueNumber: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cliques_vertex_clique_number()"));
            },
            SageBoundedOutdegreeOrientation: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.bounded_outdegree_orientation()"));
            },
            SageBridges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.bridges()"));
            },
            SageDegreeConstrainedSubgraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree_constrained_subgraph()"));
            },
            SageGomoryHuTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.gomory_hu_tree()"));
            },
            SageMinimumOutdegreeOrientation: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.minimum_outdegree_orientation()"));
            },
            SageOrientations: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.orientations()"));
            },
            SageRandomSpanningTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_spanning_tree()"));
            },
            SageSpanningTrees: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.spanning_trees()"));
            },
            SageStrongOrientation: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.strong_orientation()"));
            },
            SageApexVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.apex_vertices()"));
            },
            SageIsApex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_apex()"));
            },
            SageIsArcTransitive: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_arc_transitive()"));
            },
            SageIsAsteroidalTripleFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_asteroidal_triple_free()"));
            },
            SageIsBiconnected: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_biconnected()"));
            },
            SageIsBipartite: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_bipartite()"));
            },
            SageIsBlockGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_block_graph()"));
            },
            SageIsCartesianProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_cartesian_product()"));
            },
            SageIsDistanceRegular: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_distance_regular()"));
            },
            SageIsEdgeTransitive: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_edge_transitive()"));
            },
            SageIsEvenHoleFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_even_hole_free()"));
            },
            SageIsForest: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_forest()"));
            },
            SageIsHalfTransitive: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_half_transitive()"));
            },
            SageIsLineGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_line_graph()"));
            },
            SageIsLongAntiholeFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_long_antihole_free()"));
            },
            SageIsLongHoleFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_long_hole_free()"));
            },
            SageIsOddHoleFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_odd_hole_free()"));
            },
            SageIsOverfull: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_overfull()"));
            },
            SageIsPartialCube: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_partial_cube()"));
            },
            SageIsPrime: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_prime()"));
            },
            SageIsSemiSymmetric: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_semi_symmetric()"));
            },
            SageIsSplit: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_split()"));
            },
            SageIsStronglyRegular: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_strongly_regular()"));
            },
            SageIsTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_tree()"));
            },
            SageIsTriangleFree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_triangle_free()"));
            },
            SageIsWeaklyChordal: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_weakly_chordal()"));
            },
            SageOddGirth: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.odd_girth()"));
            },
            SageCores: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cores()"));
            },
            SageFractionalChromaticIndex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.fractional_chromatic_index()"));
            },
            SageHasPerfectMatching: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_perfect_matching()"));
            },
            SageIharaZetaFunctionInverse: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.ihara_zeta_function_inverse()"));
            },
            SageKirchhoffSymanzikPolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.kirchhoff_symanzik_polynomial()"));
            },
            SageLovaszTheta: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.lovasz_theta()"));
            },
            SageMagnitudeFunction: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.magnitude_function()"));
            },
            SageMatching: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.matching()"));
            },
            SageMaximumAverageDegree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.maximum_average_degree()"));
            },
            SageModularDecomposition: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.modular_decomposition()"));
            },
            SagePerfectMatchings: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.perfect_matchings()"));
            },
            SageSeidelAdjacencyMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.seidel_adjacency_matrix()"));
            },
            SageNetworkxGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.networkx_graph()"));
            },
            SageIgraphGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.igraph_graph()"));
            },
            SageToDictionary: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.to_dictionary()"));
            },
            SageCopy: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.copy()"));
            },
            SageExportToFile: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.export_to_file()"));
            },
            SageAdjacencyMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.adjacency_matrix()"));
            },
            SageIncidenceMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.incidence_matrix()"));
            },
            SageDistanceMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.distance_matrix()"));
            },
            SageWeightedAdjacencyMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.weighted_adjacency_matrix()"));
            },
            SageKirchhoffMatrix: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.kirchhoff_matrix()"));
            },
            SageHasLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_loops()"));
            },
            SageAllowsLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.allows_loops()"));
            },
            SageAllowLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.allow_loops()"));
            },
            SageLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.loops()"));
            },
            SageLoopEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.loop_edges()"));
            },
            SageNumberOfLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.number_of_loops()"));
            },
            SageLoopVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.loop_vertices()"));
            },
            SageRemoveLoops: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.remove_loops()"));
            },
            SageHasMultipleEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_multiple_edges()"));
            },
            SageAllowsMultipleEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.allows_multiple_edges()"));
            },
            SageAllowMultipleEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.allow_multiple_edges()"));
            },
            SageMultipleEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.multiple_edges()"));
            },
            SageName: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.name()"));
            },
            SageIsImmutable: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_immutable()"));
            },
            SageWeighted: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.weighted()"));
            },
            SageAntisymmetric: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.antisymmetric()"));
            },
            SageDensity: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.density()"));
            },
            SageOrder: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.order()"));
            },
            SageSize: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.size()"));
            },
            SageAddVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_vertex()"));
            },
            SageAddVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_vertices()"));
            },
            SageDeleteVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.delete_vertex()"));
            },
            SageDeleteVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.delete_vertices()"));
            },
            SageHasVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_vertex()"));
            },
            SageRandomVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_vertex()"));
            },
            SageRandomVertexIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_vertex_iterator()"));
            },
            SageRandomEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_edge()"));
            },
            SageRandomEdgeIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_edge_iterator()"));
            },
            SageVertexBoundary: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_boundary()"));
            },
            SageSetVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_vertices()"));
            },
            SageSetVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_vertex()"));
            },
            SageGetVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.get_vertex()"));
            },
            SageGetVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.get_vertices()"));
            },
            SageVertexIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_iterator()"));
            },
            SageNeighborIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.neighbor_iterator()"));
            },
            SageVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertices()"));
            },
            SageNeighbors: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.neighbors()"));
            },
            SageMergeVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.merge_vertices()"));
            },
            SageAddEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_edge()"));
            },
            SageAddEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_edges()"));
            },
            SageSubdivideEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subdivide_edge()"));
            },
            SageSubdivideEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subdivide_edges()"));
            },
            SageDeleteEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.delete_edge()"));
            },
            SageDeleteEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.delete_edges()"));
            },
            SageDeleteMultiedge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.delete_multiedge()"));
            },
            SageSetEdgeLabel: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_edge_label()"));
            },
            SageHasEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.has_edge()"));
            },
            SageEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edges()"));
            },
            SageEdgeBoundary: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_boundary()"));
            },
            SageEdgeIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_iterator()"));
            },
            SageEdgesIncident: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edges_incident()"));
            },
            SageEdgeLabel: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_label()"));
            },
            SageEdgeLabels: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_labels()"));
            },
            SageRemoveMultipleEdges: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.remove_multiple_edges()"));
            },
            SageClear: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clear()"));
            },
            SageDegree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree()"));
            },
            SageAverageDegree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.average_degree()"));
            },
            SageDegreeHistogram: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree_histogram()"));
            },
            SageDegreeIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree_iterator()"));
            },
            SageDegreeSequence: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree_sequence()"));
            },
            SageRandomSubgraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.random_subgraph()"));
            },
            SageAddClique: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_clique()"));
            },
            SageAddCycle: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_cycle()"));
            },
            SageAddPath: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.add_path()"));
            },
            SageComplement: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.complement()"));
            },
            SageLineGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.line_graph()"));
            },
            SageToSimple: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.to_simple()"));
            },
            SageDisjointUnion: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.disjoint_union()"));
            },
            SageUnion: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.union()"));
            },
            SageRelabel: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.relabel()"));
            },
            SageDegreeToCell: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.degree_to_cell()"));
            },
            SageSubgraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subgraph()"));
            },
            SageIsSubgraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_subgraph()"));
            },
            SageCartesianProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cartesian_product()"));
            },
            SageTensorProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.tensor_product()"));
            },
            SageLexicographicProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.lexicographic_product()"));
            },
            SageStrongProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.strong_product()"));
            },
            SageDisjunctiveProduct: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.disjunctive_product()"));
            },
            SageEulerianOrientation: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.eulerian_orientation()"));
            },
            SageEulerianCircuit: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.eulerian_circuit()"));
            },
            SageCycleBasis: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cycle_basis()"));
            },
            SageAllPaths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.all_paths()"));
            },
            SageTrianglesCount: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.triangles_count()"));
            },
            SageSpectrum: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.spectrum()"));
            },
            SageEigenvectors: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.eigenvectors()"));
            },
            SageEigenspaces: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.eigenspaces()"));
            },
            SageClusterTriangles: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cluster_triangles()"));
            },
            SageClusteringAverage: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clustering_average()"));
            },
            SageClusteringCoeff: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.clustering_coeff()"));
            },
            SageClusterTransitivity: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.cluster_transitivity()"));
            },
            SageSzegedIndex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.szeged_index()"));
            },
            SageCoarsestEquitableRefinement: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.coarsest_equitable_refinement()"));
            },
            SageAutomorphismGroup: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.automorphism_group()"));
            },
            SageIsVertexTransitive: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_vertex_transitive()"));
            },
            SageIsIsomorphic: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_isomorphic()"));
            },
            SageCanonicalLabel: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.canonical_label()"));
            },
            SageIsCayley: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_cayley()"));
            },
            SageIsEulerian: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_eulerian()"));
            },
            SageIsPlanar: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_planar()"));
            },
            SageIsCircularPlanar: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_circular_planar()"));
            },
            SageIsRegular: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_regular()"));
            },
            SageIsChordal: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_chordal()"));
            },
            SageIsCirculant: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_circulant()"));
            },
            SageIsInterval: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_interval()"));
            },
            SageIsGallaiTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_gallai_tree()"));
            },
            SageIsClique: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_clique()"));
            },
            SageIsCycle: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_cycle()"));
            },
            SageIsIndependentSet: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_independent_set()"));
            },
            SageIsTransitivelyReduced: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_transitively_reduced()"));
            },
            SageIsEquitable: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_equitable()"));
            },
            SageBreadthFirstSearch: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.breadth_first_search()"));
            },
            SageDepthFirstSearch: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.depth_first_search()"));
            },
            SageLexBFS: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.lex_BFS()"));
            },
            SageCentralityBetweenness: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.centrality_betweenness()"));
            },
            SageCentralityCloseness: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.centrality_closeness()"));
            },
            SageDistance: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.distance()"));
            },
            SageDistanceAllPairs: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.distance_all_pairs()"));
            },
            SageDistancesDistribution: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.distances_distribution()"));
            },
            SageEccentricity: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.eccentricity()"));
            },
            SageRadius: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.radius()"));
            },
            SageCenter: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.center()"));
            },
            SageDiameter: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.diameter()"));
            },
            SageDistanceGraph: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.distance_graph()"));
            },
            SageGirth: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.girth()"));
            },
            SagePeriphery: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.periphery()"));
            },
            SageShortestPath: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.shortest_path()"));
            },
            SageShortestPathLength: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.shortest_path_length()"));
            },
            SageShortestPaths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.shortest_paths()"));
            },
            SageShortestPathLengths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.shortest_path_lengths()"));
            },
            SageShortestPathAllPairs: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.shortest_path_all_pairs()"));
            },
            SageWienerIndex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.wiener_index()"));
            },
            SageAverageDistance: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.average_distance()"));
            },
            SageIsConnected: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_connected()"));
            },
            SageConnectedComponents: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.connected_components()"));
            },
            SageConnectedComponentsNumber: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.connected_components_number()"));
            },
            SageConnectedComponentsSubgraphs: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.connected_components_subgraphs()"));
            },
            SageConnectedComponentContainingVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.connected_component_containing_vertex()"));
            },
            SageConnectedComponentsSizes: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.connected_components_sizes()"));
            },
            SageBlocksAndCutVertices: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.blocks_and_cut_vertices()"));
            },
            SageBlocksAndCutsTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.blocks_and_cuts_tree()"));
            },
            SageIsCutEdge: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_cut_edge()"));
            },
            SageIsCutVertex: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_cut_vertex()"));
            },
            SageEdgeCut: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_cut()"));
            },
            SageVertexCut: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_cut()"));
            },
            SageFlow: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.flow()"));
            },
            SageEdgeDisjointPaths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_disjoint_paths()"));
            },
            SageVertexDisjointPaths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_disjoint_paths()"));
            },
            SageEdgeConnectivity: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_connectivity()"));
            },
            SageVertexConnectivity: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.vertex_connectivity()"));
            },
            SageTransitiveClosure: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.transitive_closure()"));
            },
            SageTransitiveReduction: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.transitive_reduction()"));
            },
            SageMinSpanningTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.min_spanning_tree()"));
            },
            SageSpanningTreesCount: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.spanning_trees_count()"));
            },
            SageDominatorTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.dominator_tree()"));
            },
            SageSetEmbedding: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_embedding()"));
            },
            SageGetEmbedding: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.get_embedding()"));
            },
            SageFaces: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.faces()"));
            },
            SageGetPos: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.get_pos()"));
            },
            SageSetPos: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_pos()"));
            },
            SageSetPlanarPositions: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_planar_positions()"));
            },
            SageIsDrawnFreeOfEdgeCrossings: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_drawn_free_of_edge_crossings()"));
            },
            SageLatexOptions: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.latex_options()"));
            },
            SageSetLatexOptions: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.set_latex_options()"));
            },
            SageLayout: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.layout()"));
            },
            SageGraphplot: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.graphplot()"));
            },
            SagePlot: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.plot()"));
            },
            SageShow: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.show()"));
            },
            SagePlot3d: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.plot3d()"));
            },
            SageShow3d: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.show3d()"));
            },
            SageGraphvizString: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.graphviz_string()"));
            },
            SageGraphvizToFileNamed: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.graphviz_to_file_named()"));
            },
            SageSteinerTree: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.steiner_tree()"));
            },
            SageEdgeDisjointSpanningTrees: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.edge_disjoint_spanning_trees()"));
            },
            SageFeedbackVertexSet: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.feedback_vertex_set()"));
            },
            SageMultiwayCut: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.multiway_cut()"));
            },
            SageMaxCut: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.max_cut()"));
            },
            SageLongestPath: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.longest_path()"));
            },
            SageTravelingSalesmanProblem: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.traveling_salesman_problem()"));
            },
            SageIsHamiltonian: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.is_hamiltonian()"));
            },
            SageHamiltonianCycle: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.hamiltonian_cycle()"));
            },
            SageHamiltonianPath: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.hamiltonian_path()"));
            },
            SageMulticommodityFlow: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.multicommodity_flow()"));
            },
            SageDisjointRoutedPaths: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.disjoint_routed_paths()"));
            },
            SageDominatingSet: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.dominating_set()"));
            },
            SageSubgraphSearch: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subgraph_search()"));
            },
            SageSubgraphSearchCount: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subgraph_search_count()"));
            },
            SageSubgraphSearchIterator: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.subgraph_search_iterator()"));
            },
            SageCharacteristicPolynomial: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.characteristic_polynomial()"));
            },
            SageGenus: function () {
                Test.App.AskSageAuto(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')", '\n', "G.genus()"));
            },
            SageLayoutSpring: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_spring()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutRanked: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_ranked()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutExtendRandomly: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_extend_randomly()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutCircular: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_circular()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutTree: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_tree()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutGraphviz: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_graphviz()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLayoutPlanar: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    layout, 
                    positions, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync(this.GraphCanvas.Graph, "G.layout_planar()");
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    layout = $taskResult1;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    $task2 = this.LayoutGraph(positions);
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task2.getAwaitedResult();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            SageLoadNamedGraph: function (name) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    a, 
                    layout, 
                    positions, 
                    adj, 
                    g, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = Test.App.AskSageAsync$1(System.String.concat("G = graphs.", name, "()", '\n', "G.adjacency_matrix().str()"));
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    a = $taskResult1;
                                    $task2 = Test.App.AskSageAsync$1(System.String.concat("G = graphs.", name, "()", '\n', "G.layout()"));
                                    $step = 2;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    layout = $taskResult2;
                                    positions = this.Scale(Test.TabCanvas.ExtractPoints(layout));
                                    adj = Test.TabCanvas.ParseAdjacencyMatrix(a);

                                    g = new Algorithms.Graph.ctor(adj);

                                    Test.App.NewTab(name, new Graphs.Graph.$ctor1(g, positions, false));
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            Scale: function (positions) {
                var l = System.Linq.Enumerable.from(positions).toList(Graphs.Vector);
                var minX = System.Linq.Enumerable.from(l).min($asm.$.Test.TabCanvas.f1);
                var minY = System.Linq.Enumerable.from(l).min($asm.$.Test.TabCanvas.f2);
                var maxX = System.Linq.Enumerable.from(l).max($asm.$.Test.TabCanvas.f1);
                var maxY = System.Linq.Enumerable.from(l).max($asm.$.Test.TabCanvas.f2);

                var w = maxX - minX;
                var h = maxY - minY;

                return System.Linq.Enumerable.from(positions).select(function (p) {
                        return new Graphs.Vector(0.1 + 0.8 * (p.X - minX) / w, 0.1 + 0.8 * (p.Y - minY) / h);
                    }).toList(Graphs.Vector);
            },
            LayoutGraph: function (positions) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    a, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        this.SnapPositionsToGrid(positions);
                                        a = new Test.LayoutAnimation(Bridge.fn.bind(this, $asm.$.Test.TabCanvas.f3), Bridge.fn.bind(this, $asm.$.Test.TabCanvas.f4), positions, this.GraphCanvas.Graph);

                                        this.GraphCanvas.SnapToGrid = false;
                                        $task1 = a.Animate();
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.GraphCanvas.SnapToGrid = true;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SnapPositionsToGrid: function (positions) {
                for (var i = 0; i < positions.Count; i = (i + 1) | 0) {
                    positions.getItem(i).X = Graphs.GraphCanvas._gridStep * Bridge.Math.round(positions.getItem(i).X / Graphs.GraphCanvas._gridStep, 0, 6);
                    positions.getItem(i).Y = Graphs.GraphCanvas._gridStep * Bridge.Math.round(positions.getItem(i).Y / Graphs.GraphCanvas._gridStep, 0, 6);
                }
            },
            OnGraphModified: function (g) {
                this.Invalidate();
            },
            OnLoad: function (e) {
                this.Invalidate();
            },
            OnMouseMove: function (e) {
                this._ctrlDown = e.ctrlKey;
                if (!Bridge.staticEquals(this.MouseMoved, null)) {
                    this.MouseMoved(e.layerX, e.layerY);
                }
            },
            OnMouseButtonDown: function (e) {
                this._ctrlDown = e.ctrlKey;
                // Canvas.SetCapture(true);  // chrome does not seem to support this, what?

                if (e.shiftKey) {
                    if (!Bridge.staticEquals(this.MouseButtonDoubleClicked, null)) {
                        this.MouseButtonDoubleClicked(e.layerX, e.layerY, e.button === 0 ? GraphicsLayer.MouseButton.Left : GraphicsLayer.MouseButton.Right);
                    }
                } else {
                    if (!Bridge.staticEquals(this.MouseButtonDown, null)) {
                        this.MouseButtonDown(e.layerX, e.layerY, e.button === 0 ? GraphicsLayer.MouseButton.Left : GraphicsLayer.MouseButton.Right);
                    }
                }
            },
            OnMouseButtonUp: function (e) {
                this._ctrlDown = e.ctrlKey;
                // Canvas.SetCapture(false);
                if (e.shiftKey) {
                    return;
                }


                if (!Bridge.staticEquals(this.MouseButtonUp, null)) {
                    this.MouseButtonUp(e.layerX, e.layerY, e.button === 0 ? GraphicsLayer.MouseButton.Left : GraphicsLayer.MouseButton.Right);
                }

                if (e.ctrlKey && e.altKey) {
                    Test.App.AskSage(System.String.concat("G = Graph('", GraphsCore.GraphIO.ToGraph6$1(this.GraphCanvas.Graph.GetEdgeWeights()), "')"));
                }
            },
            OnMouseDoubleClick: function (e) { },
            SetClipboardText: function (text) { },
            GetClipboardText: function () {
                return "";
            },
            Invalidate: function () {
                var graphics = new Test.Graphics(this.Canvas);
                this.GraphCanvas.Paint(graphics, this.Canvas.width, this.Canvas.height);
            }
        }
    });

    Bridge.ns("Test.TabCanvas", $asm.$);

    Bridge.apply($asm.$.Test.TabCanvas, {
        f1: function (p) {
            return p.X;
        },
        f2: function (p) {
            return p.Y;
        },
        f3: function () {
        this.GraphCanvas.Invalidate();

    },
        f4: function () {
        this.GraphCanvas.Invalidate();
    }
    });
});

//# sourceMappingURL=data:application/json;base64,
