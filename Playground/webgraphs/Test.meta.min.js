Bridge.assembly("Test",function(){"use strict";var $m=Bridge.setMetadata,$n=[System,Graphs,System.Collections.Generic,System.Text,GraphicsLayer,Algorithms,BitLevelGeneration,System.Threading.Tasks,Test,Algorithms.Utility,Algorithms.WordGame,Algorithms.WordGame.Optimized,Algorithms.Polynomials,Algorithms.FixerBreaker,Algorithms.FixerBreaker.KnowledgeEngine,Algorithms.FixerBreaker.KnowledgeEngine.Slim,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super,Algorithms.DataStructures,GraphsCore,MoreLinq,Algorithms.IndependenceRatio,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.MaxDegreeThree,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ArbitraryMaxDegree,Algorithms.FixerBreaker.Chronicle];$m(QuickLZ,function(){return{att:1048960,a:4,s:!0,m:[{a:2,n:"compress",is:!0,t:8,pi:[{n:"source",pt:$n[0].Array.type(System.Byte),ps:0},{n:"level",dv:1,o:!0,pt:$n[0].Int32,ps:1}],sn:"compress",rt:$n[0].Array.type(System.Byte),p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:2,n:"decompress",is:!0,t:8,pi:[{n:"source",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"decompress",rt:$n[0].Array.type(System.Byte),p:[$n[0].Array.type(System.Byte)]},{a:1,n:"fast_write",is:!0,t:8,pi:[{n:"a",pt:$n[0].Array.type(System.Byte),ps:0},{n:"i",pt:$n[0].Int32,ps:1},{n:"value",pt:$n[0].Int32,ps:2},{n:"numbytes",pt:$n[0].Int32,ps:3}],sn:"fast_write",rt:$n[0].Void,p:[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Int32]},{a:1,n:"headerLen",is:!0,t:8,pi:[{n:"source",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"headerLen",rt:$n[0].Int32,p:[$n[0].Array.type(System.Byte)]},{a:2,n:"sizeCompressed",is:!0,t:8,pi:[{n:"source",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"sizeCompressed",rt:$n[0].Int32,p:[$n[0].Array.type(System.Byte)]},{a:2,n:"sizeDecompressed",is:!0,t:8,pi:[{n:"source",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"sizeDecompressed",rt:$n[0].Int32,p:[$n[0].Array.type(System.Byte)]},{a:1,n:"write_header",is:!0,t:8,pi:[{n:"dst",pt:$n[0].Array.type(System.Byte),ps:0},{n:"level",pt:$n[0].Int32,ps:1},{n:"compressible",pt:$n[0].Boolean,ps:2},{n:"size_compressed",pt:$n[0].Int32,ps:3},{n:"size_decompressed",pt:$n[0].Int32,ps:4}],sn:"write_header",rt:$n[0].Void,p:[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Boolean,$n[0].Int32,$n[0].Int32]},{a:1,n:"CWORD_LEN",is:!0,t:4,rt:$n[0].Int32,sn:"CWORD_LEN"},{a:1,n:"DEFAULT_HEADERLEN",is:!0,t:4,rt:$n[0].Int32,sn:"DEFAULT_HEADERLEN"},{a:1,n:"HASH_VALUES",is:!0,t:4,rt:$n[0].Int32,sn:"HASH_VALUES"},{a:1,n:"MINOFFSET",is:!0,t:4,rt:$n[0].Int32,sn:"MINOFFSET"},{a:2,n:"QLZ_MEMORY_SAFE",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_MEMORY_SAFE"},{a:1,n:"QLZ_POINTERS_1",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_POINTERS_1"},{a:1,n:"QLZ_POINTERS_3",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_POINTERS_3"},{a:2,n:"QLZ_STREAMING_BUFFER",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_STREAMING_BUFFER"},{a:2,n:"QLZ_VERSION_MAJOR",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_VERSION_MAJOR"},{a:2,n:"QLZ_VERSION_MINOR",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_VERSION_MINOR"},{a:2,n:"QLZ_VERSION_REVISION",is:!0,t:4,rt:$n[0].Int32,sn:"QLZ_VERSION_REVISION"},{a:1,n:"UNCOMPRESSED_END",is:!0,t:4,rt:$n[0].Int32,sn:"UNCOMPRESSED_END"},{a:1,n:"UNCONDITIONAL_MATCHLEN",is:!0,t:4,rt:$n[0].Int32,sn:"UNCONDITIONAL_MATCHLEN"}]}});$m($n[18].CompactSerializer,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Deserialize",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"Deserialize",rt:$n[1].Graph,p:[$n[0].String]},{a:1,n:"DeserializeFromByteArray",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"DeserializeFromByteArray",rt:$n[1].Graph,p:[$n[0].Array.type(System.Byte)]},{a:1,n:"Get7BitEncodedInt",is:!0,t:8,pi:[{n:"value",pt:$n[0].Int32,ps:0}],sn:"Get7BitEncodedInt",rt:$n[0].Array.type(System.Byte),p:[$n[0].Int32]},{a:1,n:"GetBytes",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"GetBytes",rt:$n[0].Array.type(System.Byte),p:[$n[0].String]},{a:2,n:"LooksLikeASerializedGraph",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"LooksLikeASerializedGraph",rt:$n[0].Boolean,p:[$n[0].String]},{a:1,n:"Read7BitEncodedInt",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0},{n:"offset",ref:!0,pt:$n[0].Int32,ps:1}],sn:"Read7BitEncodedInt",rt:$n[0].Int32,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:1,n:"ReadByte",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0},{n:"offset",ref:!0,pt:$n[0].Int32,ps:1}],sn:"ReadByte",rt:$n[0].Byte,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:1,n:"ReadString",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0},{n:"offset",ref:!0,pt:$n[0].Int32,ps:1}],sn:"ReadString",rt:$n[0].String,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:1,n:"ReadUInt16",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0},{n:"offset",ref:!0,pt:$n[0].Int32,ps:1}],sn:"ReadUInt16",rt:$n[0].UInt16,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:1,n:"ReadUInt32",is:!0,t:8,pi:[{n:"bytes",pt:$n[0].Array.type(System.Byte),ps:0},{n:"offset",ref:!0,pt:$n[0].Int32,ps:1}],sn:"ReadUInt32",rt:$n[0].UInt32,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:2,n:"Serialize",is:!0,t:8,pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"Serialize",rt:$n[0].String,p:[$n[1].Graph]},{a:1,n:"SerializeToByteArray",is:!0,t:8,pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"SerializeToByteArray",rt:$n[0].Array.type(System.Byte),p:[$n[1].Graph]},{a:1,n:"ASCII",is:!0,t:4,rt:$n[0].String,sn:"ASCII"},{a:1,n:"Prefix",is:!0,t:4,rt:$n[0].String,sn:"Prefix"},{a:1,n:"Scale",is:!0,t:4,rt:$n[0].Int32,sn:"Scale"}]}});$m($n[18].GraphIO,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"Low6",is:!0,t:8,pi:[{n:"b",pt:$n[0].Byte,ps:0}],sn:"Low6",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Byte]},{a:1,n:"RowToColumnPermutation",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"RowToColumnPermutation",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int32]},{a:2,n:"ToAdjacencyMatrix",is:!0,t:8,pi:[{n:"edgeWeights",pt:$n[2].List$1(System.Int32),ps:0},{n:"isDirected",dv:!1,o:!0,pt:$n[0].Boolean,ps:1}],sn:"ToAdjacencyMatrix",rt:$n[0].String,p:[$n[2].List$1(System.Int32),$n[0].Boolean]},{a:2,n:"ToGraph6",is:!0,t:8,pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"ToGraph6",rt:$n[0].String,p:[$n[1].Graph]},{a:2,n:"ToGraph6",is:!0,t:8,pi:[{n:"w",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ToGraph6$1",rt:$n[0].String,p:[$n[2].List$1(System.Int32)]},{a:1,n:"ASCII",is:!0,t:4,rt:$n[0].String,sn:"ASCII"}]}});$m($n[19].MoreEnumerable,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Batch",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1}],tpc:1,tprm:["TSource"],sn:"Batch$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Object)),p:[$n[2].IEnumerable$1(System.Object),$n[0].Int32]},{a:2,n:"Batch",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1},{n:"resultSelector",pt:Function,ps:2}],tpc:2,tprm:["TSource","TResult"],sn:"Batch",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[0].Int32,Function]},{a:1,n:"BatchImpl",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1},{n:"resultSelector",pt:Function,ps:2}],tpc:2,tprm:["TSource","TResult"],sn:"BatchImpl",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[0].Int32,Function]},{a:2,n:"Index",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0}],tpc:1,tprm:["TSource"],sn:"Index",rt:$n[2].IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Object)),p:[$n[2].IEnumerable$1(System.Object)]},{a:2,n:"Index",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"startIndex",pt:$n[0].Int32,ps:1}],tpc:1,tprm:["TSource"],sn:"Index$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Int32,System.Object)),p:[$n[2].IEnumerable$1(System.Object),$n[0].Int32]},{a:2,n:"Prepend",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"value",pt:System.Object,ps:1}],tpc:1,tprm:["TSource"],sn:"Prepend",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),System.Object]}]}});$m($n[1].Ascii85,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:1,n:"AppendChar",t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0},{n:"c",pt:$n[0].Char,ps:1}],sn:"AppendChar",rt:$n[0].Void,p:[$n[3].StringBuilder,$n[0].Char]},{a:1,n:"AppendString",t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0},{n:"s",pt:$n[0].String,ps:1}],sn:"AppendString",rt:$n[0].Void,p:[$n[3].StringBuilder,$n[0].String]},{a:2,n:"Decode",t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"Decode",rt:$n[0].Array.type(System.Byte),p:[$n[0].String]},{a:1,n:"DecodeBlock",t:8,sn:"DecodeBlock",rt:$n[0].Void},{a:1,n:"DecodeBlock",t:8,pi:[{n:"bytes",pt:$n[0].Int32,ps:0}],sn:"DecodeBlock$1",rt:$n[0].Void,p:[$n[0].Int32]},{a:2,n:"Encode",t:8,pi:[{n:"ba",pt:$n[0].Array.type(System.Byte),ps:0}],sn:"Encode",rt:$n[0].String,p:[$n[0].Array.type(System.Byte)]},{a:1,n:"EncodeBlock",t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0}],sn:"EncodeBlock$1",rt:$n[0].Void,p:[$n[3].StringBuilder]},{a:1,n:"EncodeBlock",t:8,pi:[{n:"count",pt:$n[0].Int32,ps:0},{n:"sb",pt:$n[3].StringBuilder,ps:1}],sn:"EncodeBlock",rt:$n[0].Void,p:[$n[0].Int32,$n[3].StringBuilder]},{a:2,n:"EnforceMarks",t:4,rt:$n[0].Boolean,sn:"EnforceMarks"},{a:2,n:"LineLength",t:4,rt:$n[0].Int32,sn:"LineLength"},{a:2,n:"PrefixMark",t:4,rt:$n[0].String,sn:"PrefixMark"},{a:2,n:"SuffixMark",t:4,rt:$n[0].String,sn:"SuffixMark"},{a:1,n:"_asciiOffset",is:!0,t:4,rt:$n[0].Int32,sn:"_asciiOffset"},{a:1,n:"_decodedBlock",t:4,rt:$n[0].Array.type(System.Byte),sn:"_decodedBlock"},{a:1,n:"_encodedBlock",t:4,rt:$n[0].Array.type(System.Byte),sn:"_encodedBlock"},{a:1,n:"_linePos",t:4,rt:$n[0].Int32,sn:"_linePos"},{a:1,n:"_tuple",t:4,rt:$n[0].UInt32,sn:"_tuple"},{a:1,n:"pow85",t:4,rt:$n[0].Array.type(System.UInt32),sn:"pow85"}]}});$m($n[1].Edge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[1].SerializationEdge,$n[2].List$1(Graphs.Vertex)],pi:[{n:"e",pt:$n[1].SerializationEdge,ps:0},{n:"vertices",pt:$n[2].List$1(Graphs.Vertex),ps:1}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Vertex,$n[1].Vertex],pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1}],sn:"$ctor1"},{a:2,n:".ctor",t:1,p:[$n[1].Vertex,$n[1].Vertex,$n[1].Edge.Orientations],pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1},{n:"orientation",pt:$n[1].Edge.Orientations,ps:2}],sn:"$ctor2"},{a:2,n:"Hit",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"Hit",rt:$n[0].Boolean,p:[$n[0].Double,$n[0].Double]},{a:1,n:"LocalToGlobal",t:8,pi:[{n:"local",pt:$n[1].Vector,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"LocalToGlobal",rt:$n[4].Box,p:[$n[1].Vector,$n[0].Int32,$n[0].Int32]},{a:2,n:"Meets",t:8,pi:[{n:"other",pt:$n[1].Edge,ps:0}],sn:"Meets",rt:$n[0].Boolean,p:[$n[1].Edge]},{a:2,n:"Paint",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"Paint",rt:$n[0].Void,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]},{a:4,n:"RotateIndex",t:8,sn:"RotateIndex",rt:$n[0].Void},{a:4,n:"ToggleIndex",t:8,sn:"ToggleIndex",rt:$n[0].Void},{a:1,n:"UpdateStyle",t:8,sn:"UpdateStyle",rt:$n[0].Void},{a:2,n:"Color",t:16,rt:$n[4].ARGB,g:{a:2,n:"get_Color",t:8,rt:$n[4].ARGB,fg:"Color"},s:{a:2,n:"set_Color",t:8,p:[$n[4].ARGB],rt:$n[0].Void,fs:"Color"},fn:"Color"},{a:2,n:"IndexAngle",t:16,rt:$n[0].Double,g:{a:2,n:"get_IndexAngle",t:8,rt:$n[0].Double,fg:"IndexAngle"},s:{a:2,n:"set_IndexAngle",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"IndexAngle"},fn:"IndexAngle"},{a:2,n:"IsSelected",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsSelected",t:8,rt:$n[0].Boolean,fg:"IsSelected"},s:{a:2,n:"set_IsSelected",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsSelected"},fn:"IsSelected"},{a:2,n:"Label",t:16,rt:$n[0].String,g:{a:2,n:"get_Label",t:8,rt:$n[0].String,fg:"Label"},s:{a:2,n:"set_Label",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Label"},fn:"Label"},{a:2,n:"Multiplicity",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Multiplicity",t:8,rt:$n[0].Int32,fg:"Multiplicity"},s:{a:2,n:"set_Multiplicity",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Multiplicity"},fn:"Multiplicity"},{a:2,n:"Orientation",t:16,rt:$n[1].Edge.Orientations,g:{a:2,n:"get_Orientation",t:8,rt:$n[1].Edge.Orientations,fg:"Orientation"},s:{a:2,n:"set_Orientation",t:8,p:[$n[1].Edge.Orientations],rt:$n[0].Void,fs:"Orientation"},fn:"Orientation"},{a:2,n:"ParentIndex",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ParentIndex",t:8,rt:$n[0].Int32,fg:"ParentIndex"},s:{a:2,n:"set_ParentIndex",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ParentIndex"},fn:"ParentIndex"},{a:2,n:"Style",t:16,rt:$n[0].String,g:{a:2,n:"get_Style",t:8,rt:$n[0].String,fg:"Style"},s:{a:2,n:"set_Style",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Style"},fn:"Style"},{a:2,n:"Thickness",t:16,rt:$n[0].Single,g:{a:2,n:"get_Thickness",t:8,rt:$n[0].Single,fg:"Thickness"},s:{a:2,n:"set_Thickness",t:8,p:[$n[0].Single],rt:$n[0].Void,fs:"Thickness"},fn:"Thickness"},{a:2,n:"V1",t:16,rt:$n[1].Vertex,g:{a:2,n:"get_V1",t:8,rt:$n[1].Vertex,fg:"V1"},s:{a:2,n:"set_V1",t:8,p:[$n[1].Vertex],rt:$n[0].Void,fs:"V1"},fn:"V1"},{a:2,n:"V2",t:16,rt:$n[1].Vertex,g:{a:2,n:"get_V2",t:8,rt:$n[1].Vertex,fg:"V2"},s:{a:2,n:"set_V2",t:8,p:[$n[1].Vertex],rt:$n[0].Void,fs:"V2"},fn:"V2"},{a:1,n:"IndexBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"IndexBrushColor",ro:!0},{a:1,n:"IndexFont",is:!0,t:4,rt:$n[4].Font,sn:"IndexFont",ro:!0},{a:1,n:"LabelBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"LabelBrushColor",ro:!0},{a:1,n:"LabelFont",is:!0,t:4,rt:$n[4].Font,sn:"LabelFont",ro:!0},{a:1,n:"_Color",t:4,rt:$n[4].ARGB,sn:"_Color"},{a:1,n:"_IsSelected",t:4,rt:$n[0].Boolean,sn:"_IsSelected"},{a:1,n:"_Multiplicity",t:4,rt:$n[0].Int32,sn:"_Multiplicity"},{a:1,n:"_Orientation",t:4,rt:$n[1].Edge.Orientations,sn:"_Orientation"},{a:1,n:"_V1",t:4,rt:$n[1].Vertex,sn:"_V1"},{a:1,n:"_V2",t:4,rt:$n[1].Vertex,sn:"_V2"},{a:1,n:"_penColor",t:4,rt:$n[4].ARGB,sn:"_penColor"},{a:1,n:"_showIndex",t:4,rt:$n[0].Boolean,sn:"_showIndex"},{a:1,n:"_style",t:4,rt:$n[0].String,sn:"_style"},{a:1,n:"_thickness",t:4,rt:$n[0].Single,sn:"_thickness"}]}});$m($n[1].Edge.Orientations,function(){return{td:$n[1].Edge,att:258,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Backward",is:!0,t:4,rt:$n[1].Edge.Orientations,sn:"Backward"},{a:2,n:"Forward",is:!0,t:4,rt:$n[1].Edge.Orientations,sn:"Forward"},{a:2,n:"None",is:!0,t:4,rt:$n[1].Edge.Orientations,sn:"None"}]}});$m($n[1].Graph,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].SerializationGraph],pi:[{n:"g",pt:$n[1].SerializationGraph,ps:0}],sn:"$ctor2"},{a:2,n:".ctor",t:1,p:[$n[2].IEnumerable$1(Graphs.Vertex),$n[2].IEnumerable$1(Graphs.Edge)],pi:[{n:"vertices",pt:$n[2].IEnumerable$1(Graphs.Vertex),ps:0},{n:"edges",pt:$n[2].IEnumerable$1(Graphs.Edge),ps:1}],sn:"$ctor3"},{a:2,n:".ctor",t:1,p:[$n[5].Graph,$n[2].List$1(Graphs.Vector),$n[0].Boolean],pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"position",pt:$n[2].List$1(Graphs.Vector),ps:1},{n:"directed",dv:!0,o:!0,pt:$n[0].Boolean,ps:2}],sn:"$ctor1"},{a:1,n:"AddEdge",t:8,pi:[{n:"e",pt:$n[1].Edge,ps:0}],sn:"AddEdge$2",rt:$n[0].Void,p:[$n[1].Edge]},{a:2,n:"AddEdge",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1},{n:"multiplicity",dv:1,o:!0,pt:$n[0].Int32,ps:2}],sn:"AddEdge$1",rt:$n[0].Boolean,p:[$n[1].Vertex,$n[1].Vertex,$n[0].Int32]},{a:2,n:"AddEdge",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1},{n:"orientation",pt:$n[1].Edge.Orientations,ps:2},{n:"multiplicity",dv:1,o:!0,pt:$n[0].Int32,ps:3},{n:"thickness",dv:3,o:!0,pt:$n[0].Single,ps:4},{n:"style",dv:"",o:!0,pt:$n[0].String,ps:5},{n:"label",dv:"",o:!0,pt:$n[0].String,ps:6}],sn:"AddEdge",rt:$n[0].Boolean,p:[$n[1].Vertex,$n[1].Vertex,$n[1].Edge.Orientations,$n[0].Int32,$n[0].Single,$n[0].String,$n[0].String]},{a:2,n:"AddVertex",t:8,pi:[{n:"v",pt:$n[1].Vertex,ps:0}],sn:"AddVertex",rt:$n[0].Boolean,p:[$n[1].Vertex]},{a:2,n:"Clone",t:8,sn:"Clone",rt:$n[1].Graph},{a:2,n:"DisjointUnion",t:8,pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"DisjointUnion",rt:$n[0].Void,p:[$n[1].Graph]},{a:2,n:"EdgeExists",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1}],sn:"EdgeExists",rt:$n[0].Boolean,p:[$n[1].Vertex,$n[1].Vertex]},{a:2,n:"EdgeExists",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1},{n:"edge",out:!0,pt:$n[1].Edge,ps:2}],sn:"EdgeExists$1",rt:$n[0].Boolean,p:[$n[1].Vertex,$n[1].Vertex,$n[1].Edge]},{a:2,n:"FindNeighbors",t:8,pi:[{n:"v",pt:$n[1].Vertex,ps:0}],sn:"FindNeighbors",rt:$n[2].List$1(Graphs.Vertex),p:[$n[1].Vertex]},{a:2,n:"GetEdge",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1}],sn:"GetEdge",rt:$n[1].Edge,p:[$n[1].Vertex,$n[1].Vertex]},{a:2,n:"GetEdgeWeights",t:8,sn:"GetEdgeWeights",rt:$n[2].List$1(System.Int32)},{a:2,n:"HitTest",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"HitTest",rt:$n[1].IHittable,p:[$n[0].Double,$n[0].Double]},{a:2,n:"InducedSubgraph",t:8,pi:[{n:"vertices",pt:$n[2].List$1(Graphs.Vertex),ps:0}],sn:"InducedSubgraph",rt:$n[1].Graph,p:[$n[2].List$1(Graphs.Vertex)]},{a:2,n:"ModifyOrientation",t:8,pi:[{n:"edgeWeights",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ModifyOrientation",rt:$n[0].Void,p:[$n[2].List$1(System.Int32)]},{a:2,n:"Paint",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"Paint",rt:$n[0].Void,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]},{a:2,n:"RemoveEdge",t:8,pi:[{n:"v1",pt:$n[1].Vertex,ps:0},{n:"v2",pt:$n[1].Vertex,ps:1}],sn:"RemoveEdge",rt:$n[0].Boolean,p:[$n[1].Vertex,$n[1].Vertex]},{a:2,n:"RemoveVertex",t:8,pi:[{n:"v",pt:$n[1].Vertex,ps:0}],sn:"RemoveVertex",rt:$n[0].Boolean,p:[$n[1].Vertex]},{a:2,n:"SelectEdges",t:8,pi:[{n:"edges",pt:$n[2].IEnumerable$1(Graphs.Edge),ps:0},{n:"symmetricDifference",pt:$n[0].Boolean,ps:1}],sn:"SelectEdges",rt:$n[0].Void,p:[$n[2].IEnumerable$1(Graphs.Edge),$n[0].Boolean]},{a:2,n:"SelectObjects",t:8,pi:[{n:"selectionPoints",pt:$n[2].List$1(GraphicsLayer.Box),ps:0},{n:"symmetricDifference",pt:$n[0].Boolean,ps:1}],sn:"SelectObjects",rt:$n[0].Void,p:[$n[2].List$1(GraphicsLayer.Box),$n[0].Boolean]},{a:2,n:"SelectVertices",t:8,pi:[{n:"vertices",pt:$n[2].IEnumerable$1(Graphs.Vertex),ps:0},{n:"symmetricDifference",pt:$n[0].Boolean,ps:1}],sn:"SelectVertices",rt:$n[0].Void,p:[$n[2].IEnumerable$1(Graphs.Vertex),$n[0].Boolean]},{a:2,n:"ToggleEdgeIndices",t:8,sn:"ToggleEdgeIndices",rt:$n[0].Void},{a:2,n:"ToggleVertexIndices",t:8,sn:"ToggleVertexIndices",rt:$n[0].Void},{a:2,n:"Translate",t:8,pi:[{n:"offset",pt:$n[1].Vector,ps:0}],sn:"Translate",rt:$n[0].Void,p:[$n[1].Vector]},{a:2,n:"UnselectAll",t:8,sn:"UnselectAll",rt:$n[0].Void},{a:2,n:"UnselectAllEdges",t:8,sn:"UnselectAllEdges",rt:$n[0].Void},{a:2,n:"UnselectAllVertices",t:8,sn:"UnselectAllVertices",rt:$n[0].Void},{a:2,n:"BoundingRectangle",t:16,rt:$n[4].Box,g:{a:2,n:"get_BoundingRectangle",t:8,rt:$n[4].Box,fg:"BoundingRectangle"},fn:"BoundingRectangle"},{a:2,n:"Edges",t:16,rt:$n[2].List$1(Graphs.Edge),g:{a:2,n:"get_Edges",t:8,rt:$n[2].List$1(Graphs.Edge),fg:"Edges"},fn:"Edges"},{a:2,n:"IsDirected",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsDirected",t:8,rt:$n[0].Boolean,fg:"IsDirected"},fn:"IsDirected"},{a:2,n:"Name",t:16,rt:$n[0].String,g:{a:2,n:"get_Name",t:8,rt:$n[0].String,fg:"Name"},s:{a:2,n:"set_Name",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Name"},fn:"Name"},{a:2,n:"ParametersDirty",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_ParametersDirty",t:8,rt:$n[0].Boolean,fg:"ParametersDirty"},s:{a:2,n:"set_ParametersDirty",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"ParametersDirty"},fn:"ParametersDirty"},{a:2,n:"SelectedBoundingRectangle",t:16,rt:$n[4].Box,g:{a:2,n:"get_SelectedBoundingRectangle",t:8,rt:$n[4].Box,fg:"SelectedBoundingRectangle"},fn:"SelectedBoundingRectangle"},{a:2,n:"SelectedEdges",t:16,rt:$n[2].List$1(Graphs.Edge),g:{a:2,n:"get_SelectedEdges",t:8,rt:$n[2].List$1(Graphs.Edge),fg:"SelectedEdges"},fn:"SelectedEdges"},{a:2,n:"SelectedItems",t:16,rt:$n[2].List$1(Graphs.IHittable),g:{a:2,n:"get_SelectedItems",t:8,rt:$n[2].List$1(Graphs.IHittable),fg:"SelectedItems"},fn:"SelectedItems"},{a:2,n:"SelectedVertices",t:16,rt:$n[2].List$1(Graphs.Vertex),g:{a:2,n:"get_SelectedVertices",t:8,rt:$n[2].List$1(Graphs.Vertex),fg:"SelectedVertices"},fn:"SelectedVertices"},{a:2,n:"Vertices",t:16,rt:$n[2].List$1(Graphs.Vertex),g:{a:2,n:"get_Vertices",t:8,rt:$n[2].List$1(Graphs.Vertex),fg:"Vertices"},fn:"Vertices"},{a:2,n:"EdgeWeightExtension",is:!0,t:4,rt:$n[0].String,sn:"EdgeWeightExtension"},{a:2,n:"GraphExtension",is:!0,t:4,rt:$n[0].String,sn:"GraphExtension"},{a:1,n:"_FileName",t:4,rt:$n[0].String,sn:"_FileName"},{a:1,n:"_ModifyListsToken",t:4,rt:$n[0].Object,sn:"_ModifyListsToken"},{a:1,n:"_edges",t:4,rt:$n[2].List$1(Graphs.Edge),sn:"_edges"},{a:1,n:"_showEdgeIndices",t:4,rt:$n[0].Boolean,sn:"_showEdgeIndices"},{a:1,n:"_showVertexIndices",t:4,rt:$n[0].Boolean,sn:"_showVertexIndices"},{a:1,n:"_vertices",t:4,rt:$n[2].List$1(Graphs.Vertex),sn:"_vertices"}]}});$m($n[1].GraphCanvas,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[1].Graph,Function],pi:[{n:"graph",pt:$n[1].Graph,ps:0},{n:"secondaryConverter",dv:null,o:!0,pt:Function,ps:1}],sn:"ctor"},{a:2,n:"DoClearLabels",t:8,pi:[{n:"s",dv:"",o:!0,pt:$n[0].String,ps:0},{n:"vertices",dv:null,o:!0,pt:$n[2].IEnumerable$1(System.Int32),ps:1}],sn:"DoClearLabels",rt:$n[0].Void,p:[$n[0].String,$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"DoComplement",t:8,sn:"DoComplement",rt:$n[0].Void},{a:2,n:"DoContractSelectedSubgraph",t:8,sn:"DoContractSelectedSubgraph",rt:$n[0].Void},{a:2,n:"DoCopy",t:8,pi:[{n:"verbose",dv:!1,o:!0,pt:$n[0].Boolean,ps:0}],sn:"DoCopy",rt:$n[0].String,p:[$n[0].Boolean]},{a:2,n:"DoCut",t:8,sn:"DoCut",rt:$n[0].Void},{a:2,n:"DoDegreeLabeling",t:8,sn:"DoDegreeLabeling",rt:$n[0].Void},{a:2,n:"DoDelete",t:8,sn:"DoDelete",rt:$n[0].Void},{a:2,n:"DoInDegreeLabeling",t:8,sn:"DoInDegreeLabeling",rt:$n[0].Void},{a:2,n:"DoIndexLabeling",t:8,sn:"DoIndexLabeling",rt:$n[0].Void},{a:2,n:"DoLineGraph",t:8,sn:"DoLineGraph",rt:$n[1].Graph},{a:2,n:"DoOutDegreeLabeling",t:8,sn:"DoOutDegreeLabeling",rt:$n[0].Void},{a:2,n:"DoOutDegreePlusOneLabeling",t:8,sn:"DoOutDegreePlusOneLabeling",rt:$n[0].Void},{a:2,n:"DoPaste",t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"DoPaste",rt:$n[0].Void,p:[$n[0].String]},{a:2,n:"DoRedo",t:8,sn:"DoRedo",rt:$n[0].Boolean},{a:2,n:"DoReverseSelectedEdges",t:8,sn:"DoReverseSelectedEdges",rt:$n[0].Void},{a:2,n:"DoRotateSelectedEdges",t:8,sn:"DoRotateSelectedEdges",rt:$n[0].Void},{a:2,n:"DoSnapToGrid",t:8,sn:"DoSnapToGrid",rt:$n[0].Void},{a:2,n:"DoSquare",t:8,sn:"DoSquare",rt:$n[1].Graph},{a:2,n:"DoUndo",t:8,sn:"DoUndo",rt:$n[0].Boolean},{a:2,n:"DoZoom",t:8,pi:[{n:"amount",pt:$n[0].Int32,ps:0},{n:"location",pt:$n[4].Box,ps:1}],sn:"DoZoom",rt:$n[0].Void,p:[$n[0].Int32,$n[4].Box]},{a:2,n:"DoZoomFit",t:8,sn:"DoZoomFit",rt:$n[0].Void},{a:1,n:"GetHit",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"GetHit",rt:$n[1].IHittable,p:[$n[0].Double,$n[0].Double]},{a:2,n:"GraphChanged",t:8,sn:"GraphChanged",rt:$n[0].Void},{a:2,n:"Invalidate",t:8,sn:"Invalidate",rt:$n[0].Void},{a:1,n:"ObeyHistory",t:8,sn:"ObeyHistory",rt:$n[0].Void},{a:2,n:"OnMouseDoubleClick",t:8,pi:[{n:"X",pt:$n[0].Double,ps:0},{n:"Y",pt:$n[0].Double,ps:1},{n:"button",pt:$n[4].MouseButton,ps:2}],sn:"OnMouseDoubleClick",rt:$n[0].Void,p:[$n[0].Double,$n[0].Double,$n[4].MouseButton]},{a:2,n:"OnMouseDown",t:8,pi:[{n:"X",pt:$n[0].Double,ps:0},{n:"Y",pt:$n[0].Double,ps:1},{n:"button",pt:$n[4].MouseButton,ps:2}],sn:"OnMouseDown",rt:$n[0].Void,p:[$n[0].Double,$n[0].Double,$n[4].MouseButton]},{a:2,n:"OnMouseMove",t:8,pi:[{n:"X",pt:$n[0].Double,ps:0},{n:"Y",pt:$n[0].Double,ps:1}],sn:"OnMouseMove",rt:$n[0].Void,p:[$n[0].Double,$n[0].Double]},{a:2,n:"OnMouseUp",t:8,pi:[{n:"X",pt:$n[0].Double,ps:0},{n:"Y",pt:$n[0].Double,ps:1},{n:"button",pt:$n[4].MouseButton,ps:2}],sn:"OnMouseUp",rt:$n[0].Void,p:[$n[0].Double,$n[0].Double,$n[4].MouseButton]},{a:2,n:"Paint",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"Paint",rt:$n[0].Void,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]},{a:1,n:"PaintGrid",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0}],sn:"PaintGrid",rt:$n[0].Void,p:[$n[4].IGraphics]},{a:2,n:"RotateEdgeIndices",t:8,sn:"RotateEdgeIndices",rt:$n[0].Void},{a:2,n:"RotateVertexIndices",t:8,sn:"RotateVertexIndices",rt:$n[0].Void},{a:2,n:"Save",t:8,pi:[{n:"name",pt:$n[0].String,ps:0}],sn:"Save",rt:$n[0].String,p:[$n[0].String]},{a:2,n:"SetIndex",t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"SetIndex",rt:$n[0].Void,p:[$n[0].Int32]},{a:2,n:"SetZoomDelta",t:8,pi:[{n:"d",pt:$n[0].Double,ps:0}],sn:"SetZoomDelta",rt:$n[0].Void,p:[$n[0].Double]},{a:2,n:"ToggleEdgeIndices",t:8,sn:"ToggleEdgeIndices",rt:$n[0].Void},{a:2,n:"ToggleVertexIndices",t:8,sn:"ToggleVertexIndices",rt:$n[0].Void},{a:2,n:"ZoomFitNextPaint",t:8,sn:"ZoomFitNextPaint",rt:$n[0].Void},{a:2,n:"Canvas",t:16,rt:$n[4].ICanvas,g:{a:2,n:"get_Canvas",t:8,rt:$n[4].ICanvas,fg:"Canvas"},s:{a:2,n:"set_Canvas",t:8,p:[$n[4].ICanvas],rt:$n[0].Void,fs:"Canvas"},fn:"Canvas"},{a:2,n:"DrawGrid",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_DrawGrid",t:8,rt:$n[0].Boolean,fg:"DrawGrid"},s:{a:2,n:"set_DrawGrid",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"DrawGrid"},fn:"DrawGrid"},{a:2,n:"Graph",t:16,rt:$n[1].Graph,g:{a:2,n:"get_Graph",t:8,rt:$n[1].Graph,fg:"Graph"},fn:"Graph"},{a:2,n:"GridStep",t:16,rt:$n[0].Double,g:{a:2,n:"get_GridStep",t:8,rt:$n[0].Double,fg:"GridStep"},s:{a:2,n:"set_GridStep",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"GridStep"},fn:"GridStep"},{a:2,n:"HasPainted",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_HasPainted",t:8,rt:$n[0].Boolean,fg:"HasPainted"},s:{a:1,n:"set_HasPainted",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"HasPainted"},fn:"HasPainted"},{a:1,n:"Height",t:16,rt:$n[0].Int32,g:{a:1,n:"get_Height",t:8,rt:$n[0].Int32,fg:"Height"},s:{a:1,n:"set_Height",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Height"},fn:"Height"},{a:2,n:"IsEmpty",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsEmpty",t:8,rt:$n[0].Boolean,fg:"IsEmpty"},fn:"IsEmpty"},{a:2,n:"SnapToGrid",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_SnapToGrid",t:8,rt:$n[0].Boolean,fg:"SnapToGrid"},s:{a:2,n:"set_SnapToGrid",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"SnapToGrid"},fn:"SnapToGrid"},{a:2,n:"ViewScale",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ViewScale",t:8,rt:$n[0].Int32,fg:"ViewScale"},s:{a:3,n:"set_ViewScale",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ViewScale"},fn:"ViewScale"},{a:1,n:"Width",t:16,rt:$n[0].Int32,g:{a:1,n:"get_Width",t:8,rt:$n[0].Int32,fg:"Width"},s:{a:1,n:"set_Width",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Width"},fn:"Width"},{a:1,n:"Zoom",t:16,rt:$n[0].Double,s:{a:1,n:"set_Zoom",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Zoom"},fn:"Zoom"},{a:1,n:"BackgroundColor",is:!0,t:4,rt:$n[4].ARGB,sn:"BackgroundColor",ro:!0},{a:2,n:"BaseViewScale",t:4,rt:$n[0].Int32,sn:"BaseViewScale"},{a:1,n:"DefaultBaseViewScale",is:!0,t:4,rt:$n[0].Int32,sn:"DefaultBaseViewScale"},{a:1,n:"GridPenColor",is:!0,t:4,rt:$n[4].ARGB,sn:"GridPenColor",ro:!0},{a:1,n:"MaxZoomScale",is:!0,t:4,rt:$n[0].Int32,sn:"MaxZoomScale"},{a:1,n:"MinZoom",t:4,rt:$n[0].Double,sn:"MinZoom"},{a:1,n:"SelectionPenColor",is:!0,t:4,rt:$n[4].ARGB,sn:"SelectionPenColor",ro:!0},{a:1,n:"ZoomDelta",t:4,rt:$n[0].Double,sn:"ZoomDelta"},{a:1,n:"_DraggedVertex",t:4,rt:$n[1].Vertex,sn:"_DraggedVertex"},{a:1,n:"_SelectionPointsToken",t:4,rt:$n[0].Object,sn:"_SelectionPointsToken"},{a:1,n:"_Zoom",t:4,rt:$n[0].Double,sn:"_Zoom"},{a:1,n:"_canvas",t:4,rt:$n[4].ICanvas,sn:"_canvas"},{a:1,n:"_controlWasDown",t:4,rt:$n[0].Boolean,sn:"_controlWasDown"},{a:1,n:"_drawGrid",t:4,rt:$n[0].Boolean,sn:"_drawGrid"},{a:1,n:"_graph",t:4,rt:$n[1].Graph,sn:"_graph"},{a:2,n:"_gridStep",is:!0,t:4,rt:$n[0].Double,sn:"_gridStep"},{a:1,n:"_history",t:4,rt:$n[2].List$1(Graphs.GraphCanvas.HistoricalGraph),sn:"_history"},{a:1,n:"_historyIndex",t:4,rt:$n[0].Int32,sn:"_historyIndex"},{a:1,n:"_secondaryConverter",t:4,rt:Function,sn:"_secondaryConverter"},{a:1,n:"_selectionPoints",t:4,rt:$n[2].List$1(GraphicsLayer.Box),sn:"_selectionPoints"},{a:1,n:"_snapToGrid",t:4,rt:$n[0].Boolean,sn:"_snapToGrid"},{a:1,n:"_state",t:4,rt:$n[1].GraphCanvas.States,sn:"_state"},{a:1,n:"_viewScale",t:4,rt:$n[0].Int32,sn:"_viewScale"},{a:1,n:"_zoomFitNextPaint",t:4,rt:$n[0].Boolean,sn:"_zoomFitNextPaint"},{a:2,n:"GraphModified",t:2,ad:{a:2,n:"add_GraphModified",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addGraphModified",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_GraphModified",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeGraphModified",rt:$n[0].Void,p:[Function]}},{a:2,n:"NameModified",t:2,ad:{a:2,n:"add_NameModified",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addNameModified",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_NameModified",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeNameModified",rt:$n[0].Void,p:[Function]}}]}});$m($n[1].GraphCanvas.States,function(){return{td:$n[1].GraphCanvas,att:259,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"DraggingSelectedVertices",is:!0,t:4,rt:$n[1].GraphCanvas.States,sn:"DraggingSelectedVertices"},{a:2,n:"DraggingSelectionRegion",is:!0,t:4,rt:$n[1].GraphCanvas.States,sn:"DraggingSelectionRegion"},{a:2,n:"DraggingVertex",is:!0,t:4,rt:$n[1].GraphCanvas.States,sn:"DraggingVertex"},{a:2,n:"Idle",is:!0,t:4,rt:$n[1].GraphCanvas.States,sn:"Idle"}]}});$m($n[1].GraphCanvas.HistoricalGraph,function(){return{td:$n[1].GraphCanvas,att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Graph",t:16,rt:$n[1].Graph,g:{a:2,n:"get_Graph",t:8,rt:$n[1].Graph,fg:"Graph"},s:{a:2,n:"set_Graph",t:8,p:[$n[1].Graph],rt:$n[0].Void,fs:"Graph"},fn:"Graph"},{a:2,n:"ViewScale",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ViewScale",t:8,rt:$n[0].Int32,fg:"ViewScale"},s:{a:2,n:"set_ViewScale",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ViewScale"},fn:"ViewScale"},{a:2,n:"Zoom",t:16,rt:$n[0].Double,g:{a:2,n:"get_Zoom",t:8,rt:$n[0].Double,fg:"Zoom"},s:{a:2,n:"set_Zoom",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Zoom"},fn:"Zoom"}]}});$m($n[1].IHittable,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Hit",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"Graphs$IHittable$Hit",rt:$n[0].Boolean,p:[$n[0].Double,$n[0].Double]}]}});$m($n[1].PolygonContainer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].IList$1(GraphicsLayer.Box)],pi:[{n:"dots",pt:$n[2].IList$1(GraphicsLayer.Box),ps:0}],sn:"ctor"},{a:2,n:"Contains",t:8,pi:[{n:"dot",pt:$n[4].Box,ps:0}],sn:"Contains",rt:$n[0].Boolean,p:[$n[4].Box]},{a:1,n:"_boundingBox",t:4,rt:$n[4].Box,sn:"_boundingBox"},{a:1,n:"_dots",t:4,rt:$n[2].IList$1(GraphicsLayer.Box),sn:"_dots"}]}});$m($n[1].SerializationVector,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Vector],pi:[{n:"v",pt:$n[1].Vector,ps:0}],sn:"$ctor1"},{a:2,n:"X",t:4,rt:$n[0].Double,sn:"X"},{a:2,n:"Y",t:4,rt:$n[0].Double,sn:"Y"}]}});$m($n[1].SerializationVertex,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Vertex],pi:[{n:"v",pt:$n[1].Vertex,ps:0}],sn:"$ctor1"},{a:2,n:"Label",t:4,rt:$n[0].String,sn:"Label"},{a:2,n:"Location",t:4,rt:$n[1].SerializationVector,sn:"Location"},{a:2,n:"Padding",t:4,rt:$n[0].Single,sn:"Padding"},{a:2,n:"Style",t:4,rt:$n[0].String,sn:"Style"}]}});$m($n[1].SerializationEdge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Edge,$n[2].List$1(Graphs.Vertex)],pi:[{n:"e",pt:$n[1].Edge,ps:0},{n:"vertices",pt:$n[2].List$1(Graphs.Vertex),ps:1}],sn:"$ctor1"},{a:2,n:"IndexV1",t:4,rt:$n[0].Int32,sn:"IndexV1"},{a:2,n:"IndexV2",t:4,rt:$n[0].Int32,sn:"IndexV2"},{a:2,n:"Label",t:4,rt:$n[0].String,sn:"Label"},{a:2,n:"Multiplicity",t:4,rt:$n[0].Int32,sn:"Multiplicity"},{a:2,n:"Orientation",t:4,rt:$n[1].Edge.Orientations,sn:"Orientation"},{a:2,n:"Style",t:4,rt:$n[0].String,sn:"Style"},{a:2,n:"Thickness",t:4,rt:$n[0].Single,sn:"Thickness"}]}});$m($n[1].SerializationGraph,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Graph],pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"$ctor1"},{a:2,n:"Edges",t:4,rt:$n[2].List$1(Graphs.SerializationEdge),sn:"Edges"},{a:2,n:"Name",t:4,rt:$n[0].String,sn:"Name"},{a:2,n:"Vertices",t:4,rt:$n[2].List$1(Graphs.SerializationVertex),sn:"Vertices"}]}});$m($n[1].Utility,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"HaveIntersection",is:!0,t:8,pi:[{n:"start1",pt:$n[4].Box,ps:0},{n:"end1",pt:$n[4].Box,ps:1},{n:"start2",pt:$n[4].Box,ps:2},{n:"end2",pt:$n[4].Box,ps:3}],sn:"HaveIntersection",rt:$n[0].Boolean,p:[$n[4].Box,$n[4].Box,$n[4].Box,$n[4].Box]},{a:2,n:"PolarToRectangular",is:!0,t:8,pi:[{n:"r",pt:$n[0].Double,ps:0},{n:"theta",pt:$n[0].Double,ps:1}],sn:"PolarToRectangular",rt:$n[1].Vector,p:[$n[0].Double,$n[0].Double]},{a:2,n:"RotateAroundPoint",is:!0,t:8,pi:[{n:"v",pt:$n[4].Box,ps:0},{n:"center",pt:$n[4].Box,ps:1},{n:"angle",pt:$n[0].Double,ps:2}],sn:"RotateAroundPoint",rt:$n[4].Box,p:[$n[4].Box,$n[4].Box,$n[0].Double]},{a:2,n:"RotateAroundPoint",is:!0,t:8,pi:[{n:"v",pt:$n[1].Vector,ps:0},{n:"center",pt:$n[1].Vector,ps:1},{n:"angle",pt:$n[0].Double,ps:2}],sn:"RotateAroundPoint$1",rt:$n[1].Vector,p:[$n[1].Vector,$n[1].Vector,$n[0].Double]}]}});$m($n[1].Vector,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Double,$n[0].Double],pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"ctor"},{a:2,n:"Distance",t:8,pi:[{n:"vector",pt:$n[1].Vector,ps:0}],sn:"Distance",rt:$n[0].Double,p:[$n[1].Vector]},{a:2,n:"Dot",t:8,pi:[{n:"vector",pt:$n[1].Vector,ps:0}],sn:"Dot",rt:$n[0].Double,p:[$n[1].Vector]},{a:2,n:"Equals",t:8,pi:[{n:"v",pt:$n[1].Vector,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[1].Vector]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"Normalize",t:8,sn:"Normalize",rt:$n[0].Boolean},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"op_Addition",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[1].Vector,ps:1}],sn:"op_Addition",rt:$n[1].Vector,p:[$n[1].Vector,$n[1].Vector]},{a:2,n:"op_Equality",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[1].Vector,ps:1}],sn:"op_Equality",rt:$n[0].Boolean,p:[$n[1].Vector,$n[1].Vector]},{a:2,n:"op_Implicit",is:!0,t:8,pi:[{n:"v",pt:$n[1].Vector,ps:0}],sn:"op_Implicit",rt:$n[4].Box,p:[$n[1].Vector]},{a:2,n:"op_Inequality",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[1].Vector,ps:1}],sn:"op_Inequality",rt:$n[0].Boolean,p:[$n[1].Vector,$n[1].Vector]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[0].Double,ps:1}],sn:"op_Multiply",rt:$n[1].Vector,p:[$n[1].Vector,$n[0].Double]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[0].Int32,ps:1}],sn:"op_Multiply$1",rt:$n[1].Vector,p:[$n[1].Vector,$n[0].Int32]},{a:2,n:"op_Subtraction",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0},{n:"b",pt:$n[1].Vector,ps:1}],sn:"op_Subtraction",rt:$n[1].Vector,p:[$n[1].Vector,$n[1].Vector]},{a:2,n:"op_UnaryNegation",is:!0,t:8,pi:[{n:"a",pt:$n[1].Vector,ps:0}],sn:"op_UnaryNegation",rt:$n[1].Vector,p:[$n[1].Vector]},{a:2,n:"Length",t:16,rt:$n[0].Double,g:{a:2,n:"get_Length",t:8,rt:$n[0].Double,fg:"Length"},fn:"Length"},{a:2,n:"X",t:16,rt:$n[0].Double,g:{a:2,n:"get_X",t:8,rt:$n[0].Double,fg:"X"},s:{a:2,n:"set_X",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"X"},fn:"X"},{a:2,n:"Y",t:16,rt:$n[0].Double,g:{a:2,n:"get_Y",t:8,rt:$n[0].Double,fg:"Y"},s:{a:2,n:"set_Y",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Y"},fn:"Y"},{a:1,n:"_X",t:4,rt:$n[0].Double,sn:"_X"},{a:1,n:"_Y",t:4,rt:$n[0].Double,sn:"_Y"}]}});$m($n[1].Vertex,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[1].SerializationVertex],pi:[{n:"v",pt:$n[1].SerializationVertex,ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Vector],pi:[{n:"v",pt:$n[1].Vector,ps:0}],sn:"$ctor1"},{a:2,n:".ctor",t:1,p:[$n[1].Vector,$n[0].String],pi:[{n:"v",pt:$n[1].Vector,ps:0},{n:"label",pt:$n[0].String,ps:1}],sn:"$ctor2"},{a:2,n:".ctor",t:1,p:[$n[0].Double,$n[0].Double],pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"$ctor3"},{a:2,n:".ctor",t:1,p:[$n[0].Double,$n[0].Double,$n[0].String],pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1},{n:"label",pt:$n[0].String,ps:2}],sn:"$ctor4"},{a:2,n:"ComputeBounds",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"ComputeBounds",rt:$n[4].Box,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]},{a:2,n:"Hit",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"Hit",rt:$n[0].Boolean,p:[$n[0].Double,$n[0].Double]},{v:!0,a:2,n:"Paint",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"Paint",rt:$n[0].Void,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]},{a:4,n:"RotateIndex",t:8,sn:"RotateIndex",rt:$n[0].Void},{a:4,n:"ToggleIndex",t:8,sn:"ToggleIndex",rt:$n[0].Void},{a:2,n:"Color",t:16,rt:$n[4].ARGB,g:{a:2,n:"get_Color",t:8,rt:$n[4].ARGB,fg:"Color"},s:{a:2,n:"set_Color",t:8,p:[$n[4].ARGB],rt:$n[0].Void,fs:"Color"},fn:"Color"},{a:2,n:"DragOffset",t:16,rt:$n[4].Box,g:{a:2,n:"get_DragOffset",t:8,rt:$n[4].Box,fg:"DragOffset"},s:{a:2,n:"set_DragOffset",t:8,p:[$n[4].Box],rt:$n[0].Void,fs:"DragOffset"},fn:"DragOffset"},{a:2,n:"IndexAngle",t:16,rt:$n[0].Double,g:{a:2,n:"get_IndexAngle",t:8,rt:$n[0].Double,fg:"IndexAngle"},s:{a:2,n:"set_IndexAngle",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"IndexAngle"},fn:"IndexAngle"},{a:2,n:"IsSelected",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsSelected",t:8,rt:$n[0].Boolean,fg:"IsSelected"},s:{a:2,n:"set_IsSelected",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsSelected"},fn:"IsSelected"},{a:2,n:"IsUniversal",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsUniversal",t:8,rt:$n[0].Boolean,fg:"IsUniversal"},s:{a:2,n:"set_IsUniversal",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsUniversal"},fn:"IsUniversal"},{a:2,n:"Label",t:16,rt:$n[0].String,g:{a:2,n:"get_Label",t:8,rt:$n[0].String,fg:"Label"},s:{a:2,n:"set_Label",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Label"},fn:"Label"},{a:2,n:"LocalBounds",t:16,rt:$n[4].Box,g:{a:2,n:"get_LocalBounds",t:8,rt:$n[4].Box,fg:"LocalBounds"},fn:"LocalBounds"},{a:2,n:"Location",t:16,rt:$n[1].Vector,g:{a:2,n:"get_Location",t:8,rt:$n[1].Vector,fg:"Location"},s:{a:2,n:"set_Location",t:8,p:[$n[1].Vector],rt:$n[0].Void,fs:"Location"},fn:"Location"},{a:2,n:"Modifier",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Modifier",t:8,rt:$n[0].Int32,fg:"Modifier"},s:{a:2,n:"set_Modifier",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Modifier"},fn:"Modifier"},{a:2,n:"Padding",t:16,rt:$n[0].Single,g:{a:2,n:"get_Padding",t:8,rt:$n[0].Single,fg:"Padding"},s:{a:2,n:"set_Padding",t:8,p:[$n[0].Single],rt:$n[0].Void,fs:"Padding"},fn:"Padding"},{a:2,n:"ParentIndex",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ParentIndex",t:8,rt:$n[0].Int32,fg:"ParentIndex"},s:{a:2,n:"set_ParentIndex",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ParentIndex"},fn:"ParentIndex"},{a:2,n:"Style",t:16,rt:$n[0].String,g:{a:2,n:"get_Style",t:8,rt:$n[0].String,fg:"Style"},s:{a:2,n:"set_Style",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Style"},fn:"Style"},{a:2,n:"X",t:16,rt:$n[0].Double,g:{a:2,n:"get_X",t:8,rt:$n[0].Double,fg:"X"},s:{a:2,n:"set_X",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"X"},fn:"X"},{a:2,n:"Y",t:16,rt:$n[0].Double,g:{a:2,n:"get_Y",t:8,rt:$n[0].Double,fg:"Y"},s:{a:2,n:"set_Y",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Y"},fn:"Y"},{a:1,n:"BoundaryPenColor",is:!0,t:4,rt:$n[4].ARGB,sn:"BoundaryPenColor",ro:!0},{a:1,n:"BoundarySelectedPenColor",is:!0,t:4,rt:$n[4].ARGB,sn:"BoundarySelectedPenColor",ro:!0},{a:1,n:"BoundarySelectedPenWidth",is:!0,t:4,rt:$n[0].Int32,sn:"BoundarySelectedPenWidth",ro:!0},{a:2,n:"DefaultFillBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"DefaultFillBrushColor",ro:!0},{a:1,n:"IndexBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"IndexBrushColor",ro:!0},{a:1,n:"IndexFont",is:!0,t:4,rt:$n[4].Font,sn:"IndexFont",ro:!0},{a:1,n:"LabelBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"LabelBrushColor",ro:!0},{a:1,n:"LabelFont",is:!0,t:4,rt:$n[4].Font,sn:"LabelFont",ro:!0},{a:1,n:"SelectedFillBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"SelectedFillBrushColor",ro:!0},{a:1,n:"UniversalVertexFillBrushColor",is:!0,t:4,rt:$n[4].ARGB,sn:"UniversalVertexFillBrushColor",ro:!0},{a:1,n:"_DragOffset",t:4,rt:$n[4].Box,sn:"_DragOffset"},{a:1,n:"_IsSelected",t:4,rt:$n[0].Boolean,sn:"_IsSelected"},{a:1,n:"_LocalBounds",t:4,rt:$n[4].Box,sn:"_LocalBounds"},{a:1,n:"_Location",t:4,rt:$n[1].Vector,sn:"_Location"},{a:1,n:"_Style",t:4,rt:$n[0].String,sn:"_Style"},{a:1,n:"_label",t:4,rt:$n[0].String,sn:"_label"},{a:1,n:"_padding",t:4,rt:$n[0].Single,sn:"_padding"},{a:1,n:"_showIndex",t:4,rt:$n[0].Boolean,sn:"_showIndex"}]}});$m($n[4].ARGB,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Int32,$n[0].Int32],pi:[{n:"r",pt:$n[0].Int32,ps:0},{n:"g",pt:$n[0].Int32,ps:1},{n:"b",pt:$n[0].Int32,ps:2}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],pi:[{n:"a",pt:$n[0].Int32,ps:0},{n:"r",pt:$n[0].Int32,ps:1},{n:"g",pt:$n[0].Int32,ps:2},{n:"b",pt:$n[0].Int32,ps:3}],sn:"$ctor1"},{a:2,n:"BasicPalette",is:!0,t:8,pi:[{n:"q",pt:$n[0].Int32,ps:0}],sn:"BasicPalette",rt:$n[4].ARGB,p:[$n[0].Int32]},{a:2,n:"FromFractional",is:!0,t:8,pi:[{n:"a",pt:$n[0].Double,ps:0},{n:"r",pt:$n[0].Double,ps:1},{n:"g",pt:$n[0].Double,ps:2},{n:"b",pt:$n[0].Double,ps:3}],sn:"FromFractional",rt:$n[4].ARGB,p:[$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double]},{a:2,n:"FromHSL",is:!0,t:8,pi:[{n:"h",pt:$n[0].Double,ps:0},{n:"s",pt:$n[0].Double,ps:1},{n:"l",pt:$n[0].Double,ps:2}],sn:"FromHSL",rt:$n[4].ARGB,p:[$n[0].Double,$n[0].Double,$n[0].Double]},{a:1,n:"HueToRgb",is:!0,t:8,pi:[{n:"p",pt:$n[0].Double,ps:0},{n:"q",pt:$n[0].Double,ps:1},{n:"t",pt:$n[0].Double,ps:2}],sn:"HueToRgb",rt:$n[0].Double,p:[$n[0].Double,$n[0].Double,$n[0].Double]},{a:1,n:"ReverseBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"ReverseBits",rt:$n[0].UInt32,p:[$n[0].UInt32]},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"A",t:16,rt:$n[0].Int32,g:{a:2,n:"get_A",t:8,rt:$n[0].Int32,fg:"A"},s:{a:2,n:"set_A",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"A"},fn:"A"},{a:2,n:"B",t:16,rt:$n[0].Int32,g:{a:2,n:"get_B",t:8,rt:$n[0].Int32,fg:"B"},s:{a:2,n:"set_B",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"B"},fn:"B"},{a:2,n:"G",t:16,rt:$n[0].Int32,g:{a:2,n:"get_G",t:8,rt:$n[0].Int32,fg:"G"},s:{a:2,n:"set_G",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"G"},fn:"G"},{a:2,n:"R",t:16,rt:$n[0].Int32,g:{a:2,n:"get_R",t:8,rt:$n[0].Int32,fg:"R"},s:{a:2,n:"set_R",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"R"},fn:"R"}]}});$m($n[4].Box,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Double,$n[0].Double],pi:[{n:"left",pt:$n[0].Double,ps:0},{n:"top",pt:$n[0].Double,ps:1}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double],pi:[{n:"left",pt:$n[0].Double,ps:0},{n:"top",pt:$n[0].Double,ps:1},{n:"width",pt:$n[0].Double,ps:2},{n:"height",pt:$n[0].Double,ps:3}],sn:"$ctor1"},{a:2,n:"Contains",t:8,pi:[{n:"box",pt:$n[4].Box,ps:0}],sn:"Contains",rt:$n[0].Boolean,p:[$n[4].Box]},{a:2,n:"Contains",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"Contains$1",rt:$n[0].Boolean,p:[$n[0].Double,$n[0].Double]},{a:2,n:"Inflate",t:8,pi:[{n:"x",pt:$n[0].Double,ps:0},{n:"y",pt:$n[0].Double,ps:1}],sn:"Inflate",rt:$n[0].Void,p:[$n[0].Double,$n[0].Double]},{a:2,n:"Bottom",t:16,rt:$n[0].Double,g:{a:2,n:"get_Bottom",t:8,rt:$n[0].Double,fg:"Bottom"},fn:"Bottom"},{a:2,n:"Height",t:16,rt:$n[0].Double,g:{a:2,n:"get_Height",t:8,rt:$n[0].Double,fg:"Height"},s:{a:2,n:"set_Height",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Height"},fn:"Height"},{a:2,n:"Left",t:16,rt:$n[0].Double,g:{a:2,n:"get_Left",t:8,rt:$n[0].Double,fg:"Left"},s:{a:2,n:"set_Left",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Left"},fn:"Left"},{a:2,n:"Right",t:16,rt:$n[0].Double,g:{a:2,n:"get_Right",t:8,rt:$n[0].Double,fg:"Right"},fn:"Right"},{a:2,n:"Top",t:16,rt:$n[0].Double,g:{a:2,n:"get_Top",t:8,rt:$n[0].Double,fg:"Top"},s:{a:2,n:"set_Top",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Top"},fn:"Top"},{a:2,n:"Width",t:16,rt:$n[0].Double,g:{a:2,n:"get_Width",t:8,rt:$n[0].Double,fg:"Width"},s:{a:2,n:"set_Width",t:8,p:[$n[0].Double],rt:$n[0].Void,fs:"Width"},fn:"Width"},{a:2,n:"X",t:16,rt:$n[0].Double,g:{a:2,n:"get_X",t:8,rt:$n[0].Double,fg:"X"},fn:"X"},{a:2,n:"Y",t:16,rt:$n[0].Double,g:{a:2,n:"get_Y",t:8,rt:$n[0].Double,fg:"Y"},fn:"Y"},{a:2,n:"Empty",is:!0,t:4,rt:$n[4].Box,sn:"Empty",ro:!0}]}});$m($n[4].MouseButton,function(){return{att:257,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Left",is:!0,t:4,rt:$n[4].MouseButton,sn:"Left"},{a:2,n:"Middle",is:!0,t:4,rt:$n[4].MouseButton,sn:"Middle"},{a:2,n:"Right",is:!0,t:4,rt:$n[4].MouseButton,sn:"Right"}]}});$m($n[4].Font,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].String,$n[0].Int32],pi:[{n:"name",pt:$n[0].String,ps:0},{n:"size",pt:$n[0].Int32,ps:1}],sn:"ctor"},{a:2,n:"Name",t:16,rt:$n[0].String,g:{a:2,n:"get_Name",t:8,rt:$n[0].String,fg:"Name"},s:{a:2,n:"set_Name",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Name"},fn:"Name"},{a:2,n:"Size",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Size",t:8,rt:$n[0].Int32,fg:"Size"},s:{a:2,n:"set_Size",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Size"},fn:"Size"}]}});$m($n[4].ICanvas,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"GetClipboardText",t:8,sn:"GraphicsLayer$ICanvas$GetClipboardText",rt:$n[0].String},{ab:!0,a:2,n:"Invalidate",t:8,sn:"GraphicsLayer$ICanvas$Invalidate",rt:$n[0].Void},{ab:!0,a:2,n:"SetClipboardText",t:8,pi:[{n:"text",pt:$n[0].String,ps:0}],sn:"GraphicsLayer$ICanvas$SetClipboardText",rt:$n[0].Void,p:[$n[0].String]},{ab:!0,a:2,n:"IsControlKeyDown",t:16,rt:$n[0].Boolean,g:{ab:!0,a:2,n:"get_IsControlKeyDown",t:8,rt:$n[0].Boolean,fg:"GraphicsLayer$ICanvas$IsControlKeyDown"},s:{ab:!0,a:1,n:"set_IsControlKeyDown",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"GraphicsLayer$ICanvas$IsControlKeyDown"},fn:"GraphicsLayer$ICanvas$IsControlKeyDown"},{ab:!0,a:2,n:"SelectedObjects",t:16,rt:$n[2].IEnumerable$1(System.Object),s:{ab:!0,a:2,n:"set_SelectedObjects",t:8,p:[$n[2].IEnumerable$1(System.Object)],rt:$n[0].Void,fs:"GraphicsLayer$ICanvas$SelectedObjects"},fn:"GraphicsLayer$ICanvas$SelectedObjects"},{ab:!0,a:2,n:"Title",t:16,rt:$n[0].String,s:{ab:!0,a:2,n:"set_Title",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"GraphicsLayer$ICanvas$Title"},fn:"GraphicsLayer$ICanvas$Title"}]}});$m($n[4].IGraphics,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Clear",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0}],sn:"GraphicsLayer$IGraphics$Clear",rt:$n[0].Void,p:[$n[4].ARGB]},{ab:!0,a:2,n:"DrawEllipse",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"bounds",pt:$n[4].Box,ps:1},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:2}],sn:"GraphicsLayer$IGraphics$DrawEllipse",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box,$n[0].Double]},{ab:!0,a:2,n:"DrawLine",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"p1",pt:$n[4].Box,ps:1},{n:"p2",pt:$n[4].Box,ps:2},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:3}],sn:"GraphicsLayer$IGraphics$DrawLine",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box,$n[4].Box,$n[0].Double]},{ab:!0,a:2,n:"DrawLine",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"x1",pt:$n[0].Double,ps:1},{n:"y1",pt:$n[0].Double,ps:2},{n:"x2",pt:$n[0].Double,ps:3},{n:"y2",pt:$n[0].Double,ps:4},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:5}],sn:"GraphicsLayer$IGraphics$DrawLine$1",rt:$n[0].Void,p:[$n[4].ARGB,$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double]},{ab:!0,a:2,n:"DrawLines",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"points",pt:$n[2].IEnumerable$1(GraphicsLayer.Box),ps:1},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:2}],sn:"GraphicsLayer$IGraphics$DrawLines",rt:$n[0].Void,p:[$n[4].ARGB,$n[2].IEnumerable$1(GraphicsLayer.Box),$n[0].Double]},{ab:!0,a:2,n:"DrawString",t:8,pi:[{n:"s",pt:$n[0].String,ps:0},{n:"font",pt:$n[4].Font,ps:1},{n:"argb",pt:$n[4].ARGB,ps:2},{n:"bounds",pt:$n[4].Box,ps:3}],sn:"GraphicsLayer$IGraphics$DrawString",rt:$n[0].Void,p:[$n[0].String,$n[4].Font,$n[4].ARGB,$n[4].Box]},{ab:!0,a:2,n:"FillEllipse",t:8,pi:[{n:"color",pt:$n[4].ARGB,ps:0},{n:"bounds",pt:$n[4].Box,ps:1}],sn:"GraphicsLayer$IGraphics$FillEllipse",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box]},{ab:!0,a:2,n:"FillPolygon",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"points",pt:$n[2].IEnumerable$1(GraphicsLayer.Box),ps:1}],sn:"GraphicsLayer$IGraphics$FillPolygon",rt:$n[0].Void,p:[$n[4].ARGB,$n[2].IEnumerable$1(GraphicsLayer.Box)]},{ab:!0,a:2,n:"MeasureString",t:8,pi:[{n:"s",pt:$n[0].String,ps:0},{n:"font",pt:$n[4].Font,ps:1}],sn:"GraphicsLayer$IGraphics$MeasureString",rt:$n[4].Box,p:[$n[0].String,$n[4].Font]}]}});$m($n[4].IPaintable,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Paint",t:8,pi:[{n:"g",pt:$n[4].IGraphics,ps:0},{n:"width",pt:$n[0].Int32,ps:1},{n:"height",pt:$n[0].Int32,ps:2}],sn:"GraphicsLayer$IPaintable$Paint",rt:$n[0].Void,p:[$n[4].IGraphics,$n[0].Int32,$n[0].Int32]}]}});$m($n[4].IProduceMouseEvents,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"MouseButtonDoubleClicked",t:2,ad:{ab:!0,a:2,n:"add_MouseButtonDoubleClicked",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$addMouseButtonDoubleClicked",rt:$n[0].Void,p:[Function]},r:{ab:!0,a:2,n:"remove_MouseButtonDoubleClicked",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$removeMouseButtonDoubleClicked",rt:$n[0].Void,p:[Function]}},{ab:!0,a:2,n:"MouseButtonDown",t:2,ad:{ab:!0,a:2,n:"add_MouseButtonDown",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$addMouseButtonDown",rt:$n[0].Void,p:[Function]},r:{ab:!0,a:2,n:"remove_MouseButtonDown",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$removeMouseButtonDown",rt:$n[0].Void,p:[Function]}},{ab:!0,a:2,n:"MouseButtonUp",t:2,ad:{ab:!0,a:2,n:"add_MouseButtonUp",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$addMouseButtonUp",rt:$n[0].Void,p:[Function]},r:{ab:!0,a:2,n:"remove_MouseButtonUp",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$removeMouseButtonUp",rt:$n[0].Void,p:[Function]}},{ab:!0,a:2,n:"MouseMoved",t:2,ad:{ab:!0,a:2,n:"add_MouseMoved",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$addMouseMoved",rt:$n[0].Void,p:[Function]},r:{ab:!0,a:2,n:"remove_MouseMoved",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"GraphicsLayer$IProduceMouseEvents$removeMouseMoved",rt:$n[0].Void,p:[Function]}}]}});$m($n[6].Assignments_ulong,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt64)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt64),ps:0},{n:"assignment",pt:$n[0].Array.type(System.UInt64),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt64)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].UInt64,ps:4},{n:"care",pt:$n[0].UInt64,ps:5},{n:"dontCare",pt:$n[0].UInt64,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt64)),p:[$n[2].List$1(System.UInt64),$n[0].Array.type(System.UInt64),System.Array.type(System.Collections.Generic.List$1(System.UInt64)),$n[0].Int32,$n[0].UInt64,$n[0].UInt64,$n[0].UInt64]},{a:2,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1},{n:"countEstimate",dv:2048,o:!0,pt:$n[0].Int32,ps:2}],sn:"Generate",rt:$n[2].List$1(System.Array.type(System.UInt64)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt64),ps:0},{n:"assignments",pt:$n[2].List$1(System.Array.type(System.UInt64)),ps:1},{n:"assignment",pt:$n[0].Array.type(System.UInt64),ps:2},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt64)),ps:3},{n:"i",pt:$n[0].Int32,ps:4},{n:"last",pt:$n[0].UInt64,ps:5},{n:"care",pt:$n[0].UInt64,ps:6},{n:"dontCare",pt:$n[0].UInt64,ps:7}],sn:"Generate$1",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64),$n[2].List$1(System.Array.type(System.UInt64)),$n[0].Array.type(System.UInt64),System.Array.type(System.Collections.Generic.List$1(System.UInt64)),$n[0].Int32,$n[0].UInt64,$n[0].UInt64,$n[0].UInt64]}]}});$m($n[6].Assignments_long,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.Int64)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.Int64),ps:0},{n:"assignment",pt:$n[0].Array.type(System.Int64),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.Int64)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].Int64,ps:4},{n:"care",pt:$n[0].Int64,ps:5},{n:"dontCare",pt:$n[0].Int64,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.Int64)),p:[$n[2].List$1(System.Int64),$n[0].Array.type(System.Int64),System.Array.type(System.Collections.Generic.List$1(System.Int64)),$n[0].Int32,$n[0].Int64,$n[0].Int64,$n[0].Int64]},{a:2,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1},{n:"countEstimate",dv:2048,o:!0,pt:$n[0].Int32,ps:2}],sn:"Generate",rt:$n[2].List$1(System.Array.type(System.Int64)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.Int64),ps:0},{n:"assignments",pt:$n[2].List$1(System.Array.type(System.Int64)),ps:1},{n:"assignment",pt:$n[0].Array.type(System.Int64),ps:2},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.Int64)),ps:3},{n:"i",pt:$n[0].Int32,ps:4},{n:"last",pt:$n[0].Int64,ps:5},{n:"care",pt:$n[0].Int64,ps:6},{n:"dontCare",pt:$n[0].Int64,ps:7}],sn:"Generate$1",rt:$n[0].Void,p:[$n[2].List$1(System.Int64),$n[2].List$1(System.Array.type(System.Int64)),$n[0].Array.type(System.Int64),System.Array.type(System.Collections.Generic.List$1(System.Int64)),$n[0].Int32,$n[0].Int64,$n[0].Int64,$n[0].Int64]}]}});$m($n[6].Assignments_uint,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt32)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt32),ps:0},{n:"assignment",pt:$n[0].Array.type(System.UInt32),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt32)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].UInt32,ps:4},{n:"care",pt:$n[0].UInt32,ps:5},{n:"dontCare",pt:$n[0].UInt32,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt32)),p:[$n[2].List$1(System.UInt32),$n[0].Array.type(System.UInt32),System.Array.type(System.Collections.Generic.List$1(System.UInt32)),$n[0].Int32,$n[0].UInt32,$n[0].UInt32,$n[0].UInt32]},{a:2,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1},{n:"countEstimate",dv:2048,o:!0,pt:$n[0].Int32,ps:2}],sn:"Generate",rt:$n[2].List$1(System.Array.type(System.UInt32)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt32),ps:0},{n:"assignments",pt:$n[2].List$1(System.Array.type(System.UInt32)),ps:1},{n:"assignment",pt:$n[0].Array.type(System.UInt32),ps:2},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt32)),ps:3},{n:"i",pt:$n[0].Int32,ps:4},{n:"last",pt:$n[0].UInt32,ps:5},{n:"care",pt:$n[0].UInt32,ps:6},{n:"dontCare",pt:$n[0].UInt32,ps:7}],sn:"Generate$1",rt:$n[0].Void,p:[$n[2].List$1(System.UInt32),$n[2].List$1(System.Array.type(System.UInt32)),$n[0].Array.type(System.UInt32),System.Array.type(System.Collections.Generic.List$1(System.UInt32)),$n[0].Int32,$n[0].UInt32,$n[0].UInt32,$n[0].UInt32]}]}});$m($n[6].Assignments_ushort,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt16)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt16),ps:0},{n:"assignment",pt:$n[0].Array.type(System.UInt16),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt16)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].UInt16,ps:4},{n:"care",pt:$n[0].UInt16,ps:5},{n:"dontCare",pt:$n[0].UInt16,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt16)),p:[$n[2].List$1(System.UInt16),$n[0].Array.type(System.UInt16),System.Array.type(System.Collections.Generic.List$1(System.UInt16)),$n[0].Int32,$n[0].UInt16,$n[0].UInt16,$n[0].UInt16]},{a:2,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1},{n:"countEstimate",dv:2048,o:!0,pt:$n[0].Int32,ps:2}],sn:"Generate",rt:$n[2].List$1(System.Array.type(System.UInt16)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt16),ps:0},{n:"assignments",pt:$n[2].List$1(System.Array.type(System.UInt16)),ps:1},{n:"assignment",pt:$n[0].Array.type(System.UInt16),ps:2},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt16)),ps:3},{n:"i",pt:$n[0].Int32,ps:4},{n:"last",pt:$n[0].UInt16,ps:5},{n:"care",pt:$n[0].UInt16,ps:6},{n:"dontCare",pt:$n[0].UInt16,ps:7}],sn:"Generate$1",rt:$n[0].Void,p:[$n[2].List$1(System.UInt16),$n[2].List$1(System.Array.type(System.UInt16)),$n[0].Array.type(System.UInt16),System.Array.type(System.Collections.Generic.List$1(System.UInt16)),$n[0].Int32,$n[0].UInt16,$n[0].UInt16,$n[0].UInt16]}]}});$m($n[6].Assignments_byte,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.Byte)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.Byte),ps:0},{n:"assignment",pt:$n[0].Array.type(System.Byte),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.Byte)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].Byte,ps:4},{n:"care",pt:$n[0].Byte,ps:5},{n:"dontCare",pt:$n[0].Byte,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.Byte)),p:[$n[2].List$1(System.Byte),$n[0].Array.type(System.Byte),System.Array.type(System.Collections.Generic.List$1(System.Byte)),$n[0].Int32,$n[0].Byte,$n[0].Byte,$n[0].Byte]},{a:2,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1},{n:"countEstimate",dv:2048,o:!0,pt:$n[0].Int32,ps:2}],sn:"Generate",rt:$n[2].List$1(System.Array.type(System.Byte)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"Generate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.Byte),ps:0},{n:"assignments",pt:$n[2].List$1(System.Array.type(System.Byte)),ps:1},{n:"assignment",pt:$n[0].Array.type(System.Byte),ps:2},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.Byte)),ps:3},{n:"i",pt:$n[0].Int32,ps:4},{n:"last",pt:$n[0].Byte,ps:5},{n:"care",pt:$n[0].Byte,ps:6},{n:"dontCare",pt:$n[0].Byte,ps:7}],sn:"Generate$1",rt:$n[0].Void,p:[$n[2].List$1(System.Byte),$n[2].List$1(System.Array.type(System.Byte)),$n[0].Array.type(System.Byte),System.Array.type(System.Collections.Generic.List$1(System.Byte)),$n[0].Int32,$n[0].Byte,$n[0].Byte,$n[0].Byte]}]}});$m($n[6].BitGraph_long,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32)],pi:[{n:"edgeWeights",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Array.type(System.Int64)],pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"neighborhood",pt:$n[0].Array.type(System.Int64),ps:1}],sn:"$ctor1"},{a:1,n:"BronKerbosch",t:8,pi:[{n:"P",pt:$n[0].Int64,ps:0},{n:"R",pt:$n[0].Int64,ps:1},{n:"X",pt:$n[0].Int64,ps:2},{n:"list",pt:$n[2].List$1(System.Int64),ps:3}],sn:"BronKerbosch",rt:$n[0].Void,p:[$n[0].Int64,$n[0].Int64,$n[0].Int64,$n[2].List$1(System.Int64)]},{a:2,n:"Degree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"Degree",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"DegreeInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"DegreeInSet",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].Int64]},{a:2,n:"IsIndependent",t:8,pi:[{n:"set",pt:$n[0].Int64,ps:0}],sn:"IsIndependent",rt:$n[0].Boolean,p:[$n[0].Int64]},{a:2,n:"MaximalIndependentSubsets",t:8,pi:[{n:"set",pt:$n[0].Int64,ps:0}],sn:"MaximalIndependentSubsets",rt:$n[2].IEnumerable$1(System.Int64),p:[$n[0].Int64]},{a:2,n:"NeighborsInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"NeighborsInSet",rt:$n[0].Int64,p:[$n[0].Int32,$n[0].Int64]},{a:1,n:"TomitaPivot",t:8,pi:[{n:"P",pt:$n[0].Int64,ps:0},{n:"X",pt:$n[0].Int64,ps:1}],sn:"TomitaPivot",rt:$n[0].Int32,p:[$n[0].Int64,$n[0].Int64]},{a:2,n:"N",t:16,rt:$n[0].Int32,g:{a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"N"},fn:"N"},{a:2,n:"Vertices",t:16,rt:$n[2].IEnumerable$1(System.Int32),g:{a:2,n:"get_Vertices",t:8,rt:$n[2].IEnumerable$1(System.Int32),fg:"Vertices"},fn:"Vertices"},{a:1,n:"_neighborhood",t:4,rt:$n[0].Array.type(System.Int64),sn:"_neighborhood"},{a:1,n:"_vertices",t:4,rt:$n[0].Array.type(System.Int32),sn:"_vertices"}]}});$m($n[6].BitGraph_uint,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32)],pi:[{n:"edgeWeights",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Array.type(System.UInt32)],pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"neighborhood",pt:$n[0].Array.type(System.UInt32),ps:1}],sn:"$ctor1"},{a:1,n:"BronKerbosch",t:8,pi:[{n:"P",pt:$n[0].UInt32,ps:0},{n:"R",pt:$n[0].UInt32,ps:1},{n:"X",pt:$n[0].UInt32,ps:2},{n:"list",pt:$n[2].List$1(System.UInt32),ps:3}],sn:"BronKerbosch",rt:$n[0].Void,p:[$n[0].UInt32,$n[0].UInt32,$n[0].UInt32,$n[2].List$1(System.UInt32)]},{a:2,n:"Degree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"Degree",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"DegreeInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].UInt32,ps:1}],sn:"DegreeInSet",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].UInt32]},{a:2,n:"IsIndependent",t:8,pi:[{n:"set",pt:$n[0].UInt32,ps:0}],sn:"IsIndependent",rt:$n[0].Boolean,p:[$n[0].UInt32]},{a:2,n:"MaximalIndependentSubsets",t:8,pi:[{n:"set",pt:$n[0].UInt32,ps:0}],sn:"MaximalIndependentSubsets",rt:$n[2].IEnumerable$1(System.UInt32),p:[$n[0].UInt32]},{a:2,n:"NeighborsInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].UInt32,ps:1}],sn:"NeighborsInSet",rt:$n[0].UInt32,p:[$n[0].Int32,$n[0].UInt32]},{a:1,n:"TomitaPivot",t:8,pi:[{n:"P",pt:$n[0].UInt32,ps:0},{n:"X",pt:$n[0].UInt32,ps:1}],sn:"TomitaPivot",rt:$n[0].Int32,p:[$n[0].UInt32,$n[0].UInt32]},{a:2,n:"N",t:16,rt:$n[0].Int32,g:{a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"N"},fn:"N"},{a:2,n:"Vertices",t:16,rt:$n[2].IEnumerable$1(System.Int32),g:{a:2,n:"get_Vertices",t:8,rt:$n[2].IEnumerable$1(System.Int32),fg:"Vertices"},fn:"Vertices"},{a:1,n:"_neighborhood",t:4,rt:$n[0].Array.type(System.UInt32),sn:"_neighborhood"},{a:1,n:"_vertices",t:4,rt:$n[0].Array.type(System.Int32),sn:"_vertices"}]}});$m($n[6].BitOperations,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].Byte,ps:0}],sn:"RightFillToMSB",rt:$n[0].Byte,p:[$n[0].Byte]},{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt16,ps:0}],sn:"RightFillToMSB$1",rt:$n[0].UInt16,p:[$n[0].UInt16]},{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt64,ps:0}],sn:"RightFillToMSB$2",rt:$n[0].UInt64,p:[$n[0].UInt64]},{a:2,n:"To_byte",is:!0,t:8,pi:[{n:"bits",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"To_byte",rt:$n[0].Byte,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"To_ulong",is:!0,t:8,pi:[{n:"bits",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"To_ulong",rt:$n[0].UInt64,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"To_ushort",is:!0,t:8,pi:[{n:"bits",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"To_ushort",rt:$n[0].UInt16,p:[$n[2].IEnumerable$1(System.Int32)]}]}});$m($n[6].BitUsage_uint,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Extract",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"Extract",rt:$n[0].Int32,p:[$n[0].UInt32]},{a:2,n:"GetAndClearLeastSignificantBit",is:!0,t:8,pi:[{n:"x",ref:!0,pt:$n[0].UInt32,ps:0}],sn:"GetAndClearLeastSignificantBit",rt:$n[0].Int32,p:[$n[0].UInt32]},{a:2,n:"LeastSignificantBit",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"LeastSignificantBit",rt:$n[0].Int32,p:[$n[0].UInt32]},{a:2,n:"Or",is:!0,t:8,pi:[{n:"colorGraph",pt:$n[0].Array.type(System.UInt32),ps:0},{n:"offset",pt:$n[0].Int32,ps:1}],sn:"Or",rt:$n[0].UInt32,p:[$n[0].Array.type(System.UInt32),$n[0].Int32]},{a:2,n:"PopulationCount",is:!0,t:8,pi:[{n:"b",pt:$n[0].UInt32,ps:0}],sn:"PopulationCount",rt:$n[0].Int32,p:[$n[0].UInt32]},{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"RightFillToMSB",rt:$n[0].UInt32,p:[$n[0].UInt32]},{a:2,n:"ToSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"ToSet",rt:$n[2].List$1(System.Int32),p:[$n[0].UInt32]},{a:2,n:"To_uint",is:!0,t:8,pi:[{n:"bits",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"To_uint",rt:$n[0].UInt32,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"TrueForAllBitIndices",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0},{n:"predicate",pt:Function,ps:1}],sn:"TrueForAllBitIndices",rt:$n[0].Boolean,p:[$n[0].UInt32,Function]},{a:1,n:"DeBruijnLookup",is:!0,t:4,rt:$n[0].Array.type(System.Int32),sn:"DeBruijnLookup"},{a:1,n:"DeBruijnMultiplier",is:!0,t:4,rt:$n[0].UInt32,sn:"DeBruijnMultiplier"}]}});$m($n[6].BitUsage_long,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Extract",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"Extract",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"GetAndClearLeastSignificantBit",is:!0,t:8,pi:[{n:"x",ref:!0,pt:$n[0].Int64,ps:0}],sn:"GetAndClearLeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"LeastSignificantBit",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"LeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"Or",is:!0,t:8,pi:[{n:"colorGraph",pt:$n[0].Array.type(System.Int64),ps:0},{n:"offset",pt:$n[0].Int32,ps:1}],sn:"Or",rt:$n[0].Int64,p:[$n[0].Array.type(System.Int64),$n[0].Int32]},{a:2,n:"PopulationCount",is:!0,t:8,pi:[{n:"b",pt:$n[0].Int64,ps:0}],sn:"PopulationCount",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"PopulationCountDense",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"PopulationCountDense",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"RightFillToMSB",rt:$n[0].Int64,p:[$n[0].Int64]},{a:2,n:"ToSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"ToSet",rt:$n[2].List$1(System.Int32),p:[$n[0].Int64]},{a:2,n:"To_long",is:!0,t:8,pi:[{n:"bits",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"To_long",rt:$n[0].Int64,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"TrueForAllBitIndices",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"predicate",pt:Function,ps:1}],sn:"TrueForAllBitIndices",rt:$n[0].Boolean,p:[$n[0].Int64,Function]},{a:1,n:"DeBruijnLookup",is:!0,t:4,rt:$n[0].Array.type(System.Int32),sn:"DeBruijnLookup"},{a:1,n:"DeBruijnMultiplier",is:!0,t:4,rt:$n[0].UInt64,sn:"DeBruijnMultiplier"}]}});$m($n[6].BitVectors_ulong,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Decrement",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt64),ps:0},{n:"m",pt:$n[0].UInt64,ps:1}],sn:"Decrement",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64),$n[0].UInt64]},{a:2,n:"FromBitVector",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt64),ps:0}],sn:"FromBitVector",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.UInt64)]},{a:2,n:"GreaterThan",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt64),ps:0},{n:"k",pt:$n[2].List$1(System.UInt64),ps:1}],sn:"GreaterThan",rt:$n[0].UInt64,p:[$n[2].List$1(System.UInt64),$n[2].List$1(System.UInt64)]},{a:2,n:"Increment",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt64),ps:0},{n:"m",pt:$n[0].UInt64,ps:1}],sn:"Increment",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64),$n[0].UInt64]},{a:2,n:"ToBitVector",is:!0,t:8,pi:[{n:"w",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToBitVector",rt:$n[2].List$1(System.UInt64),p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"Zeroes",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt64),ps:0}],sn:"Zeroes",rt:$n[0].UInt64,p:[$n[2].List$1(System.UInt64)]}]}});$m($n[6].BitVectors_long,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Decrement",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Int64),ps:0},{n:"m",pt:$n[0].Int64,ps:1}],sn:"Decrement",rt:$n[0].Void,p:[$n[2].List$1(System.Int64),$n[0].Int64]},{a:2,n:"FromBitVector",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Int64),ps:0}],sn:"FromBitVector",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int64)]},{a:2,n:"GreaterThan",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Int64),ps:0},{n:"k",pt:$n[2].List$1(System.Int64),ps:1}],sn:"GreaterThan",rt:$n[0].Int64,p:[$n[2].List$1(System.Int64),$n[2].List$1(System.Int64)]},{a:2,n:"Increment",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Int64),ps:0},{n:"m",pt:$n[0].Int64,ps:1}],sn:"Increment",rt:$n[0].Void,p:[$n[2].List$1(System.Int64),$n[0].Int64]},{a:2,n:"ToBitVector",is:!0,t:8,pi:[{n:"w",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToBitVector",rt:$n[2].List$1(System.Int64),p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"Zeroes",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Int64),ps:0}],sn:"Zeroes",rt:$n[0].Int64,p:[$n[2].List$1(System.Int64)]}]}});$m($n[6].BitVectors_uint,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Decrement",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt32),ps:0},{n:"m",pt:$n[0].UInt32,ps:1}],sn:"Decrement",rt:$n[0].Void,p:[$n[2].List$1(System.UInt32),$n[0].UInt32]},{a:2,n:"FromBitVector",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt32),ps:0}],sn:"FromBitVector",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.UInt32)]},{a:2,n:"GreaterThan",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt32),ps:0},{n:"k",pt:$n[2].List$1(System.UInt32),ps:1}],sn:"GreaterThan",rt:$n[0].UInt32,p:[$n[2].List$1(System.UInt32),$n[2].List$1(System.UInt32)]},{a:2,n:"Increment",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt32),ps:0},{n:"m",pt:$n[0].UInt32,ps:1}],sn:"Increment",rt:$n[0].Void,p:[$n[2].List$1(System.UInt32),$n[0].UInt32]},{a:2,n:"ToBitVector",is:!0,t:8,pi:[{n:"w",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToBitVector",rt:$n[2].List$1(System.UInt32),p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"Zeroes",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt32),ps:0}],sn:"Zeroes",rt:$n[0].UInt32,p:[$n[2].List$1(System.UInt32)]}]}});$m($n[6].BitVectors_ushort,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Decrement",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt16),ps:0},{n:"m",pt:$n[0].UInt16,ps:1}],sn:"Decrement",rt:$n[0].Void,p:[$n[2].List$1(System.UInt16),$n[0].UInt16]},{a:2,n:"FromBitVector",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt16),ps:0}],sn:"FromBitVector",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.UInt16)]},{a:2,n:"GreaterThan",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt16),ps:0},{n:"k",pt:$n[2].List$1(System.UInt16),ps:1}],sn:"GreaterThan",rt:$n[0].UInt16,p:[$n[2].List$1(System.UInt16),$n[2].List$1(System.UInt16)]},{a:2,n:"Increment",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt16),ps:0},{n:"m",pt:$n[0].UInt16,ps:1}],sn:"Increment",rt:$n[0].Void,p:[$n[2].List$1(System.UInt16),$n[0].UInt16]},{a:2,n:"ToBitVector",is:!0,t:8,pi:[{n:"w",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToBitVector",rt:$n[2].List$1(System.UInt16),p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"Zeroes",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.UInt16),ps:0}],sn:"Zeroes",rt:$n[0].UInt16,p:[$n[2].List$1(System.UInt16)]}]}});$m($n[6].BitVectors_byte,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Decrement",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Byte),ps:0},{n:"m",pt:$n[0].Byte,ps:1}],sn:"Decrement",rt:$n[0].Void,p:[$n[2].List$1(System.Byte),$n[0].Byte]},{a:2,n:"FromBitVector",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Byte),ps:0}],sn:"FromBitVector",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Byte)]},{a:2,n:"GreaterThan",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Byte),ps:0},{n:"k",pt:$n[2].List$1(System.Byte),ps:1}],sn:"GreaterThan",rt:$n[0].Byte,p:[$n[2].List$1(System.Byte),$n[2].List$1(System.Byte)]},{a:2,n:"Increment",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Byte),ps:0},{n:"m",pt:$n[0].Byte,ps:1}],sn:"Increment",rt:$n[0].Void,p:[$n[2].List$1(System.Byte),$n[0].Byte]},{a:2,n:"ToBitVector",is:!0,t:8,pi:[{n:"w",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToBitVector",rt:$n[2].List$1(System.Byte),p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"Zeroes",is:!0,t:8,pi:[{n:"n",pt:$n[2].List$1(System.Byte),ps:0}],sn:"Zeroes",rt:$n[0].Byte,p:[$n[2].List$1(System.Byte)]}]}});$m($n[6].GraphChoosability_uint,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"BeGreedy",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.UInt32),ps:1},{n:"liveVertexBits",ref:!0,pt:$n[0].UInt32,ps:2},{n:"c",pt:$n[0].Int32,ps:3}],sn:"BeGreedy",rt:$n[0].Void,p:[$n[6].IGraph_uint,$n[0].Array.type(System.UInt32),$n[0].UInt32,$n[0].Int32]},{a:2,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.UInt32),ps:1}],sn:"IsChoosable",rt:$n[0].Boolean,p:[$n[6].IGraph_uint,$n[0].Array.type(System.UInt32)]},{a:2,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.UInt32),ps:1},{n:"nodesVisited",out:!0,pt:$n[0].Int64,ps:2},{n:"cacheHits",out:!0,pt:$n[0].Int64,ps:3}],sn:"IsChoosable$1",rt:$n[0].Boolean,p:[$n[6].IGraph_uint,$n[0].Array.type(System.UInt32),$n[0].Int64,$n[0].Int64]},{a:1,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.UInt32),ps:1},{n:"liveVertexBits",pt:$n[0].UInt32,ps:2},{n:"c",pt:$n[0].Int32,ps:3},{n:"cache",pt:$n[2].Dictionary$2(BitLevelGeneration.HashedAssignment_uint,System.Boolean),ps:4},{n:"nodesVisited",ref:!0,pt:$n[0].Int64,ps:5},{n:"cacheHits",ref:!0,pt:$n[0].Int64,ps:6}],sn:"IsChoosable$2",rt:$n[0].Boolean,p:[$n[6].IGraph_uint,$n[0].Array.type(System.UInt32),$n[0].UInt32,$n[0].Int32,$n[2].Dictionary$2(BitLevelGeneration.HashedAssignment_uint,System.Boolean),$n[0].Int64,$n[0].Int64]},{a:2,n:"IsFChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"f",pt:Function,ps:1},{n:"badAssignment",out:!0,pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:2}],sn:"IsFChoosable",rt:$n[0].Boolean,p:[$n[6].IGraph_uint,Function,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"IsFChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_uint,ps:0},{n:"f",pt:Function,ps:1},{n:"badAssignment",out:!0,pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:2},{n:"nodesVisited",out:!0,pt:$n[0].Int64,ps:3},{n:"cacheHits",out:!0,pt:$n[0].Int64,ps:4}],sn:"IsFChoosable$1",rt:$n[0].Boolean,p:[$n[6].IGraph_uint,Function,$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),$n[0].Int64,$n[0].Int64]}]}});$m($n[6].GraphChoosability_long,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"BeGreedy",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_long,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.Int64),ps:1},{n:"liveVertexBits",ref:!0,pt:$n[0].Int64,ps:2},{n:"c",pt:$n[0].Int32,ps:3}],sn:"BeGreedy",rt:$n[0].Void,p:[$n[6].IGraph_long,$n[0].Array.type(System.Int64),$n[0].Int64,$n[0].Int32]},{a:2,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_long,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.Int64),ps:1}],sn:"IsChoosable",rt:$n[0].Boolean,p:[$n[6].IGraph_long,$n[0].Array.type(System.Int64)]},{a:2,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_long,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.Int64),ps:1},{n:"subset",pt:$n[0].Int64,ps:2}],sn:"IsChoosable$1",rt:$n[0].Boolean,p:[$n[6].IGraph_long,$n[0].Array.type(System.Int64),$n[0].Int64]},{a:1,n:"IsChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_long,ps:0},{n:"colorGraph",pt:$n[0].Array.type(System.Int64),ps:1},{n:"liveVertexBits",pt:$n[0].Int64,ps:2},{n:"c",pt:$n[0].Int32,ps:3}],sn:"IsChoosable$2",rt:$n[0].Boolean,p:[$n[6].IGraph_long,$n[0].Array.type(System.Int64),$n[0].Int64,$n[0].Int32]},{a:2,n:"IsFChoosable",is:!0,t:8,pi:[{n:"graph",pt:$n[6].IGraph_long,ps:0},{n:"f",pt:Function,ps:1},{n:"badAssignment",out:!0,pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:2}],sn:"IsFChoosable",rt:$n[0].Boolean,p:[$n[6].IGraph_long,Function,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"IsSubsetTwoColorable",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"IsSubsetTwoColorable",rt:$n[0].Boolean,p:[$n[6].BitGraph_long,$n[0].Int64]}]}});$m($n[6].HashedAssignment_ulong,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt64),$n[0].Int32,$n[0].UInt64],pi:[{n:"assignment",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"index",pt:$n[0].Int32,ps:1},{n:"on",pt:$n[0].UInt64,ps:2}],sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[6].HashedAssignment_ulong,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[6].HashedAssignment_ulong]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"Hash",t:8,pi:[{n:"list",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"length",pt:$n[0].Int32,ps:1}],sn:"Hash",rt:$n[0].Int32,p:[$n[0].Array.type(System.UInt64),$n[0].Int32]},{a:1,n:"_assignment",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_assignment"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"}]}});$m($n[6].HashedAssignment_uint,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt32),$n[0].Int32,$n[0].UInt32],pi:[{n:"assignment",pt:$n[0].Array.type(System.UInt32),ps:0},{n:"index",pt:$n[0].Int32,ps:1},{n:"on",pt:$n[0].UInt32,ps:2}],sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[6].HashedAssignment_uint,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[6].HashedAssignment_uint]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"Hash",t:8,pi:[{n:"list",pt:$n[0].Array.type(System.UInt32),ps:0},{n:"length",pt:$n[0].Int32,ps:1}],sn:"Hash",rt:$n[0].Int32,p:[$n[0].Array.type(System.UInt32),$n[0].Int32]},{a:1,n:"_assignment",t:4,rt:$n[0].Array.type(System.UInt32),sn:"_assignment"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"}]}});$m($n[6].HashedAssignment_ushort,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt16),$n[0].Int32,$n[0].UInt16],pi:[{n:"assignment",pt:$n[0].Array.type(System.UInt16),ps:0},{n:"index",pt:$n[0].Int32,ps:1},{n:"on",pt:$n[0].UInt16,ps:2}],sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[6].HashedAssignment_ushort,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[6].HashedAssignment_ushort]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"Hash",t:8,pi:[{n:"list",pt:$n[0].Array.type(System.UInt16),ps:0},{n:"length",pt:$n[0].Int32,ps:1}],sn:"Hash",rt:$n[0].Int32,p:[$n[0].Array.type(System.UInt16),$n[0].Int32]},{a:1,n:"_assignment",t:4,rt:$n[0].Array.type(System.UInt16),sn:"_assignment"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"}]}});$m($n[6].HashedAssignment_byte,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Byte],pi:[{n:"assignment",pt:$n[0].Array.type(System.Byte),ps:0},{n:"index",pt:$n[0].Int32,ps:1},{n:"on",pt:$n[0].Byte,ps:2}],sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[6].HashedAssignment_byte,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[6].HashedAssignment_byte]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"Hash",t:8,pi:[{n:"list",pt:$n[0].Array.type(System.Byte),ps:0},{n:"length",pt:$n[0].Int32,ps:1}],sn:"Hash",rt:$n[0].Int32,p:[$n[0].Array.type(System.Byte),$n[0].Int32]},{a:1,n:"_assignment",t:4,rt:$n[0].Array.type(System.Byte),sn:"_assignment"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"}]}});$m($n[6].IGraph_uint,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Degree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"BitLevelGeneration$IGraph_uint$Degree",rt:$n[0].Int32,p:[$n[0].Int32]},{ab:!0,a:2,n:"DegreeInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].UInt32,ps:1}],sn:"BitLevelGeneration$IGraph_uint$DegreeInSet",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].UInt32]},{ab:!0,a:2,n:"IsIndependent",t:8,pi:[{n:"set",pt:$n[0].UInt32,ps:0}],sn:"BitLevelGeneration$IGraph_uint$IsIndependent",rt:$n[0].Boolean,p:[$n[0].UInt32]},{ab:!0,a:2,n:"MaximalIndependentSubsets",t:8,pi:[{n:"set",pt:$n[0].UInt32,ps:0}],sn:"BitLevelGeneration$IGraph_uint$MaximalIndependentSubsets",rt:$n[2].IEnumerable$1(System.UInt32),p:[$n[0].UInt32]},{ab:!0,a:2,n:"NeighborsInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].UInt32,ps:1}],sn:"BitLevelGeneration$IGraph_uint$NeighborsInSet",rt:$n[0].UInt32,p:[$n[0].Int32,$n[0].UInt32]},{ab:!0,a:2,n:"N",t:16,rt:$n[0].Int32,g:{ab:!0,a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"BitLevelGeneration$IGraph_uint$N"},s:{ab:!0,a:1,n:"set_N",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"BitLevelGeneration$IGraph_uint$N"},fn:"BitLevelGeneration$IGraph_uint$N"},{ab:!0,a:2,n:"Vertices",t:16,rt:$n[2].IEnumerable$1(System.Int32),g:{ab:!0,a:2,n:"get_Vertices",t:8,rt:$n[2].IEnumerable$1(System.Int32),fg:"BitLevelGeneration$IGraph_uint$Vertices"},s:{ab:!0,a:1,n:"set_Vertices",t:8,p:[$n[2].IEnumerable$1(System.Int32)],rt:$n[0].Void,fs:"BitLevelGeneration$IGraph_uint$Vertices"},fn:"BitLevelGeneration$IGraph_uint$Vertices"}]}});$m($n[6].IGraph_long,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Degree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"BitLevelGeneration$IGraph_long$Degree",rt:$n[0].Int32,p:[$n[0].Int32]},{ab:!0,a:2,n:"DegreeInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"BitLevelGeneration$IGraph_long$DegreeInSet",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].Int64]},{ab:!0,a:2,n:"IsIndependent",t:8,pi:[{n:"set",pt:$n[0].Int64,ps:0}],sn:"BitLevelGeneration$IGraph_long$IsIndependent",rt:$n[0].Boolean,p:[$n[0].Int64]},{ab:!0,a:2,n:"MaximalIndependentSubsets",t:8,pi:[{n:"set",pt:$n[0].Int64,ps:0}],sn:"BitLevelGeneration$IGraph_long$MaximalIndependentSubsets",rt:$n[2].IEnumerable$1(System.Int64),p:[$n[0].Int64]},{ab:!0,a:2,n:"NeighborsInSet",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"BitLevelGeneration$IGraph_long$NeighborsInSet",rt:$n[0].Int64,p:[$n[0].Int32,$n[0].Int64]},{ab:!0,a:2,n:"N",t:16,rt:$n[0].Int32,g:{ab:!0,a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"BitLevelGeneration$IGraph_long$N"},s:{ab:!0,a:1,n:"set_N",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"BitLevelGeneration$IGraph_long$N"},fn:"BitLevelGeneration$IGraph_long$N"},{ab:!0,a:2,n:"Vertices",t:16,rt:$n[2].IEnumerable$1(System.Int32),g:{ab:!0,a:2,n:"get_Vertices",t:8,rt:$n[2].IEnumerable$1(System.Int32),fg:"BitLevelGeneration$IGraph_long$Vertices"},s:{ab:!0,a:1,n:"set_Vertices",t:8,p:[$n[2].IEnumerable$1(System.Int32)],rt:$n[0].Void,fs:"BitLevelGeneration$IGraph_long$Vertices"},fn:"BitLevelGeneration$IGraph_long$Vertices"}]}});$m($n[6].MaximalndependentSetSearching,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"GenerateMaximalIndependentSubsets",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"set",pt:$n[0].Int64,ps:1}],sn:"GenerateMaximalIndependentSubsets",rt:$n[2].List$1(System.Int64),p:[$n[6].BitGraph_long,$n[0].Int64]},{a:1,n:"GenerateMaximalIndependentSubsets",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"bits",pt:$n[0].Array.type(System.Int64),ps:1}],sn:"GenerateMaximalIndependentSubsets$1",rt:$n[2].List$1(System.Int64),p:[$n[6].BitGraph_long,$n[0].Array.type(System.Int64)]},{a:2,n:"Later",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"set",pt:$n[0].Int64,ps:1},{n:"LFMIS",pt:$n[0].Int64,ps:2},{n:"v",pt:$n[0].Int32,ps:3}],sn:"Later",rt:$n[0].Int64,p:[$n[6].BitGraph_long,$n[0].Int64,$n[0].Int64,$n[0].Int32]},{a:2,n:"LexicographicallyFirstContaining",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"set",pt:$n[0].Int64,ps:1},{n:"S",pt:$n[0].Int64,ps:2}],sn:"LexicographicallyFirstContaining",rt:$n[0].Int64,p:[$n[6].BitGraph_long,$n[0].Int64,$n[0].Int64]},{a:2,n:"Parent",is:!0,t:8,pi:[{n:"g",pt:$n[6].BitGraph_long,ps:0},{n:"set",pt:$n[0].Int64,ps:1},{n:"LFMIS",pt:$n[0].Int64,ps:2},{n:"S",pt:$n[0].Int64,ps:3}],sn:"Parent",rt:$n[0].Int64,p:[$n[6].BitGraph_long,$n[0].Int64,$n[0].Int64,$n[0].Int64]}]}});$m($n[8].App,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:1,n:"AddNewSheetTab",is:!0,t:8,sn:"AddNewSheetTab",rt:$n[0].Void},{a:1,n:"AppendSageDiv",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"AppendSageDiv",rt:HTMLDivElement,p:[$n[0].String]},{a:2,n:"AskSage",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"AskSage",rt:$n[0].Void,p:[$n[0].String]},{a:2,n:"AskSageAsync",is:!0,t:8,pi:[{n:"sageCode",pt:$n[0].String,ps:0}],sn:"AskSageAsync$1",rt:$n[7].Task$1,p:[$n[0].String]},{a:2,n:"AskSageAsync",is:!0,t:8,pi:[{n:"G",pt:$n[1].Graph,ps:0},{n:"sageCodeAboutG",pt:$n[0].String,ps:1}],sn:"AskSageAsync",rt:$n[7].Task$1,p:[$n[1].Graph,$n[0].String]},{a:2,n:"AskSageAuto",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"AskSageAuto",rt:$n[0].Void,p:[$n[0].String]},{a:2,n:"Main",is:!0,t:8,sn:"Main",rt:$n[0].Void},{a:2,n:"NewTab",is:!0,t:8,pi:[{n:"name",dv:null,o:!0,pt:$n[0].String,ps:0},{n:"G",dv:null,o:!0,pt:$n[1].Graph,ps:1}],sn:"NewTab",rt:$n[0].Void,p:[$n[0].String,$n[1].Graph]},{a:1,n:"OnKeyDown",is:!0,t:8,pi:[{n:"e",pt:KeyboardEvent,ps:0}],sn:"OnKeyDown",rt:$n[0].Void,p:[KeyboardEvent]},{a:1,n:"OnWindowLoad",is:!0,t:8,pi:[{n:"eee",pt:Event,ps:0}],sn:"OnWindowLoad",rt:$n[0].Void,p:[Event]},{a:2,n:"CurrentTabCanvas",is:!0,t:16,rt:$n[8].TabCanvas,g:{a:2,n:"get_CurrentTabCanvas",t:8,rt:$n[8].TabCanvas,fg:"CurrentTabCanvas",is:!0},fn:"CurrentTabCanvas"},{a:1,n:"_canvasLookup",is:!0,t:4,rt:$n[2].Dictionary$2(System.String,Test.TabCanvas),sn:"_canvasLookup"},{a:1,n:"_currentTabCanvas",is:!0,t:4,rt:$n[0].String,sn:"_currentTabCanvas"},{a:1,n:"_newSheetTab",is:!0,t:4,rt:HTMLLIElement,sn:"_newSheetTab"},{a:1,n:"_sageContainer",is:!0,t:4,rt:HTMLElement,sn:"_sageContainer"},{a:1,n:"_tabID",is:!0,t:4,rt:$n[0].Int32,sn:"_tabID"}]}});$m($n[8].Graphics,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[HTMLCanvasElement],pi:[{n:"canvas",pt:HTMLCanvasElement,ps:0}],sn:"ctor"},{a:2,n:"Clear",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0}],sn:"Clear",rt:$n[0].Void,p:[$n[4].ARGB]},{a:2,n:"DrawEllipse",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"bounds",pt:$n[4].Box,ps:1},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:2}],sn:"DrawEllipse",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box,$n[0].Double]},{a:2,n:"DrawLine",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"p1",pt:$n[4].Box,ps:1},{n:"p2",pt:$n[4].Box,ps:2},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:3}],sn:"DrawLine",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box,$n[4].Box,$n[0].Double]},{a:2,n:"DrawLine",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"x1",pt:$n[0].Double,ps:1},{n:"y1",pt:$n[0].Double,ps:2},{n:"x2",pt:$n[0].Double,ps:3},{n:"y2",pt:$n[0].Double,ps:4},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:5}],sn:"DrawLine$1",rt:$n[0].Void,p:[$n[4].ARGB,$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double,$n[0].Double]},{a:2,n:"DrawLines",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"points",pt:$n[2].IEnumerable$1(GraphicsLayer.Box),ps:1},{n:"width",dv:1,o:!0,pt:$n[0].Double,ps:2}],sn:"DrawLines",rt:$n[0].Void,p:[$n[4].ARGB,$n[2].IEnumerable$1(GraphicsLayer.Box),$n[0].Double]},{a:2,n:"DrawString",t:8,pi:[{n:"s",pt:$n[0].String,ps:0},{n:"font",pt:$n[4].Font,ps:1},{n:"argb",pt:$n[4].ARGB,ps:2},{n:"bounds",pt:$n[4].Box,ps:3}],sn:"DrawString",rt:$n[0].Void,p:[$n[0].String,$n[4].Font,$n[4].ARGB,$n[4].Box]},{a:2,n:"FillEllipse",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"bounds",pt:$n[4].Box,ps:1}],sn:"FillEllipse",rt:$n[0].Void,p:[$n[4].ARGB,$n[4].Box]},{a:2,n:"FillPolygon",t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0},{n:"points",pt:$n[2].IEnumerable$1(GraphicsLayer.Box),ps:1}],sn:"FillPolygon",rt:$n[0].Void,p:[$n[4].ARGB,$n[2].IEnumerable$1(GraphicsLayer.Box)]},{a:2,n:"MeasureString",t:8,pi:[{n:"s",pt:$n[0].String,ps:0},{n:"font",pt:$n[4].Font,ps:1}],sn:"MeasureString",rt:$n[4].Box,p:[$n[0].String,$n[4].Font]},{a:1,n:"_canvas",t:4,rt:HTMLCanvasElement,sn:"_canvas"},{a:1,n:"_context",t:4,rt:CanvasRenderingContext2D,sn:"_context"}]}});$m($n[8].HelperExtensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"ToColor",is:!0,t:8,pi:[{n:"argb",pt:$n[4].ARGB,ps:0}],sn:"ToColor",rt:$n[0].String,p:[$n[4].ARGB]}]}});$m($n[8].LayoutAnimation,function(){return{att:1048576,a:4,m:[{a:2,n:".ctor",t:1,p:[Function,Function,$n[2].List$1(Graphs.Vector),$n[1].Graph],pi:[{n:"update",pt:Function,ps:0},{n:"finalUpdate",pt:Function,ps:1},{n:"layout",pt:$n[2].List$1(Graphs.Vector),ps:2},{n:"G",pt:$n[1].Graph,ps:3}],sn:"ctor"},{a:2,n:"Animate",t:8,sn:"Animate",rt:$n[7].Task},{a:1,n:"DoStep",t:8,sn:"DoStep",rt:$n[0].Void},{a:1,n:"OnFinish",t:8,sn:"OnFinish",rt:$n[0].Void},{a:1,n:"Steps",is:!0,t:4,rt:$n[0].Int32,sn:"Steps"},{a:1,n:"_G",t:4,rt:$n[1].Graph,sn:"_G"},{a:1,n:"_finalUpdate",t:4,rt:Function,sn:"_finalUpdate"},{a:1,n:"_layout",t:4,rt:$n[2].List$1(Graphs.Vector),sn:"_layout"},{a:1,n:"_step",t:4,rt:$n[0].Int32,sn:"_step"},{a:1,n:"_update",t:4,rt:Function,sn:"_update"},{a:1,n:"_xstep",t:4,rt:$n[0].Array.type(System.Double),sn:"_xstep"},{a:1,n:"_ystep",t:4,rt:$n[0].Array.type(System.Double),sn:"_ystep"}]}});$m($n[8].TabCanvas,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[HTMLCanvasElement,$n[1].GraphCanvas],pi:[{n:"canvas",pt:HTMLCanvasElement,ps:0},{n:"graphCanvas",pt:$n[1].GraphCanvas,ps:1}],sn:"ctor"},{a:1,n:"ExtractPoints",is:!0,t:8,pi:[{n:"x",pt:$n[0].String,ps:0}],sn:"ExtractPoints",rt:$n[2].IEnumerable$1(Graphs.Vector),p:[$n[0].String]},{a:2,n:"GetClipboardText",t:8,sn:"GetClipboardText",rt:$n[0].String},{a:2,n:"Invalidate",t:8,sn:"Invalidate",rt:$n[0].Void},{a:1,n:"LayoutGraph",t:8,pi:[{n:"positions",pt:$n[2].List$1(Graphs.Vector),ps:0}],sn:"LayoutGraph",rt:$n[7].Task,p:[$n[2].List$1(Graphs.Vector)]},{a:1,n:"OnGraphModified",t:8,pi:[{n:"g",pt:$n[1].Graph,ps:0}],sn:"OnGraphModified",rt:$n[0].Void,p:[$n[1].Graph]},{a:1,n:"OnLoad",t:8,pi:[{n:"e",pt:Event,ps:0}],sn:"OnLoad",rt:$n[0].Void,p:[Event]},{a:1,n:"OnMouseButtonDown",t:8,pi:[{n:"e",pt:MouseEvent,ps:0}],sn:"OnMouseButtonDown",rt:$n[0].Void,p:[MouseEvent]},{a:1,n:"OnMouseButtonUp",t:8,pi:[{n:"e",pt:MouseEvent,ps:0}],sn:"OnMouseButtonUp",rt:$n[0].Void,p:[MouseEvent]},{a:1,n:"OnMouseDoubleClick",t:8,pi:[{n:"e",pt:MouseEvent,ps:0}],sn:"OnMouseDoubleClick",rt:$n[0].Void,p:[MouseEvent]},{a:1,n:"OnMouseMove",t:8,pi:[{n:"e",pt:MouseEvent,ps:0}],sn:"OnMouseMove",rt:$n[0].Void,p:[MouseEvent]},{a:1,n:"OnNameModified",t:8,pi:[{n:"name",pt:$n[0].String,ps:0}],sn:"OnNameModified",rt:$n[0].Void,p:[$n[0].String]},{a:1,n:"ParseAdjacencyMatrix",is:!0,t:8,pi:[{n:"a",pt:$n[0].String,ps:0}],sn:"ParseAdjacencyMatrix",rt:$n[0].Array.type(System.Boolean,2),p:[$n[0].String]},{a:4,n:"SageAddClique",t:8,sn:"SageAddClique",rt:$n[0].Void},{a:4,n:"SageAddCycle",t:8,sn:"SageAddCycle",rt:$n[0].Void},{a:4,n:"SageAddEdge",t:8,sn:"SageAddEdge",rt:$n[0].Void},{a:4,n:"SageAddEdges",t:8,sn:"SageAddEdges",rt:$n[0].Void},{a:4,n:"SageAddPath",t:8,sn:"SageAddPath",rt:$n[0].Void},{a:4,n:"SageAddVertex",t:8,sn:"SageAddVertex",rt:$n[0].Void},{a:4,n:"SageAddVertices",t:8,sn:"SageAddVertices",rt:$n[0].Void},{a:4,n:"SageAdjacencyMatrix",t:8,sn:"SageAdjacencyMatrix",rt:$n[0].Void},{a:4,n:"SageAllPaths",t:8,sn:"SageAllPaths",rt:$n[0].Void},{a:4,n:"SageAllowLoops",t:8,sn:"SageAllowLoops",rt:$n[0].Void},{a:4,n:"SageAllowMultipleEdges",t:8,sn:"SageAllowMultipleEdges",rt:$n[0].Void},{a:4,n:"SageAllowsLoops",t:8,sn:"SageAllowsLoops",rt:$n[0].Void},{a:4,n:"SageAllowsMultipleEdges",t:8,sn:"SageAllowsMultipleEdges",rt:$n[0].Void},{a:4,n:"SageAntisymmetric",t:8,sn:"SageAntisymmetric",rt:$n[0].Void},{a:4,n:"SageApexVertices",t:8,sn:"SageApexVertices",rt:$n[0].Void},{a:4,n:"SageAutomorphismGroup",t:8,sn:"SageAutomorphismGroup",rt:$n[0].Void},{a:4,n:"SageAverageDegree",t:8,sn:"SageAverageDegree",rt:$n[0].Void},{a:4,n:"SageAverageDistance",t:8,sn:"SageAverageDistance",rt:$n[0].Void},{a:4,n:"SageBipartiteColor",t:8,sn:"SageBipartiteColor",rt:$n[0].Void},{a:4,n:"SageBipartiteSets",t:8,sn:"SageBipartiteSets",rt:$n[0].Void},{a:4,n:"SageBlocksAndCutVertices",t:8,sn:"SageBlocksAndCutVertices",rt:$n[0].Void},{a:4,n:"SageBlocksAndCutsTree",t:8,sn:"SageBlocksAndCutsTree",rt:$n[0].Void},{a:4,n:"SageBoundedOutdegreeOrientation",t:8,sn:"SageBoundedOutdegreeOrientation",rt:$n[0].Void},{a:4,n:"SageBreadthFirstSearch",t:8,sn:"SageBreadthFirstSearch",rt:$n[0].Void},{a:4,n:"SageBridges",t:8,sn:"SageBridges",rt:$n[0].Void},{a:4,n:"SageCanonicalLabel",t:8,sn:"SageCanonicalLabel",rt:$n[0].Void},{a:4,n:"SageCartesianProduct",t:8,sn:"SageCartesianProduct",rt:$n[0].Void},{a:4,n:"SageCenter",t:8,sn:"SageCenter",rt:$n[0].Void},{a:4,n:"SageCentralityBetweenness",t:8,sn:"SageCentralityBetweenness",rt:$n[0].Void},{a:4,n:"SageCentralityCloseness",t:8,sn:"SageCentralityCloseness",rt:$n[0].Void},{a:4,n:"SageCharacteristicPolynomial",t:8,sn:"SageCharacteristicPolynomial",rt:$n[0].Void},{a:4,n:"SageChromaticNumber",t:8,sn:"SageChromaticNumber",rt:$n[0].Void},{a:4,n:"SageChromaticPolynomial",t:8,sn:"SageChromaticPolynomial",rt:$n[0].Void},{a:4,n:"SageChromaticQuasisymmetricFunction",t:8,sn:"SageChromaticQuasisymmetricFunction",rt:$n[0].Void},{a:4,n:"SageChromaticSymmetricFunction",t:8,sn:"SageChromaticSymmetricFunction",rt:$n[0].Void},{a:4,n:"SageClear",t:8,sn:"SageClear",rt:$n[0].Void},{a:4,n:"SageCliqueComplex",t:8,sn:"SageCliqueComplex",rt:$n[0].Void},{a:4,n:"SageCliqueMaximum",t:8,sn:"SageCliqueMaximum",rt:$n[0].Void},{a:4,n:"SageCliqueNumber",t:8,sn:"SageCliqueNumber",rt:$n[0].Void},{a:4,n:"SageCliquePolynomial",t:8,sn:"SageCliquePolynomial",rt:$n[0].Void},{a:4,n:"SageCliquesContainingVertex",t:8,sn:"SageCliquesContainingVertex",rt:$n[0].Void},{a:4,n:"SageCliquesGetCliqueBipartite",t:8,sn:"SageCliquesGetCliqueBipartite",rt:$n[0].Void},{a:4,n:"SageCliquesGetMaxCliqueGraph",t:8,sn:"SageCliquesGetMaxCliqueGraph",rt:$n[0].Void},{a:4,n:"SageCliquesMaximal",t:8,sn:"SageCliquesMaximal",rt:$n[0].Void},{a:4,n:"SageCliquesMaximum",t:8,sn:"SageCliquesMaximum",rt:$n[0].Void},{a:4,n:"SageCliquesNumberOf",t:8,sn:"SageCliquesNumberOf",rt:$n[0].Void},{a:4,n:"SageCliquesVertexCliqueNumber",t:8,sn:"SageCliquesVertexCliqueNumber",rt:$n[0].Void},{a:4,n:"SageClusterTransitivity",t:8,sn:"SageClusterTransitivity",rt:$n[0].Void},{a:4,n:"SageClusterTriangles",t:8,sn:"SageClusterTriangles",rt:$n[0].Void},{a:4,n:"SageClusteringAverage",t:8,sn:"SageClusteringAverage",rt:$n[0].Void},{a:4,n:"SageClusteringCoeff",t:8,sn:"SageClusteringCoeff",rt:$n[0].Void},{a:4,n:"SageCoarsestEquitableRefinement",t:8,sn:"SageCoarsestEquitableRefinement",rt:$n[0].Void},{a:4,n:"SageColoring",t:8,sn:"SageColoring",rt:$n[0].Void},{a:4,n:"SageComplement",t:8,sn:"SageComplement",rt:$n[0].Void},{a:4,n:"SageConnectedComponentContainingVertex",t:8,sn:"SageConnectedComponentContainingVertex",rt:$n[0].Void},{a:4,n:"SageConnectedComponents",t:8,sn:"SageConnectedComponents",rt:$n[0].Void},{a:4,n:"SageConnectedComponentsNumber",t:8,sn:"SageConnectedComponentsNumber",rt:$n[0].Void},{a:4,n:"SageConnectedComponentsSizes",t:8,sn:"SageConnectedComponentsSizes",rt:$n[0].Void},{a:4,n:"SageConnectedComponentsSubgraphs",t:8,sn:"SageConnectedComponentsSubgraphs",rt:$n[0].Void},{a:4,n:"SageConvexityProperties",t:8,sn:"SageConvexityProperties",rt:$n[0].Void},{a:4,n:"SageCopy",t:8,sn:"SageCopy",rt:$n[0].Void},{a:4,n:"SageCores",t:8,sn:"SageCores",rt:$n[0].Void},{a:4,n:"SageCycleBasis",t:8,sn:"SageCycleBasis",rt:$n[0].Void},{a:4,n:"SageDegree",t:8,sn:"SageDegree",rt:$n[0].Void},{a:4,n:"SageDegreeConstrainedSubgraph",t:8,sn:"SageDegreeConstrainedSubgraph",rt:$n[0].Void},{a:4,n:"SageDegreeHistogram",t:8,sn:"SageDegreeHistogram",rt:$n[0].Void},{a:4,n:"SageDegreeIterator",t:8,sn:"SageDegreeIterator",rt:$n[0].Void},{a:4,n:"SageDegreeSequence",t:8,sn:"SageDegreeSequence",rt:$n[0].Void},{a:4,n:"SageDegreeToCell",t:8,sn:"SageDegreeToCell",rt:$n[0].Void},{a:4,n:"SageDeleteEdge",t:8,sn:"SageDeleteEdge",rt:$n[0].Void},{a:4,n:"SageDeleteEdges",t:8,sn:"SageDeleteEdges",rt:$n[0].Void},{a:4,n:"SageDeleteMultiedge",t:8,sn:"SageDeleteMultiedge",rt:$n[0].Void},{a:4,n:"SageDeleteVertex",t:8,sn:"SageDeleteVertex",rt:$n[0].Void},{a:4,n:"SageDeleteVertices",t:8,sn:"SageDeleteVertices",rt:$n[0].Void},{a:4,n:"SageDensity",t:8,sn:"SageDensity",rt:$n[0].Void},{a:4,n:"SageDepthFirstSearch",t:8,sn:"SageDepthFirstSearch",rt:$n[0].Void},{a:4,n:"SageDiameter",t:8,sn:"SageDiameter",rt:$n[0].Void},{a:4,n:"SageDisjointRoutedPaths",t:8,sn:"SageDisjointRoutedPaths",rt:$n[0].Void},{a:4,n:"SageDisjointUnion",t:8,sn:"SageDisjointUnion",rt:$n[0].Void},{a:4,n:"SageDisjunctiveProduct",t:8,sn:"SageDisjunctiveProduct",rt:$n[0].Void},{a:4,n:"SageDistance",t:8,sn:"SageDistance",rt:$n[0].Void},{a:4,n:"SageDistanceAllPairs",t:8,sn:"SageDistanceAllPairs",rt:$n[0].Void},{a:4,n:"SageDistanceGraph",t:8,sn:"SageDistanceGraph",rt:$n[0].Void},{a:4,n:"SageDistanceMatrix",t:8,sn:"SageDistanceMatrix",rt:$n[0].Void},{a:4,n:"SageDistancesDistribution",t:8,sn:"SageDistancesDistribution",rt:$n[0].Void},{a:4,n:"SageDominatingSet",t:8,sn:"SageDominatingSet",rt:$n[0].Void},{a:4,n:"SageDominatorTree",t:8,sn:"SageDominatorTree",rt:$n[0].Void},{a:4,n:"SageEccentricity",t:8,sn:"SageEccentricity",rt:$n[0].Void},{a:4,n:"SageEdgeBoundary",t:8,sn:"SageEdgeBoundary",rt:$n[0].Void},{a:4,n:"SageEdgeConnectivity",t:8,sn:"SageEdgeConnectivity",rt:$n[0].Void},{a:4,n:"SageEdgeCut",t:8,sn:"SageEdgeCut",rt:$n[0].Void},{a:4,n:"SageEdgeDisjointPaths",t:8,sn:"SageEdgeDisjointPaths",rt:$n[0].Void},{a:4,n:"SageEdgeDisjointSpanningTrees",t:8,sn:"SageEdgeDisjointSpanningTrees",rt:$n[0].Void},{a:4,n:"SageEdgeIterator",t:8,sn:"SageEdgeIterator",rt:$n[0].Void},{a:4,n:"SageEdgeLabel",t:8,sn:"SageEdgeLabel",rt:$n[0].Void},{a:4,n:"SageEdgeLabels",t:8,sn:"SageEdgeLabels",rt:$n[0].Void},{a:4,n:"SageEdges",t:8,sn:"SageEdges",rt:$n[0].Void},{a:4,n:"SageEdgesIncident",t:8,sn:"SageEdgesIncident",rt:$n[0].Void},{a:4,n:"SageEigenspaces",t:8,sn:"SageEigenspaces",rt:$n[0].Void},{a:4,n:"SageEigenvectors",t:8,sn:"SageEigenvectors",rt:$n[0].Void},{a:4,n:"SageEulerianCircuit",t:8,sn:"SageEulerianCircuit",rt:$n[0].Void},{a:4,n:"SageEulerianOrientation",t:8,sn:"SageEulerianOrientation",rt:$n[0].Void},{a:4,n:"SageExportToFile",t:8,sn:"SageExportToFile",rt:$n[0].Void},{a:4,n:"SageFaces",t:8,sn:"SageFaces",rt:$n[0].Void},{a:4,n:"SageFeedbackVertexSet",t:8,sn:"SageFeedbackVertexSet",rt:$n[0].Void},{a:4,n:"SageFlow",t:8,sn:"SageFlow",rt:$n[0].Void},{a:4,n:"SageFractionalChromaticIndex",t:8,sn:"SageFractionalChromaticIndex",rt:$n[0].Void},{a:4,n:"SageGenus",t:8,sn:"SageGenus",rt:$n[0].Void},{a:4,n:"SageGetEmbedding",t:8,sn:"SageGetEmbedding",rt:$n[0].Void},{a:4,n:"SageGetPos",t:8,sn:"SageGetPos",rt:$n[0].Void},{a:4,n:"SageGetVertex",t:8,sn:"SageGetVertex",rt:$n[0].Void},{a:4,n:"SageGetVertices",t:8,sn:"SageGetVertices",rt:$n[0].Void},{a:4,n:"SageGirth",t:8,sn:"SageGirth",rt:$n[0].Void},{a:4,n:"SageGomoryHuTree",t:8,sn:"SageGomoryHuTree",rt:$n[0].Void},{a:4,n:"SageGraph6",t:8,sn:"SageGraph6",rt:$n[0].Void},{a:4,n:"SageGraph6String",t:8,sn:"SageGraph6String",rt:$n[0].Void},{a:4,n:"SageGraphplot",t:8,sn:"SageGraphplot",rt:$n[0].Void},{a:4,n:"SageGraphvizString",t:8,sn:"SageGraphvizString",rt:$n[0].Void},{a:4,n:"SageGraphvizToFileNamed",t:8,sn:"SageGraphvizToFileNamed",rt:$n[0].Void},{a:4,n:"SageHamiltonianCycle",t:8,sn:"SageHamiltonianCycle",rt:$n[0].Void},{a:4,n:"SageHamiltonianPath",t:8,sn:"SageHamiltonianPath",rt:$n[0].Void},{a:4,n:"SageHasEdge",t:8,sn:"SageHasEdge",rt:$n[0].Void},{a:4,n:"SageHasHomomorphismTo",t:8,sn:"SageHasHomomorphismTo",rt:$n[0].Void},{a:4,n:"SageHasLoops",t:8,sn:"SageHasLoops",rt:$n[0].Void},{a:4,n:"SageHasMultipleEdges",t:8,sn:"SageHasMultipleEdges",rt:$n[0].Void},{a:4,n:"SageHasPerfectMatching",t:8,sn:"SageHasPerfectMatching",rt:$n[0].Void},{a:4,n:"SageHasVertex",t:8,sn:"SageHasVertex",rt:$n[0].Void},{a:4,n:"SageIgraphGraph",t:8,sn:"SageIgraphGraph",rt:$n[0].Void},{a:4,n:"SageIharaZetaFunctionInverse",t:8,sn:"SageIharaZetaFunctionInverse",rt:$n[0].Void},{a:4,n:"SageIncidenceMatrix",t:8,sn:"SageIncidenceMatrix",rt:$n[0].Void},{a:4,n:"SageIndependentSet",t:8,sn:"SageIndependentSet",rt:$n[0].Void},{a:4,n:"SageIndependentSetOfRepresentatives",t:8,sn:"SageIndependentSetOfRepresentatives",rt:$n[0].Void},{a:4,n:"SageIsApex",t:8,sn:"SageIsApex",rt:$n[0].Void},{a:4,n:"SageIsArcTransitive",t:8,sn:"SageIsArcTransitive",rt:$n[0].Void},{a:4,n:"SageIsAsteroidalTripleFree",t:8,sn:"SageIsAsteroidalTripleFree",rt:$n[0].Void},{a:4,n:"SageIsBiconnected",t:8,sn:"SageIsBiconnected",rt:$n[0].Void},{a:4,n:"SageIsBipartite",t:8,sn:"SageIsBipartite",rt:$n[0].Void},{a:4,n:"SageIsBlockGraph",t:8,sn:"SageIsBlockGraph",rt:$n[0].Void},{a:4,n:"SageIsCartesianProduct",t:8,sn:"SageIsCartesianProduct",rt:$n[0].Void},{a:4,n:"SageIsCayley",t:8,sn:"SageIsCayley",rt:$n[0].Void},{a:4,n:"SageIsChordal",t:8,sn:"SageIsChordal",rt:$n[0].Void},{a:4,n:"SageIsCirculant",t:8,sn:"SageIsCirculant",rt:$n[0].Void},{a:4,n:"SageIsCircularPlanar",t:8,sn:"SageIsCircularPlanar",rt:$n[0].Void},{a:4,n:"SageIsClique",t:8,sn:"SageIsClique",rt:$n[0].Void},{a:4,n:"SageIsConnected",t:8,sn:"SageIsConnected",rt:$n[0].Void},{a:4,n:"SageIsCutEdge",t:8,sn:"SageIsCutEdge",rt:$n[0].Void},{a:4,n:"SageIsCutVertex",t:8,sn:"SageIsCutVertex",rt:$n[0].Void},{a:4,n:"SageIsCycle",t:8,sn:"SageIsCycle",rt:$n[0].Void},{a:4,n:"SageIsDirected",t:8,sn:"SageIsDirected",rt:$n[0].Void},{a:4,n:"SageIsDistanceRegular",t:8,sn:"SageIsDistanceRegular",rt:$n[0].Void},{a:4,n:"SageIsDrawnFreeOfEdgeCrossings",t:8,sn:"SageIsDrawnFreeOfEdgeCrossings",rt:$n[0].Void},{a:4,n:"SageIsEdgeTransitive",t:8,sn:"SageIsEdgeTransitive",rt:$n[0].Void},{a:4,n:"SageIsEquitable",t:8,sn:"SageIsEquitable",rt:$n[0].Void},{a:4,n:"SageIsEulerian",t:8,sn:"SageIsEulerian",rt:$n[0].Void},{a:4,n:"SageIsEvenHoleFree",t:8,sn:"SageIsEvenHoleFree",rt:$n[0].Void},{a:4,n:"SageIsForest",t:8,sn:"SageIsForest",rt:$n[0].Void},{a:4,n:"SageIsGallaiTree",t:8,sn:"SageIsGallaiTree",rt:$n[0].Void},{a:4,n:"SageIsHalfTransitive",t:8,sn:"SageIsHalfTransitive",rt:$n[0].Void},{a:4,n:"SageIsHamiltonian",t:8,sn:"SageIsHamiltonian",rt:$n[0].Void},{a:4,n:"SageIsImmutable",t:8,sn:"SageIsImmutable",rt:$n[0].Void},{a:4,n:"SageIsIndependentSet",t:8,sn:"SageIsIndependentSet",rt:$n[0].Void},{a:4,n:"SageIsInterval",t:8,sn:"SageIsInterval",rt:$n[0].Void},{a:4,n:"SageIsIsomorphic",t:8,sn:"SageIsIsomorphic",rt:$n[0].Void},{a:4,n:"SageIsLineGraph",t:8,sn:"SageIsLineGraph",rt:$n[0].Void},{a:4,n:"SageIsLongAntiholeFree",t:8,sn:"SageIsLongAntiholeFree",rt:$n[0].Void},{a:4,n:"SageIsLongHoleFree",t:8,sn:"SageIsLongHoleFree",rt:$n[0].Void},{a:4,n:"SageIsOddHoleFree",t:8,sn:"SageIsOddHoleFree",rt:$n[0].Void},{a:4,n:"SageIsOverfull",t:8,sn:"SageIsOverfull",rt:$n[0].Void},{a:4,n:"SageIsPartialCube",t:8,sn:"SageIsPartialCube",rt:$n[0].Void},{a:4,n:"SageIsPerfect",t:8,sn:"SageIsPerfect",rt:$n[0].Void},{a:4,n:"SageIsPlanar",t:8,sn:"SageIsPlanar",rt:$n[0].Void},{a:4,n:"SageIsPrime",t:8,sn:"SageIsPrime",rt:$n[0].Void},{a:4,n:"SageIsRegular",t:8,sn:"SageIsRegular",rt:$n[0].Void},{a:4,n:"SageIsSemiSymmetric",t:8,sn:"SageIsSemiSymmetric",rt:$n[0].Void},{a:4,n:"SageIsSplit",t:8,sn:"SageIsSplit",rt:$n[0].Void},{a:4,n:"SageIsStronglyRegular",t:8,sn:"SageIsStronglyRegular",rt:$n[0].Void},{a:4,n:"SageIsSubgraph",t:8,sn:"SageIsSubgraph",rt:$n[0].Void},{a:4,n:"SageIsTransitivelyReduced",t:8,sn:"SageIsTransitivelyReduced",rt:$n[0].Void},{a:4,n:"SageIsTree",t:8,sn:"SageIsTree",rt:$n[0].Void},{a:4,n:"SageIsTriangleFree",t:8,sn:"SageIsTriangleFree",rt:$n[0].Void},{a:4,n:"SageIsVertexTransitive",t:8,sn:"SageIsVertexTransitive",rt:$n[0].Void},{a:4,n:"SageIsWeaklyChordal",t:8,sn:"SageIsWeaklyChordal",rt:$n[0].Void},{a:4,n:"SageJoin",t:8,sn:"SageJoin",rt:$n[0].Void},{a:4,n:"SageKirchhoffMatrix",t:8,sn:"SageKirchhoffMatrix",rt:$n[0].Void},{a:4,n:"SageKirchhoffSymanzikPolynomial",t:8,sn:"SageKirchhoffSymanzikPolynomial",rt:$n[0].Void},{a:4,n:"SageLatexOptions",t:8,sn:"SageLatexOptions",rt:$n[0].Void},{a:4,n:"SageLayout",t:8,sn:"SageLayout",rt:$n[0].Void},{a:4,n:"SageLayoutCircular",t:8,sn:"SageLayoutCircular",rt:$n[0].Void},{a:4,n:"SageLayoutExtendRandomly",t:8,sn:"SageLayoutExtendRandomly",rt:$n[0].Void},{a:4,n:"SageLayoutGraphviz",t:8,sn:"SageLayoutGraphviz",rt:$n[0].Void},{a:4,n:"SageLayoutPlanar",t:8,sn:"SageLayoutPlanar",rt:$n[0].Void},{a:4,n:"SageLayoutRanked",t:8,sn:"SageLayoutRanked",rt:$n[0].Void},{a:4,n:"SageLayoutSpring",t:8,sn:"SageLayoutSpring",rt:$n[0].Void},{a:4,n:"SageLayoutTree",t:8,sn:"SageLayoutTree",rt:$n[0].Void},{a:4,n:"SageLexBFS",t:8,sn:"SageLexBFS",rt:$n[0].Void},{a:4,n:"SageLexicographicProduct",t:8,sn:"SageLexicographicProduct",rt:$n[0].Void},{a:4,n:"SageLineGraph",t:8,sn:"SageLineGraph",rt:$n[0].Void},{a:4,n:"SageLoadNamedGraph",t:8,pi:[{n:"name",pt:$n[0].String,ps:0}],sn:"SageLoadNamedGraph",rt:$n[0].Void,p:[$n[0].String]},{a:4,n:"SageLongestPath",t:8,sn:"SageLongestPath",rt:$n[0].Void},{a:4,n:"SageLoopEdges",t:8,sn:"SageLoopEdges",rt:$n[0].Void},{a:4,n:"SageLoopVertices",t:8,sn:"SageLoopVertices",rt:$n[0].Void},{a:4,n:"SageLoops",t:8,sn:"SageLoops",rt:$n[0].Void},{a:4,n:"SageLovaszTheta",t:8,sn:"SageLovaszTheta",rt:$n[0].Void},{a:4,n:"SageMagnitudeFunction",t:8,sn:"SageMagnitudeFunction",rt:$n[0].Void},{a:4,n:"SageManual",t:8,sn:"SageManual",rt:$n[0].Void},{a:4,n:"SageMatching",t:8,sn:"SageMatching",rt:$n[0].Void},{a:4,n:"SageMatchingPolynomial",t:8,sn:"SageMatchingPolynomial",rt:$n[0].Void},{a:4,n:"SageMaxCut",t:8,sn:"SageMaxCut",rt:$n[0].Void},{a:4,n:"SageMaximumAverageDegree",t:8,sn:"SageMaximumAverageDegree",rt:$n[0].Void},{a:4,n:"SageMergeVertices",t:8,sn:"SageMergeVertices",rt:$n[0].Void},{a:4,n:"SageMinSpanningTree",t:8,sn:"SageMinSpanningTree",rt:$n[0].Void},{a:4,n:"SageMinimumOutdegreeOrientation",t:8,sn:"SageMinimumOutdegreeOrientation",rt:$n[0].Void},{a:4,n:"SageMinor",t:8,sn:"SageMinor",rt:$n[0].Void},{a:4,n:"SageModularDecomposition",t:8,sn:"SageModularDecomposition",rt:$n[0].Void},{a:4,n:"SageMulticommodityFlow",t:8,sn:"SageMulticommodityFlow",rt:$n[0].Void},{a:4,n:"SageMultipleEdges",t:8,sn:"SageMultipleEdges",rt:$n[0].Void},{a:4,n:"SageMultiwayCut",t:8,sn:"SageMultiwayCut",rt:$n[0].Void},{a:4,n:"SageName",t:8,sn:"SageName",rt:$n[0].Void},{a:4,n:"SageNeighborIterator",t:8,sn:"SageNeighborIterator",rt:$n[0].Void},{a:4,n:"SageNeighbors",t:8,sn:"SageNeighbors",rt:$n[0].Void},{a:4,n:"SageNetworkxGraph",t:8,sn:"SageNetworkxGraph",rt:$n[0].Void},{a:4,n:"SageNumberOfLoops",t:8,sn:"SageNumberOfLoops",rt:$n[0].Void},{a:4,n:"SageOddGirth",t:8,sn:"SageOddGirth",rt:$n[0].Void},{a:4,n:"SageOrder",t:8,sn:"SageOrder",rt:$n[0].Void},{a:4,n:"SageOrientations",t:8,sn:"SageOrientations",rt:$n[0].Void},{a:4,n:"SagePathwidth",t:8,sn:"SagePathwidth",rt:$n[0].Void},{a:4,n:"SagePerfectMatchings",t:8,sn:"SagePerfectMatchings",rt:$n[0].Void},{a:4,n:"SagePeriphery",t:8,sn:"SagePeriphery",rt:$n[0].Void},{a:4,n:"SagePlot",t:8,sn:"SagePlot",rt:$n[0].Void},{a:4,n:"SagePlot3d",t:8,sn:"SagePlot3d",rt:$n[0].Void},{a:4,n:"SageRadius",t:8,sn:"SageRadius",rt:$n[0].Void},{a:4,n:"SageRandomEdge",t:8,sn:"SageRandomEdge",rt:$n[0].Void},{a:4,n:"SageRandomEdgeIterator",t:8,sn:"SageRandomEdgeIterator",rt:$n[0].Void},{a:4,n:"SageRandomSpanningTree",t:8,sn:"SageRandomSpanningTree",rt:$n[0].Void},{a:4,n:"SageRandomSubgraph",t:8,sn:"SageRandomSubgraph",rt:$n[0].Void},{a:4,n:"SageRandomVertex",t:8,sn:"SageRandomVertex",rt:$n[0].Void},{a:4,n:"SageRandomVertexIterator",t:8,sn:"SageRandomVertexIterator",rt:$n[0].Void},{a:4,n:"SageRankDecomposition",t:8,sn:"SageRankDecomposition",rt:$n[0].Void},{a:4,n:"SageRelabel",t:8,sn:"SageRelabel",rt:$n[0].Void},{a:4,n:"SageRemoveLoops",t:8,sn:"SageRemoveLoops",rt:$n[0].Void},{a:4,n:"SageRemoveMultipleEdges",t:8,sn:"SageRemoveMultipleEdges",rt:$n[0].Void},{a:4,n:"SageSeidelAdjacencyMatrix",t:8,sn:"SageSeidelAdjacencyMatrix",rt:$n[0].Void},{a:4,n:"SageSetEdgeLabel",t:8,sn:"SageSetEdgeLabel",rt:$n[0].Void},{a:4,n:"SageSetEmbedding",t:8,sn:"SageSetEmbedding",rt:$n[0].Void},{a:4,n:"SageSetLatexOptions",t:8,sn:"SageSetLatexOptions",rt:$n[0].Void},{a:4,n:"SageSetPlanarPositions",t:8,sn:"SageSetPlanarPositions",rt:$n[0].Void},{a:4,n:"SageSetPos",t:8,sn:"SageSetPos",rt:$n[0].Void},{a:4,n:"SageSetVertex",t:8,sn:"SageSetVertex",rt:$n[0].Void},{a:4,n:"SageSetVertices",t:8,sn:"SageSetVertices",rt:$n[0].Void},{a:4,n:"SageShortestPath",t:8,sn:"SageShortestPath",rt:$n[0].Void},{a:4,n:"SageShortestPathAllPairs",t:8,sn:"SageShortestPathAllPairs",rt:$n[0].Void},{a:4,n:"SageShortestPathLength",t:8,sn:"SageShortestPathLength",rt:$n[0].Void},{a:4,n:"SageShortestPathLengths",t:8,sn:"SageShortestPathLengths",rt:$n[0].Void},{a:4,n:"SageShortestPaths",t:8,sn:"SageShortestPaths",rt:$n[0].Void},{a:4,n:"SageShow",t:8,sn:"SageShow",rt:$n[0].Void},{a:4,n:"SageShow3d",t:8,sn:"SageShow3d",rt:$n[0].Void},{a:4,n:"SageSize",t:8,sn:"SageSize",rt:$n[0].Void},{a:4,n:"SageSpanningTrees",t:8,sn:"SageSpanningTrees",rt:$n[0].Void},{a:4,n:"SageSpanningTreesCount",t:8,sn:"SageSpanningTreesCount",rt:$n[0].Void},{a:4,n:"SageSparse6",t:8,sn:"SageSparse6",rt:$n[0].Void},{a:4,n:"SageSparse6String",t:8,sn:"SageSparse6String",rt:$n[0].Void},{a:4,n:"SageSpectrum",t:8,sn:"SageSpectrum",rt:$n[0].Void},{a:4,n:"SageSteinerTree",t:8,sn:"SageSteinerTree",rt:$n[0].Void},{a:4,n:"SageStrongOrientation",t:8,sn:"SageStrongOrientation",rt:$n[0].Void},{a:4,n:"SageStrongProduct",t:8,sn:"SageStrongProduct",rt:$n[0].Void},{a:4,n:"SageSubdivideEdge",t:8,sn:"SageSubdivideEdge",rt:$n[0].Void},{a:4,n:"SageSubdivideEdges",t:8,sn:"SageSubdivideEdges",rt:$n[0].Void},{a:4,n:"SageSubgraph",t:8,sn:"SageSubgraph",rt:$n[0].Void},{a:4,n:"SageSubgraphSearch",t:8,sn:"SageSubgraphSearch",rt:$n[0].Void},{a:4,n:"SageSubgraphSearchCount",t:8,sn:"SageSubgraphSearchCount",rt:$n[0].Void},{a:4,n:"SageSubgraphSearchIterator",t:8,sn:"SageSubgraphSearchIterator",rt:$n[0].Void},{a:4,n:"SageSzegedIndex",t:8,sn:"SageSzegedIndex",rt:$n[0].Void},{a:4,n:"SageTensorProduct",t:8,sn:"SageTensorProduct",rt:$n[0].Void},{a:4,n:"SageToDictionary",t:8,sn:"SageToDictionary",rt:$n[0].Void},{a:4,n:"SageToDirected",t:8,sn:"SageToDirected",rt:$n[0].Void},{a:4,n:"SageToSimple",t:8,sn:"SageToSimple",rt:$n[0].Void},{a:4,n:"SageToUndirected",t:8,sn:"SageToUndirected",rt:$n[0].Void},{a:4,n:"SageTopologicalMinor",t:8,sn:"SageTopologicalMinor",rt:$n[0].Void},{a:4,n:"SageTransitiveClosure",t:8,sn:"SageTransitiveClosure",rt:$n[0].Void},{a:4,n:"SageTransitiveReduction",t:8,sn:"SageTransitiveReduction",rt:$n[0].Void},{a:4,n:"SageTravelingSalesmanProblem",t:8,sn:"SageTravelingSalesmanProblem",rt:$n[0].Void},{a:4,n:"SageTreewidth",t:8,sn:"SageTreewidth",rt:$n[0].Void},{a:4,n:"SageTrianglesCount",t:8,sn:"SageTrianglesCount",rt:$n[0].Void},{a:4,n:"SageTuttePolynomial",t:8,sn:"SageTuttePolynomial",rt:$n[0].Void},{a:4,n:"SageUnion",t:8,sn:"SageUnion",rt:$n[0].Void},{a:4,n:"SageVertexBoundary",t:8,sn:"SageVertexBoundary",rt:$n[0].Void},{a:4,n:"SageVertexConnectivity",t:8,sn:"SageVertexConnectivity",rt:$n[0].Void},{a:4,n:"SageVertexCover",t:8,sn:"SageVertexCover",rt:$n[0].Void},{a:4,n:"SageVertexCut",t:8,sn:"SageVertexCut",rt:$n[0].Void},{a:4,n:"SageVertexDisjointPaths",t:8,sn:"SageVertexDisjointPaths",rt:$n[0].Void},{a:4,n:"SageVertexIterator",t:8,sn:"SageVertexIterator",rt:$n[0].Void},{a:4,n:"SageVertices",t:8,sn:"SageVertices",rt:$n[0].Void},{a:4,n:"SageWeighted",t:8,sn:"SageWeighted",rt:$n[0].Void},{a:4,n:"SageWeightedAdjacencyMatrix",t:8,sn:"SageWeightedAdjacencyMatrix",rt:$n[0].Void},{a:4,n:"SageWienerIndex",t:8,sn:"SageWienerIndex",rt:$n[0].Void},{a:4,n:"SageWriteToEps",t:8,sn:"SageWriteToEps",rt:$n[0].Void},{a:1,n:"Scale",t:8,pi:[{n:"positions",pt:$n[2].IEnumerable$1(Graphs.Vector),ps:0}],sn:"Scale",rt:$n[2].List$1(Graphs.Vector),p:[$n[2].IEnumerable$1(Graphs.Vector)]},{a:2,n:"SetClipboardText",t:8,pi:[{n:"text",pt:$n[0].String,ps:0}],sn:"SetClipboardText",rt:$n[0].Void,p:[$n[0].String]},{a:1,n:"SnapPositionsToGrid",t:8,pi:[{n:"positions",pt:$n[2].List$1(Graphs.Vector),ps:0}],sn:"SnapPositionsToGrid",rt:$n[0].Void,p:[$n[2].List$1(Graphs.Vector)]},{a:2,n:"Canvas",t:16,rt:HTMLCanvasElement,g:{a:2,n:"get_Canvas",t:8,rt:HTMLCanvasElement,fg:"Canvas"},s:{a:1,n:"set_Canvas",t:8,p:[HTMLCanvasElement],rt:$n[0].Void,fs:"Canvas"},fn:"Canvas"},{a:2,n:"GraphCanvas",t:16,rt:$n[1].GraphCanvas,g:{a:2,n:"get_GraphCanvas",t:8,rt:$n[1].GraphCanvas,fg:"GraphCanvas"},s:{a:1,n:"set_GraphCanvas",t:8,p:[$n[1].GraphCanvas],rt:$n[0].Void,fs:"GraphCanvas"},fn:"GraphCanvas"},{a:2,n:"IsControlKeyDown",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsControlKeyDown",t:8,rt:$n[0].Boolean,fg:"IsControlKeyDown"},fn:"IsControlKeyDown"},{a:2,n:"SelectedObjects",t:16,rt:$n[2].IEnumerable$1(System.Object),s:{a:2,n:"set_SelectedObjects",t:8,p:[$n[2].IEnumerable$1(System.Object)],rt:$n[0].Void,fs:"SelectedObjects"},fn:"SelectedObjects"},{a:2,n:"Title",t:16,rt:$n[0].String,g:{a:2,n:"get_Title",t:8,rt:$n[0].String,fg:"Title"},s:{a:2,n:"set_Title",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Title"},fn:"Title"},{a:1,n:"Colors",is:!0,t:4,rt:$n[2].List$1(GraphicsLayer.ARGB),sn:"Colors"},{a:1,n:"_ctrlDown",t:4,rt:$n[0].Boolean,sn:"_ctrlDown"},{a:1,n:"_title",t:4,rt:$n[0].String,sn:"_title"},{a:2,n:"MouseButtonDoubleClicked",t:2,ad:{a:2,n:"add_MouseButtonDoubleClicked",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addMouseButtonDoubleClicked",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_MouseButtonDoubleClicked",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeMouseButtonDoubleClicked",rt:$n[0].Void,p:[Function]}},{a:2,n:"MouseButtonDown",t:2,ad:{a:2,n:"add_MouseButtonDown",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addMouseButtonDown",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_MouseButtonDown",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeMouseButtonDown",rt:$n[0].Void,p:[Function]}},{a:2,n:"MouseButtonUp",t:2,ad:{a:2,n:"add_MouseButtonUp",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addMouseButtonUp",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_MouseButtonUp",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeMouseButtonUp",rt:$n[0].Void,p:[Function]}},{a:2,n:"MouseMoved",t:2,ad:{a:2,n:"add_MouseMoved",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"addMouseMoved",rt:$n[0].Void,p:[Function]},r:{a:2,n:"remove_MouseMoved",t:8,pi:[{n:"value",pt:Function,ps:0}],sn:"removeMouseMoved",rt:$n[0].Void,p:[Function]}}]}});$m($n[5].AssignmentEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,Function,$n[0].Int32,$n[0].Int32,$n[0].Int32],pi:[{n:"vertexCount",pt:$n[0].Int32,ps:0},{n:"f",pt:Function,ps:1},{n:"potSize",pt:$n[0].Int32,ps:2},{n:"start",dv:0,o:!0,pt:$n[0].Int32,ps:3},{n:"step",dv:1,o:!0,pt:$n[0].Int32,ps:4}],sn:"ctor"},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Collections.Generic.List$1(System.Int64))},{a:1,n:"_f",t:4,rt:Function,sn:"_f"},{a:1,n:"_potSize",t:4,rt:$n[0].Int32,sn:"_potSize"},{a:1,n:"_start",t:4,rt:$n[0].Int32,sn:"_start"},{a:1,n:"_step",t:4,rt:$n[0].Int32,sn:"_step"},{a:1,n:"_vertexCount",t:4,rt:$n[0].Int32,sn:"_vertexCount"}]}});$m($n[5].AssignmentEnumerator.Enumerator,function(){return{td:$n[5].AssignmentEnumerator,att:1048579,a:1,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,Function,$n[0].Int32,$n[0].Int32,$n[0].Int32],pi:[{n:"vertexCount",pt:$n[0].Int32,ps:0},{n:"f",pt:Function,ps:1},{n:"potSize",pt:$n[0].Int32,ps:2},{n:"start",dv:0,o:!0,pt:$n[0].Int32,ps:3},{n:"step",dv:1,o:!0,pt:$n[0].Int32,ps:4}],sn:"ctor"},{a:2,n:"Dispose",t:8,sn:"dispose",rt:$n[0].Void},{a:2,n:"MoveNext",t:8,sn:"moveNext",rt:$n[0].Boolean},{a:1,n:"MoveNextInternal",t:8,sn:"MoveNextInternal",rt:$n[0].Boolean},{a:2,n:"Current",t:16,rt:$n[2].List$1(System.Int64),g:{a:2,n:"get_Current",t:8,rt:$n[2].List$1(System.Int64),fg:"Current"},fn:"Current"},{a:1,n:"_current",t:4,rt:$n[2].List$1(System.Int64),sn:"_current"},{a:1,n:"_enumerators",t:4,rt:$n[2].List$1(System.Collections.Generic.IEnumerator$1(System.Int64)),sn:"_enumerators"},{a:1,n:"_step",t:4,rt:$n[0].Int32,sn:"_step"}]}});$m($n[5].ChoosabilityResult,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),$n[0].Boolean],pi:[{n:"badAssignment",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:0},{n:"canceled",dv:!1,o:!0,pt:$n[0].Boolean,ps:1}],sn:"ctor"},{a:2,n:"BadAssignment",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_BadAssignment",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"BadAssignment"},s:{a:1,n:"set_BadAssignment",t:8,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))],rt:$n[0].Void,fs:"BadAssignment"},fn:"BadAssignment"},{a:2,n:"Canceled",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_Canceled",t:8,rt:$n[0].Boolean,fg:"Canceled"},s:{a:1,n:"set_Canceled",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"Canceled"},fn:"Canceled"},{a:2,n:"IsChoosable",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsChoosable",t:8,rt:$n[0].Boolean,fg:"IsChoosable"},fn:"IsChoosable"}]}});$m($n[5].OrientationResult,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Even",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Even",t:8,rt:$n[0].Int32,fg:"Even"},s:{a:2,n:"set_Even",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Even"},fn:"Even"},{a:2,n:"Graph",t:16,rt:$n[5].Graph,g:{a:2,n:"get_Graph",t:8,rt:$n[5].Graph,fg:"Graph"},s:{a:2,n:"set_Graph",t:8,p:[$n[5].Graph],rt:$n[0].Void,fs:"Graph"},fn:"Graph"},{a:2,n:"Odd",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Odd",t:8,rt:$n[0].Int32,fg:"Odd"},s:{a:2,n:"set_Odd",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Odd"},fn:"Odd"}]}});$m($n[5].Counting,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"BinomialCoefficient",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int64,ps:0},{n:"k",pt:$n[0].Int64,ps:1}],sn:"BinomialCoefficient",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int64]},{a:2,n:"Factorial",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"Factorial",rt:$n[0].Int64,p:[$n[0].Int32]}]}});$m($n[5].GenericExtensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"EnList",is:!0,t:8,pi:[{n:"t",pt:System.Object,ps:0}],tpc:1,tprm:["T"],sn:"EnList",rt:$n[2].List$1(System.Object),p:[System.Object]},{a:2,n:"FirstIndex",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"condition",pt:Function,ps:1}],tpc:1,tprm:["T"],sn:"FirstIndex",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(System.Object),Function]},{a:2,n:"IndicesWhere",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"condition",pt:Function,ps:1}],tpc:1,tprm:["T"],sn:"IndicesWhere",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[2].IEnumerable$1(System.Object),Function]},{a:2,n:"JoinPretty",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.String),ps:0},{n:"separator",pt:$n[0].String,ps:1}],sn:"JoinPretty",rt:$n[0].String,p:[$n[2].IEnumerable$1(System.String),$n[0].String]},{a:2,n:"RemoveAll",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0},{n:"predicate",pt:Function,ps:1},{n:"onRemoved",pt:Function,ps:2}],tpc:1,tprm:["T"],sn:"RemoveAll",rt:$n[0].Int32,p:[$n[2].List$1(System.Object),Function,Function]},{a:2,n:"Shuffle",is:!0,t:8,pi:[{n:"list",pt:$n[2].IList$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"Shuffle",rt:$n[0].Void,p:[$n[2].IList$1(System.Object)]},{a:2,n:"ShuffleAll",is:!0,t:8,pi:[{n:"lists",pt:$n[2].IList$1(System.Collections.IList),ps:0}],sn:"ShuffleAll",rt:$n[0].Void,p:[$n[2].IList$1(System.Collections.IList)]}]}});$m($n[5].Graph,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Boolean,2),$n[2].List$1(System.Int32)],pi:[{n:"adjacent",pt:$n[0].Array.type(System.Boolean,2),ps:0},{n:"vertexWeight",dv:null,o:!0,pt:$n[2].List$1(System.Int32),ps:1}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)],pi:[{n:"edgeWeights",pt:$n[2].List$1(System.Int32),ps:0},{n:"vertexWeight",dv:null,o:!0,pt:$n[2].List$1(System.Int32),ps:1}],sn:"$ctor1"},{a:2,n:"AddEdge",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0},{n:"y",pt:$n[0].Int32,ps:1}],sn:"AddEdge",rt:$n[5].Graph,p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"AddEdge",t:8,pi:[{n:"v1",pt:$n[0].Int32,ps:0},{n:"v2",pt:$n[0].Int32,ps:1},{n:"directed",pt:$n[0].Boolean,ps:2}],sn:"AddEdge$1",rt:$n[5].Graph,p:[$n[0].Int32,$n[0].Int32,$n[0].Boolean]},{a:2,n:"AttachNewVertex",t:8,pi:[{n:"neighbors",pt:$n[2].IList$1(System.Int32),ps:0}],sn:"AttachNewVertex",rt:$n[5].Graph,p:[$n[2].IList$1(System.Int32)]},{a:2,n:"AttachNewVertex",t:8,pi:[{n:"neighbors",ip:!0,pt:$n[0].Array.type(System.Int32),ps:0}],sn:"AttachNewVertex$1",rt:$n[5].Graph,p:[$n[0].Array.type(System.Int32)]},{a:2,n:"CheckFGChoosable",t:8,pi:[{n:"f",pt:Function,ps:0},{n:"g",pt:Function,ps:1}],sn:"CheckFGChoosable",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[Function,Function]},{a:2,n:"Clone",t:8,sn:"Clone",rt:$n[5].Graph},{a:1,n:"CloneOutNeighbors",t:8,pi:[{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:0}],sn:"CloneOutNeighbors",rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),p:[$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:1,n:"Closure",t:8,pi:[{n:"d",pt:$n[0].Int64,ps:0},{n:"sortedNeighbors",pt:$n[2].List$1(System.Int32),ps:1},{n:"ancestorLists",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:2}],sn:"Closure",rt:$n[0].Int64,p:[$n[0].Int64,$n[2].List$1(System.Int32),$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"Complement",t:8,sn:"Complement",rt:$n[5].Graph},{a:2,n:"ComputeDiameter",t:8,sn:"ComputeDiameter",rt:$n[0].Int32},{a:2,n:"Contains",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"induced",pt:$n[0].Boolean,ps:1}],sn:"Contains",rt:$n[0].Boolean,p:[$n[5].Graph,$n[0].Boolean]},{a:2,n:"Contains",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"induced",pt:$n[0].Boolean,ps:1},{n:"condition",pt:Function,ps:2}],sn:"Contains$1",rt:$n[0].Boolean,p:[$n[5].Graph,$n[0].Boolean,Function]},{a:1,n:"Contains",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"induced",pt:$n[0].Boolean,ps:1},{n:"condition",pt:Function,ps:2},{n:"tau",pt:$n[0].Array.type(System.Int32),ps:3},{n:"placed",pt:$n[2].List$1(System.Int32),ps:4},{n:"v",pt:$n[0].Int32,ps:5}],sn:"Contains$2",rt:$n[0].Boolean,p:[$n[5].Graph,$n[0].Boolean,Function,$n[0].Array.type(System.Int32),$n[2].List$1(System.Int32),$n[0].Int32]},{a:2,n:"ContainsInduced",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0}],sn:"ContainsInduced",rt:$n[0].Boolean,p:[$n[5].Graph]},{a:2,n:"ContainsInducedOld",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0}],sn:"ContainsInducedOld",rt:$n[0].Boolean,p:[$n[5].Graph]},{a:2,n:"CountSpanningEulerianSubgraphs",t:8,pi:[{n:"even",out:!0,pt:$n[0].Int32,ps:0},{n:"odd",out:!0,pt:$n[0].Int32,ps:1}],sn:"CountSpanningEulerianSubgraphs",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"CountSpanningEulerianSubgraphsUsingEdges",t:8,pi:[{n:"edges",pt:$n[2].List$1(System.Object),ps:0},{n:"even",out:!0,pt:$n[0].Int32,ps:1},{n:"odd",out:!0,pt:$n[0].Int32,ps:2}],sn:"CountSpanningEulerianSubgraphsUsingEdges",rt:$n[0].Void,p:[$n[2].List$1(System.Object),$n[0].Int32,$n[0].Int32]},{a:2,n:"CountSpanningEulerianSubgraphsUsingVertices",t:8,pi:[{n:"vertices",pt:$n[2].List$1(System.Int32),ps:0},{n:"even",out:!0,pt:$n[0].Int32,ps:1},{n:"odd",out:!0,pt:$n[0].Int32,ps:2}],sn:"CountSpanningEulerianSubgraphsUsingVertices",rt:$n[0].Void,p:[$n[2].List$1(System.Int32),$n[0].Int32,$n[0].Int32]},{a:2,n:"Degree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"Degree",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"DegreeInSubgraph",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:1}],sn:"DegreeInSubgraph",rt:$n[0].Int32,p:[$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"Direction",t:8,pi:[{n:"e",pt:$n[0].Object,ps:0}],sn:"Direction",rt:$n[0].Int32,p:[$n[0].Object]},{a:2,n:"DisjointUnion",t:8,pi:[{n:"H",pt:$n[5].Graph,ps:0}],sn:"DisjointUnion",rt:$n[5].Graph,p:[$n[5].Graph]},{a:2,n:"EdgeIndicesOn",t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0}],sn:"EdgeIndicesOn",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int32)]},{a:2,n:"EdgesBetween",t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"EdgesBetween",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"EdgesOn",t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0}],sn:"EdgesOn",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32)]},{a:2,n:"EnumerateAcyclicOrientations",t:8,sn:"EnumerateAcyclicOrientations",rt:$n[2].IEnumerable$1(Algorithms.Graph)},{a:1,n:"EnumerateAcyclicOrientations",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"EnumerateAcyclicOrientations$1",rt:$n[2].IEnumerable$1(Algorithms.Graph),p:[$n[0].Int32,$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:1,n:"EnumerateBronKerbosch",t:8,pi:[{n:"P",pt:$n[2].List$1(System.Int32),ps:0},{n:"R",pt:$n[2].List$1(System.Int32),ps:1},{n:"X",pt:$n[2].List$1(System.Int32),ps:2}],sn:"EnumerateBronKerbosch",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"EnumerateConnectedOrderings",t:8,pi:[{n:"initialVertices",pt:$n[2].List$1(System.Int32),ps:0}],sn:"EnumerateConnectedOrderings",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int32)]},{a:1,n:"EnumerateLegalDirectionAssignments",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"sortedNeighbors",pt:$n[2].List$1(System.Int32),ps:1},{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:2}],sn:"EnumerateLegalDirectionAssignments",rt:$n[2].IEnumerable$1(System.Int64),p:[$n[0].Int32,$n[2].List$1(System.Int32),$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"EnumerateMaximalIndependentSets",t:8,sn:"EnumerateMaximalIndependentSets",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int32))},{a:2,n:"EnumerateMaximalIndependentSets",t:8,pi:[{n:"set",pt:$n[2].List$1(System.Int32),ps:0}],sn:"EnumerateMaximalIndependentSets$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int32)]},{a:2,n:"EnumerateOrientations",t:8,pi:[{n:"fast",dv:!1,o:!0,pt:$n[0].Boolean,ps:0}],sn:"EnumerateOrientations",rt:$n[2].IEnumerable$1(Algorithms.Graph),p:[$n[0].Boolean]},{a:2,n:"EnumerateOrientations",t:8,pi:[{n:"requiredIndegree",pt:Function,ps:0}],sn:"EnumerateOrientations$1",rt:$n[2].IEnumerable$1(Algorithms.Graph),p:[Function]},{a:1,n:"EnumerateOrientationsFor",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"requiredIndegree",pt:Function,ps:1},{n:"gain",pt:$n[0].Array.type(System.Int32),ps:2}],sn:"EnumerateOrientationsFor",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Int32,Function,$n[0].Array.type(System.Int32)]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{a:2,n:"Factor",t:8,sn:"Factor",rt:$n[2].IEnumerable$1(Algorithms.Graph)},{a:2,n:"FindChiColoring",t:8,sn:"FindChiColoring",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32))},{a:2,n:"FindComponents",t:8,sn:"FindComponents",rt:$n[9].EquivalenceRelation$1(System.Int32)},{a:2,n:"FindComponents",t:8,pi:[{n:"v",pt:$n[2].List$1(System.Int32),ps:0}],sn:"FindComponents$1",rt:$n[9].EquivalenceRelation$1(System.Int32),p:[$n[2].List$1(System.Int32)]},{a:2,n:"FindFactors",t:8,sn:"FindFactors",rt:$n[9].EquivalenceRelation$1(System.Int32)},{a:2,n:"FindKColoring",t:8,pi:[{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:0},{n:"K",pt:$n[0].Int32,ps:1}],sn:"FindKColoring",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int32),$n[0].Int32]},{a:2,n:"FloydWarshall",t:8,pi:[{n:"distance",out:!0,pt:$n[0].Array.type(System.Int32,2),ps:0},{n:"next",out:!0,pt:$n[0].Array.type(System.Int32,2),ps:1}],sn:"FloydWarshall",rt:$n[0].Void,p:[$n[0].Array.type(System.Int32,2),$n[0].Array.type(System.Int32,2)]},{a:2,n:"FloydWarshallShortestPath",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"w",pt:$n[0].Int32,ps:1},{n:"distance",pt:$n[0].Array.type(System.Int32,2),ps:2},{n:"next",pt:$n[0].Array.type(System.Int32,2),ps:3}],sn:"FloydWarshallShortestPath",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Int32,2),$n[0].Array.type(System.Int32,2)]},{a:2,n:"FromOutNeighborLists",t:8,pi:[{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:0}],sn:"FromOutNeighborLists",rt:$n[5].Graph,p:[$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"GenerateRandomOrientation",t:8,sn:"GenerateRandomOrientation",rt:$n[5].Graph},{a:1,n:"GetAncestorLists",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"GetAncestorLists",rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),p:[$n[0].Int32,$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:1,n:"GetArbitraryEdge",t:8,sn:"GetArbitraryEdge",rt:$n[0].Object},{a:2,n:"GetDegreeMinusKFunc",t:8,pi:[{n:"k",pt:$n[0].Int32,ps:0}],sn:"GetDegreeMinusKFunc",rt:Function,p:[$n[0].Int32]},{a:1,n:"GetEdgeTuples",t:8,sn:"GetEdgeTuples",rt:$n[2].List$1(System.Object)},{a:2,n:"GetEdgeWeights",t:8,sn:"GetEdgeWeights",rt:$n[2].List$1(System.Int32)},{a:2,n:"GetEdgeWeights",t:8,pi:[{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:0}],sn:"GetEdgeWeights$2",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int32)]},{a:2,n:"GetEdgeWeights",t:8,pi:[{n:"adjacent",pt:$n[0].Array.type(System.Boolean,2),ps:0},{n:"directed",pt:$n[0].Array.type(System.Boolean,2),ps:1}],sn:"GetEdgeWeights$1",rt:$n[2].List$1(System.Int32),p:[$n[0].Array.type(System.Boolean,2),$n[0].Array.type(System.Boolean,2)]},{a:1,n:"GetEdgeWeights",t:8,pi:[{n:"removedVertices",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"removedEdges",pt:$n[2].IEnumerable$1(System.Object),ps:1}],sn:"GetEdgeWeights$4",rt:$n[2].List$1(System.Int32),p:[$n[2].IEnumerable$1(System.Int32),$n[2].IEnumerable$1(System.Object)]},{a:1,n:"GetEdgeWeights",t:8,pi:[{n:"adjacent",pt:$n[0].Array.type(System.Boolean,2),ps:0},{n:"directed",pt:$n[0].Array.type(System.Boolean,2),ps:1},{n:"removedVertices",pt:$n[2].IEnumerable$1(System.Int32),ps:2},{n:"removedEdges",pt:$n[2].IEnumerable$1(System.Object),ps:3}],sn:"GetEdgeWeights$3",rt:$n[2].List$1(System.Int32),p:[$n[0].Array.type(System.Boolean,2),$n[0].Array.type(System.Boolean,2),$n[2].IEnumerable$1(System.Int32),$n[2].IEnumerable$1(System.Object)]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"GreedyColor",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"subset",pt:$n[2].List$1(System.Int32),ps:1}],sn:"GreedyColor",rt:$n[0].Int32,p:[$n[2].List$1(System.Int64),$n[2].List$1(System.Int32)]},{a:2,n:"InDegree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"InDegree",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"IndependenceNumber",t:8,sn:"IndependenceNumber",rt:$n[0].Int32},{a:2,n:"IndependenceNumber",t:8,pi:[{n:"subgraph",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"IndependenceNumber$1",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(System.Int32)]},{a:1,n:"IndependentSetsInSubgraph",t:8,pi:[{n:"firstVertex",pt:$n[0].Int32,ps:0}],sn:"IndependentSetsInSubgraph",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[0].Int32]},{a:2,n:"InducedSubgraph",t:8,pi:[{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:0}],sn:"InducedSubgraph",rt:$n[5].Graph,p:[$n[2].List$1(System.Int32)]},{a:1,n:"Initialize",t:8,sn:"Initialize",rt:$n[0].Void},{a:1,n:"InitializeLazyLoaders",t:8,sn:"InitializeLazyLoaders",rt:$n[0].Void},{a:2,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0}],sn:"IsChoosable",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64)]},{a:2,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"subset",pt:$n[2].List$1(System.Int32),ps:1}],sn:"IsChoosable$1",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64),$n[2].List$1(System.Int32)]},{a:1,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"v",pt:$n[0].Int32,ps:1}],sn:"IsChoosable$2",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64),$n[0].Int32]},{a:1,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"v",pt:$n[0].Int32,ps:1},{n:"subset",pt:$n[2].List$1(System.Int32),ps:2}],sn:"IsChoosable$3",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64),$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"IsClique",t:8,pi:[{n:"subset",pt:$n[2].List$1(System.Int32),ps:0}],sn:"IsClique",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32)]},{a:2,n:"IsCliqueCovering",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0}],sn:"IsCliqueCovering",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64)]},{a:2,n:"IsCliqueNumberAtLeast",t:8,pi:[{n:"k",pt:$n[0].Int32,ps:0}],sn:"IsCliqueNumberAtLeast",rt:$n[0].Boolean,p:[$n[0].Int32]},{a:2,n:"IsComplete",t:8,sn:"IsComplete",rt:$n[0].Boolean},{a:1,n:"IsGColorable",t:8,pi:[{n:"L",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:0},{n:"g",pt:Function,ps:1}],sn:"IsGColorable",rt:$n[0].Boolean,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),Function]},{a:2,n:"IsIndependent",t:8,pi:[{n:"subset",pt:$n[2].List$1(System.Int32),ps:0}],sn:"IsIndependent",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32)]},{a:1,n:"IsIndependentOf",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"set",pt:$n[2].List$1(System.Int32),ps:1}],sn:"IsIndependentOf",rt:$n[0].Boolean,p:[$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"IsOnlineFChoosable",t:8,pi:[{n:"f",pt:Function,ps:0}],sn:"IsOnlineFChoosable",rt:$n[0].Boolean,p:[Function]},{a:1,n:"IsOnlineFChoosable",t:8,pi:[{n:"f",pt:$n[0].Array.type(System.Int32),ps:0},{n:"g",pt:$n[0].Array.type(System.Int32),ps:1},{n:"cache",pt:$n[2].Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean),ps:2}],sn:"IsOnlineFChoosable$1",rt:$n[0].Boolean,p:[$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32),$n[2].Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean)]},{a:2,n:"IsOnlineFGChoosable",t:8,pi:[{n:"f",pt:Function,ps:0},{n:"g",pt:Function,ps:1}],sn:"IsOnlineFGChoosable",rt:$n[0].Boolean,p:[Function,Function]},{a:1,n:"IsOnlineFGChoosable",t:8,pi:[{n:"f",pt:$n[0].Array.type(System.Int32),ps:0},{n:"g",pt:$n[0].Array.type(System.Int32),ps:1},{n:"cache",pt:$n[2].Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean),ps:2}],sn:"IsOnlineFGChoosable$1",rt:$n[0].Boolean,p:[$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32),$n[2].Dictionary$2(Algorithms.OnlineChoiceHashGraph,System.Boolean)]},{a:1,n:"IsProperColoring",t:8,pi:[{n:"coloring",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:0}],sn:"IsProperColoring",rt:$n[0].Boolean,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:1,n:"IsProperFactor",t:8,pi:[{n:"subset",pt:$n[2].List$1(System.Int32),ps:0}],sn:"IsProperFactor",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32)]},{a:2,n:"IsRegular",t:8,sn:"IsRegular",rt:$n[0].Boolean},{a:2,n:"IsSpanningSubgraphOf",t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0}],sn:"IsSpanningSubgraphOf",rt:$n[0].Boolean,p:[$n[5].Graph]},{a:2,n:"Isomorphic",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"Isomorphic",rt:$n[0].Boolean,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"Join",t:8,pi:[{n:"H",pt:$n[5].Graph,ps:0}],sn:"Join",rt:$n[5].Graph,p:[$n[5].Graph]},{a:1,n:"MatchesOutMinusIn",t:8,pi:[{n:"outMinusIn",pt:$n[2].List$1(System.Int32),ps:0}],sn:"MatchesOutMinusIn",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32)]},{a:2,n:"MaxColorableSubset",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"subset",pt:$n[2].List$1(System.Int32),ps:1}],sn:"MaxColorableSubset",rt:$n[0].Int32,p:[$n[2].List$1(System.Int64),$n[2].List$1(System.Int32)]},{a:1,n:"MaxColorableSubset",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"v",pt:$n[0].Int32,ps:1},{n:"subset",pt:$n[2].List$1(System.Int32),ps:2}],sn:"MaxColorableSubset$1",rt:$n[0].Int32,p:[$n[2].List$1(System.Int64),$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"MaximumIndependentSubset",t:8,pi:[{n:"subgraph",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"MaximumIndependentSubset",rt:$n[2].List$1(System.Int32),p:[$n[2].IEnumerable$1(System.Int32)]},{a:1,n:"MaybeIsomorphic",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"MaybeIsomorphic",rt:$n[0].Boolean,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"Mic",t:8,sn:"Mic",rt:$n[0].Int32},{a:2,n:"NeighborsInSubgraph",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:1}],sn:"NeighborsInSubgraph",rt:$n[2].List$1(System.Int32),p:[$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"OutDegree",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"OutDegree",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"PermuteVertices",t:8,pi:[{n:"p",pt:$n[9].Permutation,ps:0}],sn:"PermuteVertices",rt:$n[5].Graph,p:[$n[9].Permutation]},{a:2,n:"RemoveEdge",t:8,pi:[{n:"e",pt:$n[0].Object,ps:0}],sn:"RemoveEdge$1",rt:$n[5].Graph,p:[$n[0].Object]},{a:2,n:"RemoveEdge",t:8,pi:[{n:"v1",pt:$n[0].Int32,ps:0},{n:"v2",pt:$n[0].Int32,ps:1}],sn:"RemoveEdge",rt:$n[5].Graph,p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"RemoveVertex",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0}],sn:"RemoveVertex",rt:$n[5].Graph,p:[$n[0].Int32]},{a:1,n:"SetupNeighbors",t:8,sn:"SetupNeighbors",rt:$n[0].Void},{a:2,n:"SpanningEulerianSubgraphs",t:8,pi:[{n:"edges",pt:$n[2].List$1(System.Object),ps:0},{n:"spanningEulerianOrientationsCache",pt:$n[2].Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph)),ps:1}],sn:"SpanningEulerianSubgraphs",rt:$n[2].List$1(Algorithms.Graph),p:[$n[2].List$1(System.Object),$n[2].Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph))]},{a:2,n:"SpanningOutMinusInSubgraphs",t:8,pi:[{n:"outMinusIn",pt:$n[2].List$1(System.Int32),ps:0},{n:"edges",pt:$n[2].List$1(System.Object),ps:1},{n:"spanningEulerianOrientationsCache",pt:$n[2].Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph)),ps:2}],sn:"SpanningOutMinusInSubgraphs",rt:$n[2].List$1(Algorithms.Graph),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Object),$n[2].Dictionary$2(Algorithms.OrientationHashGraph,System.Collections.Generic.List$1(Algorithms.Graph))]},{a:2,n:"Square",t:8,sn:"Square",rt:$n[5].Graph},{a:2,n:"SumOverSubgraphNeighbors",t:8,pi:[{n:"v",pt:$n[0].Int32,ps:0},{n:"subgraph",pt:$n[2].List$1(System.Int32),ps:1},{n:"g",pt:$n[0].Array.type(System.Int32),ps:2}],sn:"SumOverSubgraphNeighbors",rt:$n[0].Int32,p:[$n[0].Int32,$n[2].List$1(System.Int32),$n[0].Array.type(System.Int32)]},{a:2,n:"ToDotForTikz",t:8,sn:"ToDotForTikz",rt:$n[0].String},{a:2,n:"ToDotWithFactors",t:8,pi:[{n:"labelEdges",dv:!1,o:!0,pt:$n[0].Boolean,ps:0}],sn:"ToDotWithFactors",rt:$n[0].String,p:[$n[0].Boolean]},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:1,n:"TomitaPivot",t:8,pi:[{n:"P",pt:$n[2].List$1(System.Int32),ps:0},{n:"X",pt:$n[2].List$1(System.Int32),ps:1}],sn:"TomitaPivot",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:1,n:"TopologicalSort",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"vertices",pt:$n[2].List$1(System.Int32),ps:1},{n:"outNeighbors",pt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),ps:2}],sn:"TopologicalSort",rt:$n[2].List$1(System.Int32),p:[$n[0].Int32,$n[2].List$1(System.Int32),$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"op_Addition",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"op_Addition",rt:$n[5].Graph,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"op_Equality",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"op_Equality",rt:$n[0].Boolean,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"op_Inequality",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"op_Inequality",rt:$n[0].Boolean,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"A",pt:$n[5].Graph,ps:0},{n:"B",pt:$n[5].Graph,ps:1}],sn:"op_Multiply",rt:$n[5].Graph,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"k",pt:$n[0].Int32,ps:0},{n:"A",pt:$n[5].Graph,ps:1}],sn:"op_Multiply$1",rt:$n[5].Graph,p:[$n[0].Int32,$n[5].Graph]},{a:2,n:"Adjacent",t:16,rt:$n[0].Array.type(System.Boolean,2),g:{a:2,n:"get_Adjacent",t:8,rt:$n[0].Array.type(System.Boolean,2),fg:"Adjacent"},fn:"Adjacent"},{a:2,n:"ComplementNeighbors",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_ComplementNeighbors",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"ComplementNeighbors"},fn:"ComplementNeighbors"},{a:2,n:"DegreeSequence",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),g:{a:2,n:"get_DegreeSequence",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),fg:"DegreeSequence"},s:{a:1,n:"set_DegreeSequence",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int32))],rt:$n[0].Void,fs:"DegreeSequence"},fn:"DegreeSequence"},{a:2,n:"Directed",t:16,rt:$n[0].Array.type(System.Boolean,2),g:{a:2,n:"get_Directed",t:8,rt:$n[0].Array.type(System.Boolean,2),fg:"Directed"},s:{a:1,n:"set_Directed",t:8,p:[$n[0].Array.type(System.Boolean,2)],rt:$n[0].Void,fs:"Directed"},fn:"Directed"},{a:2,n:"E",t:16,rt:$n[0].Int32,g:{a:2,n:"get_E",t:8,rt:$n[0].Int32,fg:"E"},fn:"E"},{a:2,n:"EdgeWeightsWithMultiplicity",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_EdgeWeightsWithMultiplicity",t:8,rt:$n[2].List$1(System.Int32),fg:"EdgeWeightsWithMultiplicity"},s:{a:2,n:"set_EdgeWeightsWithMultiplicity",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"EdgeWeightsWithMultiplicity"},fn:"EdgeWeightsWithMultiplicity"},{a:2,n:"InDegreeSequence",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),g:{a:2,n:"get_InDegreeSequence",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),fg:"InDegreeSequence"},s:{a:1,n:"set_InDegreeSequence",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int32))],rt:$n[0].Void,fs:"InDegreeSequence"},fn:"InDegreeSequence"},{a:2,n:"InNeighbors",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_InNeighbors",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"InNeighbors"},fn:"InNeighbors"},{a:2,n:"IndependentSets",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_IndependentSets",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"IndependentSets"},fn:"IndependentSets"},{a:2,n:"Item",t:16,rt:$n[0].Boolean,p:[$n[0].Int32,$n[0].Int32],i:!0,ipi:[{n:"x",pt:$n[0].Int32,ps:0},{n:"y",pt:$n[0].Int32,ps:1}],g:{a:2,n:"get_Item",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0},{n:"y",pt:$n[0].Int32,ps:1}],sn:"getItem",rt:$n[0].Boolean,p:[$n[0].Int32,$n[0].Int32]}},{a:2,n:"MaxDegree",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxDegree",t:8,rt:$n[0].Int32,fg:"MaxDegree"},fn:"MaxDegree"},{a:2,n:"MaxInDegree",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxInDegree",t:8,rt:$n[0].Int32,fg:"MaxInDegree"},fn:"MaxInDegree"},{a:2,n:"MaxOutDegree",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxOutDegree",t:8,rt:$n[0].Int32,fg:"MaxOutDegree"},fn:"MaxOutDegree"},{a:2,n:"MaximalIndependentSets",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_MaximalIndependentSets",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"MaximalIndependentSets"},fn:"MaximalIndependentSets"},{a:2,n:"MemoizeEulerianSubgraphCounting",is:!0,t:16,rt:$n[0].Boolean,g:{a:2,n:"get_MemoizeEulerianSubgraphCounting",t:8,rt:$n[0].Boolean,fg:"MemoizeEulerianSubgraphCounting",is:!0},s:{a:2,n:"set_MemoizeEulerianSubgraphCounting",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"MemoizeEulerianSubgraphCounting",is:!0},fn:"MemoizeEulerianSubgraphCounting"},{a:2,n:"MinDegree",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MinDegree",t:8,rt:$n[0].Int32,fg:"MinDegree"},fn:"MinDegree"},{a:2,n:"N",t:16,rt:$n[0].Int32,g:{a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"N"},s:{a:1,n:"set_N",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"N"},fn:"N"},{a:2,n:"Neighbors",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_Neighbors",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"Neighbors"},fn:"Neighbors"},{a:2,n:"NodeInvariantOne",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),g:{a:2,n:"get_NodeInvariantOne",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),fg:"NodeInvariantOne"},s:{a:1,n:"set_NodeInvariantOne",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int32))],rt:$n[0].Void,fs:"NodeInvariantOne"},fn:"NodeInvariantOne"},{a:2,n:"NodeInvariantTwo",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),g:{a:2,n:"get_NodeInvariantTwo",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),fg:"NodeInvariantTwo"},s:{a:1,n:"set_NodeInvariantTwo",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int32))],rt:$n[0].Void,fs:"NodeInvariantTwo"},fn:"NodeInvariantTwo"},{a:2,n:"OutDegreeSequence",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),g:{a:2,n:"get_OutDegreeSequence",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int32)),fg:"OutDegreeSequence"},s:{a:1,n:"set_OutDegreeSequence",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int32))],rt:$n[0].Void,fs:"OutDegreeSequence"},fn:"OutDegreeSequence"},{a:2,n:"OutNeighbors",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_OutNeighbors",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"OutNeighbors"},fn:"OutNeighbors"},{a:2,n:"Size",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Size",t:8,rt:$n[0].Int32,fg:"Size"},fn:"Size"},{a:1,n:"TransitivePartition",t:16,rt:$n[5].TransitivePartition,g:{a:1,n:"get_TransitivePartition",t:8,rt:$n[5].TransitivePartition,fg:"TransitivePartition"},s:{a:1,n:"set_TransitivePartition",t:8,p:[$n[5].TransitivePartition],rt:$n[0].Void,fs:"TransitivePartition"},fn:"TransitivePartition"},{a:2,n:"VertexWeight",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_VertexWeight",t:8,rt:$n[2].List$1(System.Int32),fg:"VertexWeight"},s:{a:2,n:"set_VertexWeight",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"VertexWeight"},fn:"VertexWeight"},{a:2,n:"Vertices",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Vertices",t:8,rt:$n[2].List$1(System.Int32),fg:"Vertices"},fn:"Vertices"},{a:2,n:"CacheHits",is:!0,t:4,rt:$n[0].Int64,sn:"CacheHits"},{a:1,n:"DotColors",is:!0,t:4,rt:$n[2].List$1(System.String),sn:"DotColors",ro:!0},{a:2,n:"NodesVisited",is:!0,t:4,rt:$n[0].Int64,sn:"NodesVisited"},{a:1,n:"RNG",is:!0,t:4,rt:$n[0].Random,sn:"RNG"},{a:1,n:"TikzColors",is:!0,t:4,rt:$n[2].List$1(System.String),sn:"TikzColors",ro:!0},{a:1,n:"_adjacent",t:4,rt:$n[0].Array.type(System.Boolean,2),sn:"_adjacent"},{a:1,n:"_complementNeighbors",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_complementNeighbors"},{a:1,n:"_e",t:4,rt:$n[5].Lazy$1(System.Int32),sn:"_e"},{a:1,n:"_inNeighbors",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_inNeighbors"},{a:1,n:"_independentSets",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_independentSets"},{a:1,n:"_independentThreeSets",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_independentThreeSets"},{a:1,n:"_independentTwoSets",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_independentTwoSets"},{a:2,n:"_laterNeighbors",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_laterNeighbors"},{a:1,n:"_maximalIndependentSets",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_maximalIndependentSets"},{a:1,n:"_neighbors",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_neighbors"},{a:1,n:"_outNeighbors",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_outNeighbors"},{a:1,n:"_vertexSubsets",t:4,rt:$n[5].Lazy$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),sn:"_vertexSubsets"},{a:1,n:"_vertices",t:4,rt:$n[2].List$1(System.Int32),sn:"_vertices"}]}});$m($n[5].Graph.IsomorphismComparer,function(){return{td:$n[5].Graph,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"x",pt:$n[5].Graph,ps:0},{n:"y",pt:$n[5].Graph,ps:1}],sn:"equals2",rt:$n[0].Boolean,p:[$n[5].Graph,$n[5].Graph]},{a:2,n:"GetHashCode",t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"getHashCode2",rt:$n[0].Int32,p:[$n[5].Graph]}]}});$m($n[5].Graphs,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"C",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"C",rt:$n[5].Graph,p:[$n[0].Int32]},{a:2,n:"E",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"E",rt:$n[5].Graph,p:[$n[0].Int32]},{a:2,n:"K",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"K",rt:$n[5].Graph,p:[$n[0].Int32]},{a:2,n:"P",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"P",rt:$n[5].Graph,p:[$n[0].Int32]},{a:2,n:"Star",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"Star",rt:$n[5].Graph,p:[$n[0].Int32]},{a:2,n:"Bull",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Bull",t:8,rt:$n[5].Graph,fg:"Bull",is:!0},fn:"Bull"},{a:2,n:"Chair",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Chair",t:8,rt:$n[5].Graph,fg:"Chair",is:!0},fn:"Chair"},{a:2,n:"Dart",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Dart",t:8,rt:$n[5].Graph,fg:"Dart",is:!0},fn:"Dart"},{a:2,n:"Diamond",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Diamond",t:8,rt:$n[5].Graph,fg:"Diamond",is:!0},fn:"Diamond"},{a:2,n:"Empty",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Empty",t:8,rt:$n[5].Graph,fg:"Empty",is:!0},fn:"Empty"},{a:2,n:"H",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_H",t:8,rt:$n[5].Graph,fg:"H",is:!0},fn:"H"},{a:2,n:"Kite",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Kite",t:8,rt:$n[5].Graph,fg:"Kite",is:!0},fn:"Kite"},{a:2,n:"Paw",is:!0,t:16,rt:$n[5].Graph,g:{a:2,n:"get_Paw",t:8,rt:$n[5].Graph,fg:"Paw",is:!0},fn:"Paw"}]}});$m($n[5].HashGraph,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph,$n[2].List$1(System.Int32)],pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"outMinusIn",pt:$n[2].List$1(System.Int32),ps:1}],sn:"ctor"},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_outMinusIn",t:4,rt:$n[2].List$1(System.Int32),sn:"_outMinusIn"},{a:1,n:"_values",t:4,rt:$n[0].Array.type(System.Byte),sn:"_values"}]}});$m($n[5].HereditaryClassEnumeration,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"EnumerateClass",is:!0,t:8,pi:[{n:"excluded",ip:!0,pt:System.Array.type(Algorithms.Graph),ps:0}],sn:"EnumerateClass",rt:$n[2].IEnumerable$1(Algorithms.Graph),p:[System.Array.type(Algorithms.Graph)]},{a:2,n:"EnumerateClass",is:!0,t:8,pi:[{n:"excluded",pt:$n[2].List$1(Algorithms.Graph),ps:0},{n:"maxVertices",dv:2147483647,o:!0,pt:$n[0].Int32,ps:1}],sn:"EnumerateClass$1",rt:$n[2].IEnumerable$1(Algorithms.Graph),p:[$n[2].List$1(Algorithms.Graph),$n[0].Int32]},{a:1,n:"_sizeComparer",is:!0,t:4,rt:$n[5].HereditaryClassEnumeration.SizeComparer,sn:"_sizeComparer",ro:!0}]}});$m($n[5].HereditaryClassEnumeration.SizeComparer,function(){return{td:$n[5].HereditaryClassEnumeration,att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0},{n:"y",pt:$n[2].List$1(System.Int32),ps:1}],sn:"equals2",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"GetHashCode",t:8,pi:[{n:"obj",pt:$n[2].List$1(System.Int32),ps:0}],sn:"getHashCode2",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32)]}]}});$m($n[5].Hypergraph$1,function(T){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Collections.Generic.List$1(T))],pi:[{n:"edges",dv:null,o:!0,pt:$n[2].List$1(System.Collections.Generic.List$1(T)),ps:0}],sn:"ctor"},{a:1,n:"EdgeHypergraph",t:8,pi:[{n:"e",pt:$n[2].List$1(T),ps:0}],sn:"EdgeHypergraph",rt:$n[5].Hypergraph$1(T),p:[$n[2].List$1(T)]},{a:2,n:"Min",t:8,sn:"Min",rt:$n[5].Hypergraph$1(T)},{a:2,n:"Product",t:8,pi:[{n:"other",pt:$n[5].Hypergraph$1(T),ps:0}],sn:"Product",rt:$n[5].Hypergraph$1(T),p:[$n[5].Hypergraph$1(T)]},{a:2,n:"Tr",t:8,sn:"Tr",rt:$n[5].Hypergraph$1(T)},{a:2,n:"Union",t:8,pi:[{n:"other",pt:$n[5].Hypergraph$1(T),ps:0}],sn:"Union",rt:$n[5].Hypergraph$1(T),p:[$n[5].Hypergraph$1(T)]},{a:2,n:"E",t:16,rt:$n[2].HashSet$1(System.Collections.Generic.List$1(T)),g:{a:2,n:"get_E",t:8,rt:$n[2].HashSet$1(System.Collections.Generic.List$1(T)),fg:"E"},s:{a:1,n:"set_E",t:8,p:[$n[2].HashSet$1(System.Collections.Generic.List$1(T))],rt:$n[0].Void,fs:"E"},fn:"E"},{a:1,n:"_listComparer",t:4,rt:$n[5].Hypergraph$1.SortedListComparer(T),sn:"_listComparer"}]}});$m($n[5].Hypergraph$1.SortedListComparer,function(T){return{td:$n[5].Hypergraph$1(T),att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"x",pt:$n[2].List$1(T),ps:0},{n:"y",pt:$n[2].List$1(T),ps:1}],sn:"equals2",rt:$n[0].Boolean,p:[$n[2].List$1(T),$n[2].List$1(T)]},{a:2,n:"GetHashCode",t:8,pi:[{n:"list",pt:$n[2].List$1(T),ps:0}],sn:"getHashCode2",rt:$n[0].Int32,p:[$n[2].List$1(T)]}]}});$m($n[5].Int32Usage,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"GetAndClearLeastSignificantBit",is:!0,t:8,pi:[{n:"x",ref:!0,pt:$n[0].Int32,ps:0}],sn:"GetAndClearLeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"LeastSignificantBit",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0}],sn:"LeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int32]},{a:2,n:"PopulationCount",is:!0,t:8,pi:[{n:"b",pt:$n[0].UInt32,ps:0}],sn:"PopulationCount",rt:$n[0].Int32,p:[$n[0].UInt32]},{a:2,n:"ToSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt32,ps:0}],sn:"ToSet",rt:$n[2].List$1(System.Int32),p:[$n[0].UInt32]},{a:1,n:"DeBruijnLookup",is:!0,t:4,rt:$n[0].Array.type(System.Int32),sn:"DeBruijnLookup"},{a:1,n:"DeBruijnMultiplier",is:!0,t:4,rt:$n[0].UInt32,sn:"DeBruijnMultiplier"}]}});$m($n[5].Int64Usage,function(){return{att:385,a:2,s:!0,m:[{n:".cctor",t:1,sn:"ctor",sm:!0},{a:2,n:"AllSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"i",pt:$n[0].Int32,ps:1}],sn:"AllSet",rt:$n[0].Boolean,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"ClearBit",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bit",pt:$n[0].Int32,ps:1}],sn:"ClearBit",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"EnumerateBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"EnumerateBits",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int64]},{a:2,n:"ExpandIntoLists",is:!0,t:8,pi:[{n:"xs",pt:$n[2].List$1(System.Int64),ps:0}],sn:"ExpandIntoLists",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int64)]},{a:2,n:"FlipBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bit",pt:$n[0].Int32,ps:1}],sn:"FlipBits",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"FlipBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bits",ip:!0,pt:$n[0].Array.type(System.Int32),ps:1}],sn:"FlipBits$2",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Array.type(System.Int32)]},{a:2,n:"FlipBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bit1",pt:$n[0].Int32,ps:1},{n:"bit2",pt:$n[0].Int32,ps:2}],sn:"FlipBits$1",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int32,$n[0].Int32]},{a:2,n:"GeneratePairMasks",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"GeneratePairMasks",rt:$n[2].Dictionary$2(System.Int64,System.Int64),p:[$n[0].Int32]},{a:2,n:"GetAndClearLeastSignificantBit",is:!0,t:8,pi:[{n:"x",ref:!0,pt:$n[0].Int64,ps:0}],sn:"GetAndClearLeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"GetBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"GetBits",rt:$n[2].List$1(System.Int64),p:[$n[0].Int64]},{a:2,n:"GetBits",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt64,ps:0}],sn:"GetBits$1",rt:$n[2].List$1(System.UInt64),p:[$n[0].UInt64]},{a:2,n:"IsBitSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bit",pt:$n[0].Int32,ps:1}],sn:"IsBitSet",rt:$n[0].Boolean,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"LeastSignificantBit",is:!0,t:8,pi:[{n:"b",pt:$n[0].Int64,ps:0}],sn:"LeastSignificantBit",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"PopulationCount",is:!0,t:8,pi:[{n:"b",pt:$n[0].Int64,ps:0}],sn:"PopulationCount",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"PopulationCount",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt64,ps:0}],sn:"PopulationCount$1",rt:$n[0].Int32,p:[$n[0].UInt64]},{a:2,n:"RightFillToMSB",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt64,ps:0}],sn:"RightFillToMSB",rt:$n[0].UInt64,p:[$n[0].UInt64]},{a:2,n:"SetBit",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"bit",pt:$n[0].Int32,ps:1}],sn:"SetBit",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"ToBitString",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"length",dv:64,o:!0,pt:$n[0].Int32,ps:1}],sn:"ToBitString",rt:$n[0].String,p:[$n[0].Int64,$n[0].Int32]},{a:2,n:"ToInt64",is:!0,t:8,pi:[{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToInt64",rt:$n[0].Int64,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"ToInt64",is:!0,t:8,pi:[{n:"bits",ip:!0,pt:$n[0].Array.type(System.Int32),ps:0}],sn:"ToInt64$1",rt:$n[0].Int64,p:[$n[0].Array.type(System.Int32)]},{a:2,n:"ToSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"ToSet",rt:$n[2].List$1(System.Int32),p:[$n[0].Int64]},{a:2,n:"ToSet",is:!0,t:8,pi:[{n:"x",pt:$n[0].UInt64,ps:0}],sn:"ToSet$1",rt:$n[2].List$1(System.Int32),p:[$n[0].UInt64]},{a:2,n:"ToSetString",is:!0,t:8,pi:[{n:"list",pt:$n[2].IEnumerable$1(System.Int64),ps:0}],sn:"ToSetString$1",rt:$n[0].String,p:[$n[2].IEnumerable$1(System.Int64)]},{a:2,n:"ToSetString",is:!0,t:8,pi:[{n:"list",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToSetString",rt:$n[0].String,p:[$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"ToSetString",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"ToSetString$2",rt:$n[0].String,p:[$n[0].Int64]},{a:2,n:"ToSetStringSmall",is:!0,t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0}],sn:"ToSetStringSmall",rt:$n[0].String,p:[$n[0].Int64]},{a:2,n:"ToUInt64",is:!0,t:8,pi:[{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:0}],sn:"ToUInt64",rt:$n[0].UInt64,p:[$n[2].IEnumerable$1(System.Int32)]},{a:1,n:"BitMask",is:!0,t:4,rt:$n[0].Array.type(System.Int64),sn:"BitMask",ro:!0},{a:1,n:"DeBruijnLookup",is:!0,t:4,rt:$n[0].Array.type(System.Int32),sn:"DeBruijnLookup"},{a:1,n:"DeBruijnMultiplier",is:!0,t:4,rt:$n[0].UInt64,sn:"DeBruijnMultiplier"},{a:1,n:"NotBitMask",is:!0,t:4,rt:$n[0].Array.type(System.Int64),sn:"NotBitMask",ro:!0}]}});$m($n[5].Lazy$1,function(T){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[Function],pi:[{n:"creator",pt:Function,ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[Function,$n[0].Boolean],pi:[{n:"creator",pt:Function,ps:0},{n:"threadSafe",pt:$n[0].Boolean,ps:1}],sn:"$ctor1"},{a:2,n:"Forget",t:8,sn:"Forget",rt:$n[0].Void},{a:2,n:"op_Implicit",is:!0,t:8,pi:[{n:"da",pt:$n[5].Lazy$1(T),ps:0}],sn:"op_Implicit",rt:T,p:[$n[5].Lazy$1(T)]},{a:2,n:"Value",t:16,rt:T,g:{a:2,n:"get_Value",t:8,rt:T,fg:"Value"},fn:"Value"},{a:1,n:"_creator",t:4,rt:Function,sn:"_creator"},{a:1,n:"_token",t:4,rt:$n[0].Object,sn:"_token"},{a:1,n:"_value",t:4,rt:T,sn:"_value"}]}});$m($n[5].OneFactorizationsOfCompleteGraph,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"DoSignSum",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"j",pt:$n[0].Int32,ps:1},{n:"n",pt:$n[0].Int32,ps:2},{n:"lists",pt:$n[0].Array.type(System.Int32),ps:3},{n:"of",pt:$n[0].Array.type(System.Int32,2),ps:4},{n:"term",ref:!0,pt:$n[0].Int32,ps:5},{n:"plus",ref:!0,pt:$n[0].Int32,ps:6},{n:"minus",ref:!0,pt:$n[0].Int32,ps:7},{n:"progress",pt:Function,ps:8}],sn:"DoSignSum",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32,2),$n[0].Int32,$n[0].Int32,$n[0].Int32,Function]},{a:1,n:"DoTerm",is:!0,t:8,pi:[{n:"term",pt:$n[0].Int32,ps:0},{n:"plus",ref:!0,pt:$n[0].Int32,ps:1},{n:"minus",ref:!0,pt:$n[0].Int32,ps:2},{n:"progress",pt:Function,ps:3}],sn:"DoTerm",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,Function]},{a:2,n:"EnumerateOneFactorizations",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumerateOneFactorizations",rt:$n[2].IEnumerable$1(System.Array.type(System.Int32)),p:[$n[0].Int32]},{a:1,n:"EnumerateOneFactorizations",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"j",pt:$n[0].Int32,ps:1},{n:"n",pt:$n[0].Int32,ps:2},{n:"lists",pt:$n[0].Array.type(System.Int64),ps:3},{n:"coloring",pt:$n[0].Array.type(System.Int32),ps:4}],sn:"EnumerateOneFactorizations$1",rt:$n[2].IEnumerable$1(System.Array.type(System.Int32)),p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Int64),$n[0].Array.type(System.Int32)]},{a:2,n:"GetSignSum",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"plus",out:!0,pt:$n[0].Int32,ps:1},{n:"minus",out:!0,pt:$n[0].Int32,ps:2},{n:"progress",pt:Function,ps:3}],sn:"GetSignSum",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,Function]}]}});$m($n[5].OnFactorizationsOfCompleteGraph,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"EnumerateOneFactorizations",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumerateOneFactorizations",rt:$n[2].IEnumerable$1(System.Array.type(System.Int32)),p:[$n[0].Int32]},{a:1,n:"EnumerateOneFactorizations",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"j",pt:$n[0].Int32,ps:1},{n:"n",pt:$n[0].Int32,ps:2},{n:"lists",pt:$n[0].Array.type(System.Int64),ps:3},{n:"coloring",pt:$n[0].Array.type(System.Int32),ps:4}],sn:"EnumerateOneFactorizations$1",rt:$n[2].IEnumerable$1(System.Array.type(System.Int32)),p:[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Int64),$n[0].Array.type(System.Int32)]}]}});$m($n[5].OnlineChoiceHashGraph,function(){return{att:1048576,a:4,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32)],pi:[{n:"f",pt:$n[0].Array.type(System.Int32),ps:0},{n:"g",pt:$n[0].Array.type(System.Int32),ps:1}],sn:"ctor"},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"_f",t:4,rt:$n[0].Array.type(System.Int32),sn:"_f"},{a:1,n:"_g",t:4,rt:$n[0].Array.type(System.Int32),sn:"_g"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"}]}});$m($n[5].OrientationHashGraph,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph,$n[2].List$1(System.Int32)],pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"outMinusIn",pt:$n[2].List$1(System.Int32),ps:1}],sn:"ctor"},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:1,n:"_outMinusIn",t:4,rt:$n[2].List$1(System.Int32),sn:"_outMinusIn"},{a:1,n:"_values",t:4,rt:$n[0].Array.type(System.Byte),sn:"_values"}]}});$m($n[5].SubsetEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Int32],pi:[{n:"setSize",pt:$n[0].Int32,ps:0},{n:"subsetSize",pt:$n[0].Int32,ps:1}],sn:"ctor"},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Int64)},{a:1,n:"_setSize",t:4,rt:$n[0].Int32,sn:"_setSize"},{a:1,n:"_subsetSize",t:4,rt:$n[0].Int32,sn:"_subsetSize"}]}});$m($n[5].SubsetEnumerator.Enumerator,function(){return{td:$n[5].SubsetEnumerator,att:1048578,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Int32],pi:[{n:"setSize",pt:$n[0].Int32,ps:0},{n:"subsetSize",pt:$n[0].Int32,ps:1}],sn:"ctor"},{a:2,n:"Dispose",t:8,sn:"dispose",rt:$n[0].Void},{a:2,n:"MoveNext",t:8,sn:"moveNext",rt:$n[0].Boolean},{a:2,n:"Reset",t:8,sn:"reset",rt:$n[0].Void},{a:2,n:"Current",t:16,rt:$n[0].Int64,g:{a:2,n:"get_Current",t:8,rt:$n[0].Int64,fg:"Current"},fn:"Current"},{a:1,n:"_current",t:4,rt:$n[0].Int64,sn:"_current"},{a:1,n:"_isFirst",t:4,rt:$n[0].Boolean,sn:"_isFirst"},{a:1,n:"_setSize",t:4,rt:$n[0].Int32,sn:"_setSize"},{a:1,n:"_subsetSize",t:4,rt:$n[0].Int32,sn:"_subsetSize"}]}});$m($n[5].TransitivePartition,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32)],pi:[{n:"set",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ctor"},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{a:1,n:"FindPartWithScores",t:8,pi:[{n:"scores",pt:$n[2].List$1(System.Int32),ps:0}],sn:"FindPartWithScores",rt:$n[5].TransitivePartition.Part,p:[$n[2].List$1(System.Int32)]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"Refine",t:8,pi:[{n:"score",pt:$n[0].Array.type(System.Int32),ps:0},{n:"scoreNumber",pt:$n[0].Int32,ps:1}],sn:"Refine",rt:$n[0].Void,p:[$n[0].Array.type(System.Int32),$n[0].Int32]},{a:1,n:"RefinePart",t:8,pi:[{n:"part",pt:$n[5].TransitivePartition.Part,ps:0},{n:"score",pt:$n[0].Array.type(System.Int32),ps:1}],sn:"RefinePart",rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),p:[$n[5].TransitivePartition.Part,$n[0].Array.type(System.Int32)]},{a:2,n:"Parts",t:16,rt:$n[2].List$1(Algorithms.TransitivePartition.Part),g:{a:2,n:"get_Parts",t:8,rt:$n[2].List$1(Algorithms.TransitivePartition.Part),fg:"Parts"},s:{a:1,n:"set_Parts",t:8,p:[$n[2].List$1(Algorithms.TransitivePartition.Part)],rt:$n[0].Void,fs:"Parts"},fn:"Parts"}]}});$m($n[5].TransitivePartition.Part,function(){return{td:$n[5].TransitivePartition,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Scores",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Scores",t:8,rt:$n[2].List$1(System.Int32),fg:"Scores"},s:{a:2,n:"set_Scores",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Scores"},fn:"Scores"},{a:2,n:"Set",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Set",t:8,rt:$n[2].List$1(System.Int32),fg:"Set"},s:{a:2,n:"set_Set",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Set"},fn:"Set"}]}});$m($n[5].UnpermutedAssignmentEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,Function,$n[0].Int32,$n[0].Int32,$n[0].Int32],pi:[{n:"vertexCount",pt:$n[0].Int32,ps:0},{n:"f",pt:Function,ps:1},{n:"potSize",pt:$n[0].Int32,ps:2},{n:"start",dv:0,o:!0,pt:$n[0].Int32,ps:3},{n:"step",dv:1,o:!0,pt:$n[0].Int32,ps:4}],sn:"ctor"},{a:1,n:"GetEnumerable",t:8,pi:[{n:"vertexCount",pt:$n[0].Int32,ps:0}],sn:"GetEnumerable",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int64)),p:[$n[0].Int32]},{a:1,n:"GetEnumerableRecursive",t:8,pi:[{n:"vertexCount",pt:$n[0].Int32,ps:0}],sn:"GetEnumerableRecursive",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int64)),p:[$n[0].Int32]},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Collections.Generic.List$1(System.Int64))},{a:1,n:"GetExtensions",t:8,pi:[{n:"list",pt:$n[2].List$1(System.Int64),ps:0}],sn:"GetExtensions",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Int64)),p:[$n[2].List$1(System.Int64)]},{a:1,n:"IsRestricted",t:8,pi:[{n:"p",pt:$n[0].Int64,ps:0},{n:"list",pt:$n[2].List$1(System.Int64),ps:1}],sn:"IsRestricted",rt:$n[0].Boolean,p:[$n[0].Int64,$n[2].List$1(System.Int64)]},{a:1,n:"_f",t:4,rt:Function,sn:"_f"},{a:1,n:"_pairMaskToBadMask",t:4,rt:$n[2].Dictionary$2(System.Int64,System.Int64),sn:"_pairMaskToBadMask"},{a:1,n:"_potSize",t:4,rt:$n[0].Int32,sn:"_potSize"},{a:1,n:"_start",t:4,rt:$n[0].Int32,sn:"_start"},{a:1,n:"_step",t:4,rt:$n[0].Int32,sn:"_step"},{a:1,n:"_vertexCount",t:4,rt:$n[0].Int32,sn:"_vertexCount"}]}});$m($n[10].AccessibilityChecker,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].IEnumerable$1(System.Char)],pi:[{n:"alphabet",pt:$n[2].IEnumerable$1(System.Char),ps:0}],sn:"ctor"},{a:1,n:"EnumeratePartitions",t:8,pi:[{n:"w",pt:$n[0].String,ps:0},{n:"swappers",pt:$n[2].List$1(System.Char),ps:1}],sn:"EnumeratePartitions",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].String,$n[2].List$1(System.Char)]},{a:2,n:"IsAccessible",t:8,pi:[{n:"w",pt:$n[0].String,ps:0},{n:"S",pt:$n[2].List$1(System.String),ps:1}],sn:"IsAccessible",rt:$n[0].Boolean,p:[$n[0].String,$n[2].List$1(System.String)]},{a:1,n:"MakeMove",t:8,pi:[{n:"w",pt:$n[0].String,ps:0},{n:"partition",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1},{n:"choice",pt:$n[2].List$1(System.Int32),ps:2},{n:"swappers",pt:$n[2].List$1(System.Char),ps:3}],sn:"MakeMove",rt:$n[0].String,p:[$n[0].String,$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),$n[2].List$1(System.Int32),$n[2].List$1(System.Char)]},{a:1,n:"_alphabet",t:4,rt:$n[2].List$1(System.Char),sn:"_alphabet"}]}});$m($n[10].Boxification,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"Binary",is:!0,t:8,pi:[{n:"first",pt:$n[0].Int32,ps:0},{n:"last",pt:$n[0].Int32,ps:1},{n:"targetDirection",pt:Function,ps:2}],sn:"Binary",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].Int32,Function]},{a:2,n:"BoxContainer",is:!0,t:8,pi:[{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"BoxContainer",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"Boxify",is:!0,t:8,pi:[{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"Boxify",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object))),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"ContainsBox",is:!0,t:8,pi:[{n:"allPoints",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0},{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:1}],tpc:1,tprm:["T"],sn:"ContainsBox",rt:$n[0].Boolean,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object)),$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:1,n:"ContainsBoxContainer",is:!0,t:8,pi:[{n:"allPoints",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0},{n:"boxContainer",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:1}],tpc:1,tprm:["T"],sn:"ContainsBoxContainer",rt:$n[0].Boolean,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object)),$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:1,n:"ExtractRanges",is:!0,t:8,pi:[{n:"stops",pt:$n[2].List$1(System.Int32),ps:0},{n:"l",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"ExtractRanges",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Object)]},{a:2,n:"IsBox",is:!0,t:8,pi:[{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"IsBox",rt:$n[0].Boolean,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"PrefixBoxify",is:!0,t:8,pi:[{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"PrefixBoxify",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object))),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"Split",is:!0,t:8,pi:[{n:"allPoints",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"Split",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"SplitMultiway",is:!0,t:8,pi:[{n:"allPoints",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"SplitMultiway",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object)))),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"ToBoxString",is:!0,t:8,pi:[{n:"points",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"ToBoxString",rt:$n[0].String,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"ToChunkString",is:!0,t:8,pi:[{n:"chunk",pt:$n[0].Object,ps:0}],tpc:1,tprm:["T"],sn:"ToChunkString",rt:$n[0].String,p:[$n[0].Object]},{a:1,n:"ToListOfListsString",is:!0,t:8,pi:[{n:"l",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"ToListOfListsString",rt:$n[0].String,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"ToMultiChunkString",is:!0,t:8,pi:[{n:"multiChunk",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object))),ps:0}],tpc:1,tprm:["T"],sn:"ToMultiChunkString",rt:$n[0].String,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Object)))]}]}});$m($n[10].ReferenceTarpitEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"ctor"},{ov:!0,a:2,n:"EnumerateMinimalTarpits",t:8,sn:"EnumerateMinimalTarpits",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.String))},{a:1,n:"EnumerateMinimalTarpitsIn",t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0},{n:"seen",pt:$n[2].HashSet$1(System.String),ps:1}],sn:"EnumerateMinimalTarpitsIn",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.String)),p:[$n[2].List$1(System.String),$n[2].HashSet$1(System.String)]},{a:1,n:"GenerateSimpleKey",t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"GenerateSimpleKey",rt:$n[0].String,p:[$n[2].List$1(System.String)]},{a:1,n:"RunEscape",t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"RunEscape",rt:$n[2].List$1(System.String),p:[$n[2].List$1(System.String)]},{a:1,n:"_accessibilityChecker",t:4,rt:$n[10].AccessibilityChecker,sn:"_accessibilityChecker"},{a:1,n:"_words",t:4,rt:$n[2].List$1(System.String),sn:"_words"}]}});$m($n[10].TarpitEnumerator,function(){return{att:1048705,a:2,m:[{a:3,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"EnumerateAlphabetPermutations",is:!0,t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"EnumerateAlphabetPermutations",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.String)),p:[$n[2].List$1(System.String)]},{ab:!0,a:2,n:"EnumerateMinimalTarpits",t:8,sn:"EnumerateMinimalTarpits",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.String))},{v:!0,a:2,n:"GenerateMinimalTarpits",t:8,pi:[{n:"foundTarpit",pt:Function,ps:0}],sn:"GenerateMinimalTarpits",rt:$n[0].Void,p:[Function]},{a:2,n:"IsPermutationClosed",is:!0,t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"IsPermutationClosed",rt:$n[0].Boolean,p:[$n[2].List$1(System.String)]},{a:2,n:"RemovePermutationRedundancies",is:!0,t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"RemovePermutationRedundancies",rt:$n[2].List$1(System.String),p:[$n[2].List$1(System.String)]},{a:2,n:"ReorderAlphabetByOccurenceRate",is:!0,t:8,pi:[{n:"S",pt:$n[2].List$1(System.String),ps:0}],sn:"ReorderAlphabetByOccurenceRate",rt:$n[2].List$1(System.String),p:[$n[2].List$1(System.String)]},{a:2,n:"Alphabet",is:!0,t:4,rt:$n[2].List$1(System.Char),sn:"Alphabet",ro:!0}]}});$m($n[10].WordEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Char)],pi:[{n:"alphabet",ip:!0,pt:$n[0].Array.type(System.Char),ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[2].IEnumerable$1(System.Char)],pi:[{n:"alphabet",pt:$n[2].IEnumerable$1(System.Char),ps:0}],sn:"$ctor1"},{a:2,n:"EnumerateWords",t:8,pi:[{n:"length",pt:$n[0].Int32,ps:0}],sn:"EnumerateWords",rt:$n[2].IEnumerable$1(System.String),p:[$n[0].Int32]},{a:1,n:"_alphabet",t:4,rt:$n[2].List$1(System.Char),sn:"_alphabet"}]}});$m($n[11].FastAccessibilityChecker,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"ctor"},{a:1,n:"GetBreakerChoices",t:8,pi:[{n:"swappable",pt:$n[0].UInt64,ps:0}],sn:"GetBreakerChoices",rt:$n[2].List$1(System.Collections.Generic.List$1(System.UInt64)),p:[$n[0].UInt64]},{a:1,n:"GetFixerResponses",t:8,pi:[{n:"possibleMoves",pt:$n[2].List$1(System.UInt64),ps:0}],sn:"GetFixerResponses",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64)]},{a:2,n:"IsAccessible",t:8,pi:[{n:"board",pt:$n[11].FastWord,ps:0},{n:"wonBoards",pt:$n[2].HashSet$1(Algorithms.WordGame.Optimized.FastWord),ps:1}],sn:"IsAccessible",rt:$n[0].Boolean,p:[$n[11].FastWord,$n[2].HashSet$1(Algorithms.WordGame.Optimized.FastWord)]},{a:1,n:"_breakerChoicesCache",t:4,rt:$n[2].Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))),sn:"_breakerChoicesCache"},{a:1,n:"_fixerResponseCount",t:4,rt:$n[0].Int32,sn:"_fixerResponseCount"},{a:1,n:"_fixerResponses",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_fixerResponses"}]}});$m($n[11].FastTarpitEnumerator,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"ctor"},{ov:!0,a:2,n:"EnumerateMinimalTarpits",t:8,sn:"EnumerateMinimalTarpits",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.String))},{a:2,n:"EnumerateMinimalTarpitsFast",t:8,sn:"EnumerateMinimalTarpitsFast",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord))},{a:1,n:"EnumerateMinimalTarpitsFastIn",t:8,pi:[{n:"S",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:0},{n:"explored",pt:$n[2].HashSet$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord)),ps:1},{n:"mustHaves",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:2}],sn:"EnumerateMinimalTarpitsFastIn",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord)),p:[$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),$n[2].HashSet$1(System.Collections.Generic.List$1(Algorithms.WordGame.Optimized.FastWord)),$n[2].List$1(Algorithms.WordGame.Optimized.FastWord)]},{ov:!0,a:2,n:"GenerateMinimalTarpits",t:8,pi:[{n:"foundTarpit",pt:Function,ps:0}],sn:"GenerateMinimalTarpits",rt:$n[0].Void,p:[Function]},{a:2,n:"GenerateMinimalTarpitsFast",t:8,pi:[{n:"foundTarpit",pt:Function,ps:0}],sn:"GenerateMinimalTarpitsFast",rt:$n[0].Void,p:[Function]},{a:1,n:"GenerateMinimalTarpitsFastIn",t:8,pi:[{n:"S",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:0},{n:"mustHaves",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:1},{n:"foundTarpit",pt:Function,ps:2}],sn:"GenerateMinimalTarpitsFastIn",rt:$n[0].Void,p:[$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),Function]},{a:1,n:"RunEscape",t:8,pi:[{n:"S",pt:$n[2].IEnumerable$1(Algorithms.WordGame.Optimized.FastWord),ps:0}],sn:"RunEscape",rt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),p:[$n[2].IEnumerable$1(Algorithms.WordGame.Optimized.FastWord)]},{a:1,n:"RunEscape",t:8,pi:[{n:"S",pt:$n[2].IEnumerable$1(Algorithms.WordGame.Optimized.FastWord),ps:0},{n:"mustHaves",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:1}],sn:"RunEscape$1",rt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),p:[$n[2].IEnumerable$1(Algorithms.WordGame.Optimized.FastWord),$n[2].List$1(Algorithms.WordGame.Optimized.FastWord)]},{a:1,n:"Wordify",t:8,pi:[{n:"b",pt:$n[11].FastWord,ps:0}],sn:"Wordify",rt:$n[0].String,p:[$n[11].FastWord]},{a:1,n:"EmptyList",is:!0,t:4,rt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),sn:"EmptyList",ro:!0},{a:1,n:"_accessibilityChecker",t:4,rt:$n[11].FastAccessibilityChecker,sn:"_accessibilityChecker"},{a:1,n:"_words",t:4,rt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),sn:"_words"}]}});$m($n[11].FastTarpitEnumerator.SortedListComparer,function(){return{td:$n[11].FastTarpitEnumerator,att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"x",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:0},{n:"y",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:1}],sn:"equals2",rt:$n[0].Boolean,p:[$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),$n[2].List$1(Algorithms.WordGame.Optimized.FastWord)]},{a:2,n:"GetHashCode",t:8,pi:[{n:"list",pt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),ps:0}],sn:"getHashCode2",rt:$n[0].Int32,p:[$n[2].List$1(Algorithms.WordGame.Optimized.FastWord)]}]}});$m($n[11].FastWord,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt64),$n[0].Int32],pi:[{n:"trace",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"stackCount",pt:$n[0].Int32,ps:1}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt64),$n[0].Int32,$n[0].Int32,$n[0].UInt64,$n[0].Int32],pi:[{n:"trace",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"i",pt:$n[0].Int32,ps:1},{n:"j",pt:$n[0].Int32,ps:2},{n:"swap",pt:$n[0].UInt64,ps:3},{n:"stackCount",pt:$n[0].Int32,ps:4}],sn:"$ctor1"},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[11].FastWord,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[11].FastWord]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:2,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"},{a:2,n:"_stackCount",t:4,rt:$n[0].Int32,sn:"_stackCount"},{a:2,n:"_trace",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_trace"}]}});$m($n[11].FastWordGenerator,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"GenerateWords",t:8,pi:[{n:"length",pt:$n[0].Int32,ps:0}],sn:"GenerateWords",rt:$n[2].List$1(Algorithms.WordGame.Optimized.FastWord),p:[$n[0].Int32]}]}});$m($n[11].FastWordGenerator.TheEnumerationMachine,function(){return{td:$n[11].FastWordGenerator,att:1048962,a:2,s:!0,m:[{a:2,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].IEnumerable$1(System.Int32),ps:0},{n:"potSize",pt:$n[0].Int32,ps:1}],sn:"Enumerate",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt64)),p:[$n[2].IEnumerable$1(System.Int32),$n[0].Int32]},{a:1,n:"Enumerate",is:!0,t:8,pi:[{n:"sizes",pt:$n[2].List$1(System.UInt64),ps:0},{n:"assignment",pt:$n[0].Array.type(System.UInt64),ps:1},{n:"r",pt:System.Array.type(System.Collections.Generic.List$1(System.UInt64)),ps:2},{n:"i",pt:$n[0].Int32,ps:3},{n:"last",pt:$n[0].UInt64,ps:4},{n:"care",pt:$n[0].UInt64,ps:5},{n:"dontCare",pt:$n[0].UInt64,ps:6}],sn:"Enumerate$1",rt:$n[2].IEnumerable$1(System.Array.type(System.UInt64)),p:[$n[2].List$1(System.UInt64),$n[0].Array.type(System.UInt64),System.Array.type(System.Collections.Generic.List$1(System.UInt64)),$n[0].Int32,$n[0].UInt64,$n[0].UInt64,$n[0].UInt64]}]}});$m($n[9].EquivalenceRelation$1,function(T){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AddElement",t:8,pi:[{n:"t",pt:T,ps:0}],sn:"AddElement",rt:$n[0].Void,p:[T]},{a:2,n:"AreRelated",t:8,pi:[{n:"x",pt:T,ps:0},{n:"y",pt:T,ps:1}],sn:"AreRelated",rt:$n[0].Boolean,p:[T,T]},{a:1,n:"Find",t:8,pi:[{n:"n",pt:$n[9].EquivalenceRelation$1.Node(T),ps:0}],sn:"Find",rt:$n[9].EquivalenceRelation$1.Node(T),p:[$n[9].EquivalenceRelation$1.Node(T)]},{a:2,n:"GetEquivalenceClass",t:8,pi:[{n:"x",pt:T,ps:0}],sn:"GetEquivalenceClass",rt:$n[2].IEnumerable$1(T),p:[T]},{a:2,n:"GetEquivalenceClasses",t:8,sn:"GetEquivalenceClasses",rt:$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(T))},{a:1,n:"LookupNode",t:8,pi:[{n:"t",pt:T,ps:0}],sn:"LookupNode",rt:$n[9].EquivalenceRelation$1.Node(T),p:[T]},{a:2,n:"Relate",t:8,pi:[{n:"x",pt:T,ps:0},{n:"y",pt:T,ps:1}],sn:"Relate",rt:$n[0].Void,p:[T,T]},{a:1,n:"_nodeLookup",t:4,rt:$n[2].Dictionary$2(T,Algorithms.Utility.EquivalenceRelation$1.Node(T)),sn:"_nodeLookup"}]}});$m($n[9].EquivalenceRelation$1.Node,function(T){return{td:$n[9].EquivalenceRelation$1(T),att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Parent",t:16,rt:$n[9].EquivalenceRelation$1.Node(T),g:{a:2,n:"get_Parent",t:8,rt:$n[9].EquivalenceRelation$1.Node(T),fg:"Parent"},s:{a:2,n:"set_Parent",t:8,p:[$n[9].EquivalenceRelation$1.Node(T)],rt:$n[0].Void,fs:"Parent"},fn:"Parent"},{a:2,n:"Rank",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Rank",t:8,rt:$n[0].Int32,fg:"Rank"},s:{a:2,n:"set_Rank",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Rank"},fn:"Rank"},{a:2,n:"T",t:16,rt:T,g:{a:2,n:"get_T",t:8,rt:T,fg:"T"},s:{a:2,n:"set_T",t:8,p:[T],rt:$n[0].Void,fs:"T"},fn:"T"}]}});$m($n[9].Factoradic,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[9].Permutation],pi:[{n:"p",pt:$n[9].Permutation,ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Int64,$n[0].Int32],pi:[{n:"value",pt:$n[0].Int64,ps:0},{n:"n",pt:$n[0].Int32,ps:1}],sn:"$ctor1"},{a:2,n:"Digits",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Digits",t:8,rt:$n[2].List$1(System.Int32),fg:"Digits"},s:{a:1,n:"set_Digits",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Digits"},fn:"Digits"},{a:2,n:"Value",t:16,rt:$n[0].Int64,g:{a:2,n:"get_Value",t:8,rt:$n[0].Int64,fg:"Value"},s:{a:1,n:"set_Value",t:8,p:[$n[0].Int64],rt:$n[0].Void,fs:"Value"},fn:"Value"}]}});$m($n[9].Flows,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"BipartiteMaximumMatching",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"adjacencies",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"BipartiteMaximumMatching",rt:$n[0].Int32,p:[$n[0].Int32,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"MaxFlow",is:!0,t:8,pi:[{n:"capacity",pt:$n[0].Array.type(System.Int32,2),ps:0},{n:"source",pt:$n[0].Int32,ps:1},{n:"target",pt:$n[0].Int32,ps:2}],sn:"MaxFlow",rt:$n[0].Int32,p:[$n[0].Array.type(System.Int32,2),$n[0].Int32,$n[0].Int32]}]}});$m($n[9].Flows.FordFulkerson,function(){return{td:$n[9].Flows,att:1048579,a:1,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Int32,2),$n[0].Int32,$n[0].Int32],pi:[{n:"capacity",pt:$n[0].Array.type(System.Int32,2),ps:0},{n:"source",pt:$n[0].Int32,ps:1},{n:"target",pt:$n[0].Int32,ps:2}],sn:"ctor"},{a:1,n:"AddFlow",t:8,pi:[{n:"path",pt:$n[2].List$1(System.Int32),ps:0}],sn:"AddFlow",rt:$n[0].Void,p:[$n[2].List$1(System.Int32)]},{a:1,n:"FindAugmentingPath",t:8,pi:[{n:"path",pt:$n[2].List$1(System.Int32),ps:0}],sn:"FindAugmentingPath",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32)]},{a:1,n:"FindGain",t:8,pi:[{n:"path",pt:$n[2].List$1(System.Int32),ps:0}],sn:"FindGain",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32)]},{a:2,n:"MaxFlow",t:8,sn:"MaxFlow",rt:$n[0].Int32},{a:1,n:"OutNeighbors",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0}],sn:"OutNeighbors",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int32]},{a:1,n:"_capacity",t:4,rt:$n[0].Array.type(System.Int32,2),sn:"_capacity"},{a:1,n:"_flow",t:4,rt:$n[0].Array.type(System.Int32,2),sn:"_flow"},{a:1,n:"_n",t:4,rt:$n[0].Int32,sn:"_n"},{a:1,n:"_source",t:4,rt:$n[0].Int32,sn:"_source"},{a:1,n:"_target",t:4,rt:$n[0].Int32,sn:"_target"}]}});$m($n[9].LinqExtensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"CartesianProduct",is:!0,t:8,pi:[{n:"sequences",pt:$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"CartesianProduct",rt:$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Object)),p:[$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Object))]},{a:2,n:"CartesianProduct",is:!0,t:8,pi:[{n:"sequences",pt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"CartesianProduct$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.IEnumerable$1(System.Object)),p:[$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"CartesianProduct",is:!0,t:8,pi:[{n:"a",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"b",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"CartesianProduct$2",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"Concat",is:!0,t:8,pi:[{n:"e",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"value",pt:System.Object,ps:1}],tpc:1,tprm:["T"],sn:"Concat",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),System.Object]},{a:2,n:"Distinct",is:!0,t:8,pi:[{n:"source",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"areEqual",pt:Function,ps:1}],tpc:1,tprm:["T"],sn:"Distinct",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),Function]}]}});$m($n[9].ListUtility,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"BinomialCoefficient",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int64,ps:0},{n:"k",pt:$n[0].Int64,ps:1}],sn:"BinomialCoefficient",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int64]},{a:2,n:"Difference",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"B",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"Difference",rt:$n[2].List$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"DifferenceSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"DifferenceSorted$1",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"DifferenceSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"DifferenceSorted",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"EnumeratePartitions",is:!0,t:8,pi:[{n:"sizes",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"EnumeratePartitions",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Array.type(System.Int32)]},{a:1,n:"EnumeratePartitions",is:!0,t:8,pi:[{n:"sizes",pt:$n[0].Array.type(System.Int32),ps:0},{n:"item",pt:$n[0].Int32,ps:1}],sn:"EnumeratePartitions$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Array.type(System.Int32),$n[0].Int32]},{a:2,n:"EnumeratePartitionsUnordered",is:!0,t:8,pi:[{n:"sizes",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"EnumeratePartitionsUnordered",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Array.type(System.Int32)]},{a:2,n:"EnumerateShortLex",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumerateShortLex",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Boolean)),p:[$n[0].Int32]},{a:1,n:"EnumerateShortLex",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"k",pt:$n[0].Int32,ps:1}],sn:"EnumerateShortLex$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Boolean)),p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"EnumerateShortLexNonempty",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumerateShortLexNonempty",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Boolean)),p:[$n[0].Int32]},{a:2,n:"EnumerateSublists",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"EnumerateSublists",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Object)]},{a:2,n:"EnumerateSublists",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1}],tpc:1,tprm:["T"],sn:"EnumerateSublists$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Object),$n[0].Int32]},{a:2,n:"Equal",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"Equal",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"EqualSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"EqualSorted",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"EqualSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"EqualSorted$1",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:1,n:"ExtractSublist",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0},{n:"inOut",pt:$n[2].List$1(System.Boolean),ps:1}],tpc:1,tprm:["T"],sn:"ExtractSublist",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[2].List$1(System.Boolean)]},{a:1,n:"FindFirstHole",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Boolean),ps:0}],sn:"FindFirstHole",rt:$n[0].Int32,p:[$n[2].List$1(System.Boolean)]},{a:1,n:"FindFirstHole",is:!0,t:8,pi:[{n:"list",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"FindFirstHole$1",rt:$n[0].Int32,p:[$n[0].Array.type(System.Int32)]},{a:2,n:"GenerateSublists",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"GenerateSublists",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Object)]},{a:2,n:"GenerateSublists",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1}],tpc:1,tprm:["T"],sn:"GenerateSublists$1",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Object),$n[0].Int32]},{a:2,n:"Intersection",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"B",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"Intersection",rt:$n[2].List$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"IntersectionCount",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"B",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"IntersectionCount",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"IntersectionCountSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"IntersectionCountSorted",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"IntersectionCountSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"IntersectionCountSorted$1",rt:$n[0].Int32,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"IntersectionSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"IntersectionSorted$1",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"IntersectionSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"IntersectionSorted",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"MaximalElements",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"MaximalElements",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"MaximalElementsSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:0}],sn:"MaximalElementsSorted$1",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"MaximalElementsSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"MaximalElementsSorted",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"MultiSetEqual",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"MultiSetEqual",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"MultiSetIntersection",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"B",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"MultiSetIntersection",rt:$n[2].List$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"MultiSetIntersectionCount",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"B",pt:$n[2].IEnumerable$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"MultiSetIntersectionCount",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(System.Object),$n[2].IEnumerable$1(System.Object)]},{a:2,n:"MultiSetSubset",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"MultiSetSubset",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"MultiSetSubsetEqual",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"MultiSetSubsetEqual",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:1,n:"Next",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Boolean),ps:0}],sn:"Next",rt:$n[0].Boolean,p:[$n[2].List$1(System.Boolean)]},{a:1,n:"NextSameOnCount",is:!0,t:8,pi:[{n:"list",pt:$n[0].Array.type(System.Int32),ps:0},{n:"trueCount",pt:$n[0].Int32,ps:1}],sn:"NextSameOnCount",rt:$n[0].Boolean,p:[$n[0].Array.type(System.Int32),$n[0].Int32]},{a:1,n:"NextSameTrueCount",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Boolean),ps:0},{n:"trueCount",pt:$n[0].Int32,ps:1}],sn:"NextSameTrueCount",rt:$n[0].Boolean,p:[$n[2].List$1(System.Boolean),$n[0].Int32]},{a:1,n:"NextShortLex",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"k",pt:$n[0].Int32,ps:1},{n:"state",ref:!0,pt:$n[2].List$1(System.Boolean),ps:2}],sn:"NextShortLex$1",rt:$n[0].Boolean,p:[$n[0].Int32,$n[0].Int32,$n[2].List$1(System.Boolean)]},{a:2,n:"NextShortLex",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"k",pt:$n[0].Int32,ps:1},{n:"state",ref:!0,pt:$n[0].Array.type(System.Int32),ps:2}],sn:"NextShortLex",rt:$n[0].Boolean,p:[$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Int32)]},{a:2,n:"NextSublist",is:!0,t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0},{n:"size",pt:$n[0].Int32,ps:1},{n:"state",ref:!0,pt:$n[2].List$1(System.Boolean),ps:2}],tpc:1,tprm:["T"],sn:"NextSublist",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[0].Int32,$n[2].List$1(System.Boolean)]},{a:2,n:"Subset",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"Subset",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"SubsetEqual",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"SubsetEqual",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"SubsetEqualSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"SubsetEqualSorted",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"SubsetEqualSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"SubsetEqualSorted$1",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"SubsetSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"SubsetSorted",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"SubsetSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"SubsetSorted$1",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"ToString",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"ToString",rt:$n[0].String,p:[$n[2].List$1(System.Object)]},{a:2,n:"Union",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"Union$1",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]},{a:2,n:"Union",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"b",pt:System.Object,ps:1}],tpc:1,tprm:["T"],sn:"Union",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),System.Object]},{a:2,n:"UnionSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Int32),ps:0},{n:"B",pt:$n[2].List$1(System.Int32),ps:1}],sn:"UnionSorted$1",rt:$n[2].List$1(System.Int32),p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"UnionSorted",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1}],tpc:1,tprm:["T"],sn:"UnionSorted",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object)]}]}});$m($n[9].ListUtility.ListUtilityGeneric$1,function(T){return{td:$n[9].ListUtility,att:1048963,a:1,s:!0,m:[{a:2,n:"Difference",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(T),ps:0},{n:"B",pt:$n[2].IEnumerable$1(T),ps:1}],sn:"Difference",rt:$n[2].List$1(T),p:[$n[2].IEnumerable$1(T),$n[2].IEnumerable$1(T)]},{a:2,n:"Intersection",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(T),ps:0},{n:"B",pt:$n[2].IEnumerable$1(T),ps:1}],sn:"Intersection",rt:$n[2].List$1(T),p:[$n[2].IEnumerable$1(T),$n[2].IEnumerable$1(T)]},{a:2,n:"IntersectionCount",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(T),ps:0},{n:"B",pt:$n[2].IEnumerable$1(T),ps:1}],sn:"IntersectionCount",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(T),$n[2].IEnumerable$1(T)]},{a:2,n:"MultiSetIntersection",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(T),ps:0},{n:"B",pt:$n[2].IEnumerable$1(T),ps:1}],sn:"MultiSetIntersection",rt:$n[2].List$1(T),p:[$n[2].IEnumerable$1(T),$n[2].IEnumerable$1(T)]},{a:2,n:"MultiSetIntersectionCount",is:!0,t:8,pi:[{n:"A",pt:$n[2].IEnumerable$1(T),ps:0},{n:"B",pt:$n[2].IEnumerable$1(T),ps:1}],sn:"MultiSetIntersectionCount",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(T),$n[2].IEnumerable$1(T)]},{a:2,n:"Union",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(T),ps:0},{n:"B",pt:$n[2].List$1(T),ps:1}],sn:"Union$1",rt:$n[2].List$1(T),p:[$n[2].List$1(T),$n[2].List$1(T)]},{a:2,n:"Union",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(T),ps:0},{n:"b",pt:T,ps:1}],sn:"Union",rt:$n[2].List$1(T),p:[$n[2].List$1(T),T]},{a:1,n:"_multiSet",is:!0,t:4,rt:$n[2].Dictionary$2(T,System.Int32),sn:"_multiSet"},{a:1,n:"_set",is:!0,t:4,rt:$n[2].HashSet$1(T),sn:"_set"}]}});$m($n[9].PartialOrderResult,function(){return{att:1048841,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AtLeast",t:4,rt:$n[0].Boolean,sn:"AtLeast"},{a:2,n:"AtMost",t:4,rt:$n[0].Boolean,sn:"AtMost"}]}});$m($n[9].PartialOrder,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Embeds",is:!0,t:8,pi:[{n:"A",pt:$n[2].List$1(System.Object),ps:0},{n:"B",pt:$n[2].List$1(System.Object),ps:1},{n:"order",pt:Function,ps:2}],tpc:1,tprm:["T"],sn:"Embeds",rt:$n[0].Boolean,p:[$n[2].List$1(System.Object),$n[2].List$1(System.Object),Function]}]}});$m($n[9].Permutation,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[9].Factoradic],pi:[{n:"f",pt:$n[9].Factoradic,ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32)],pi:[{n:"sequence",pt:$n[2].List$1(System.Int32),ps:0}],sn:"$ctor1"},{a:2,n:"Apply",t:8,pi:[{n:"list",pt:$n[2].List$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"Apply",rt:$n[2].List$1(System.Object),p:[$n[2].List$1(System.Object)]},{a:2,n:"EnumerateAll",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumerateAll",rt:$n[2].IEnumerable$1(Algorithms.Utility.Permutation),p:[$n[0].Int32]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"Inverse",t:8,sn:"Inverse",rt:$n[9].Permutation},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"op_Equality",is:!0,t:8,pi:[{n:"p1",pt:$n[9].Permutation,ps:0},{n:"p2",pt:$n[9].Permutation,ps:1}],sn:"op_Equality",rt:$n[0].Boolean,p:[$n[9].Permutation,$n[9].Permutation]},{a:2,n:"op_Inequality",is:!0,t:8,pi:[{n:"p1",pt:$n[9].Permutation,ps:0},{n:"p2",pt:$n[9].Permutation,ps:1}],sn:"op_Inequality",rt:$n[0].Boolean,p:[$n[9].Permutation,$n[9].Permutation]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"p1",pt:$n[9].Permutation,ps:0},{n:"p2",pt:$n[9].Permutation,ps:1}],sn:"op_Multiply",rt:$n[9].Permutation,p:[$n[9].Permutation,$n[9].Permutation]},{a:2,n:"Item",t:16,rt:$n[0].Int32,p:[$n[0].Int32],i:!0,ipi:[{n:"i",pt:$n[0].Int32,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0}],sn:"getItem",rt:$n[0].Int32,p:[$n[0].Int32]}},{a:2,n:"N",t:16,rt:$n[0].Int32,g:{a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"N"},s:{a:1,n:"set_N",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"N"},fn:"N"},{a:2,n:"Sequence",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Sequence",t:8,rt:$n[2].List$1(System.Int32),fg:"Sequence"},s:{a:1,n:"set_Sequence",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Sequence"},fn:"Sequence"}]}});$m($n[9].SafeCollection$1,function(T){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Add",t:8,pi:[{n:"item",pt:T,ps:0}],sn:"add",rt:$n[0].Void,p:[T]},{a:2,n:"Clear",t:8,sn:"clear",rt:$n[0].Void},{a:2,n:"Contains",t:8,pi:[{n:"item",pt:T,ps:0}],sn:"contains",rt:$n[0].Boolean,p:[T]},{a:2,n:"CopyTo",t:8,pi:[{n:"array",pt:System.Array.type(T),ps:0},{n:"arrayIndex",pt:$n[0].Int32,ps:1}],sn:"copyTo",rt:$n[0].Void,p:[System.Array.type(T),$n[0].Int32]},{a:1,n:"FindPreviousNode",t:8,pi:[{n:"item",pt:T,ps:0}],sn:"FindPreviousNode",rt:$n[9].SafeCollection$1.Node(T),p:[T]},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(T)},{a:2,n:"Remove",t:8,pi:[{n:"item",pt:T,ps:0}],sn:"remove",rt:$n[0].Boolean,p:[T]},{a:2,n:"Count",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Count",t:8,rt:$n[0].Int32,fg:"Count"},fn:"Count"},{a:2,n:"IsReadOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsReadOnly",t:8,rt:$n[0].Boolean,fg:"IsReadOnly"},fn:"IsReadOnly"},{a:1,n:"_count",t:4,rt:$n[0].Int32,sn:"_count"},{a:1,n:"_first",t:4,rt:$n[9].SafeCollection$1.Node(T),sn:"_first"},{a:1,n:"_last",t:4,rt:$n[9].SafeCollection$1.Node(T),sn:"_last"}]}});$m($n[9].SafeCollection$1.Node,function(T){return{td:$n[9].SafeCollection$1(T),att:1048579,a:1,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Item",t:4,rt:T,sn:"Item"},{a:2,n:"Next",t:4,rt:$n[9].SafeCollection$1.Node(T),sn:"Next"}]}});$m($n[9].SequenceGeneralizer$1,function(T){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[2].List$1(T)],pi:[{n:"length",pt:$n[0].Int32,ps:0},{n:"alphabet",pt:$n[2].List$1(T),ps:1}],sn:"ctor"},{a:2,n:"AddMatcher",t:8,pi:[{n:"name",pt:$n[0].String,ps:0},{n:"match",pt:Function,ps:1}],sn:"AddMatcher",rt:$n[0].Void,p:[$n[0].String,Function]},{a:1,n:"BuildMatcherLattice",t:8,sn:"BuildMatcherLattice",rt:$n[0].Void},{a:2,n:"Generalize",t:8,pi:[{n:"examples",pt:$n[2].List$1(System.Collections.Generic.List$1(T)),ps:0},{n:"nonExamples",pt:$n[2].List$1(System.Collections.Generic.List$1(T)),ps:1},{n:"mostGeneral",dv:!1,o:!0,pt:$n[0].Boolean,ps:2}],sn:"Generalize",rt:$n[2].List$1(System.Collections.Generic.List$1(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T))),p:[$n[2].List$1(System.Collections.Generic.List$1(T)),$n[2].List$1(System.Collections.Generic.List$1(T)),$n[0].Boolean]},{a:1,n:"IsMatch",t:8,pi:[{n:"vector",pt:$n[2].List$1(T),ps:0},{n:"m",pt:$n[2].List$1(System.Int32),ps:1}],sn:"IsMatch",rt:$n[0].Boolean,p:[$n[2].List$1(T),$n[2].List$1(System.Int32)]},{a:1,n:"_alphabet",t:4,rt:$n[2].List$1(T),sn:"_alphabet"},{a:1,n:"_generalizers",t:4,rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Int32)),sn:"_generalizers"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"},{a:1,n:"_matchers",t:4,rt:$n[2].List$1(Algorithms.Utility.SequenceGeneralizer$1.Matcher(T)),sn:"_matchers"},{a:1,n:"_vectorComparer",t:4,rt:$n[9].SequenceGeneralizer$1.VectorComparer(T),sn:"_vectorComparer"}]}});$m($n[9].SequenceGeneralizer$1.VectorComparer,function(T){return{td:$n[9].SequenceGeneralizer$1(T),att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Equals",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0},{n:"y",pt:$n[2].List$1(System.Int32),ps:1}],sn:"equals2",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:2,n:"GetHashCode",t:8,pi:[{n:"l",pt:$n[2].List$1(System.Int32),ps:0}],sn:"getHashCode2",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32)]}]}});$m($n[9].SequenceGeneralizer$1.Matcher,function(T){return{td:$n[9].SequenceGeneralizer$1(T),att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Match",t:4,rt:Function,sn:"Match"},{a:2,n:"Name",t:4,rt:$n[0].String,sn:"Name"}]}});$m($n[12].FactoredRational,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"$ctor1"},{a:1,n:"Power",t:8,pi:[{n:"p",pt:$n[0].Int32,ps:0},{n:"k",pt:$n[0].Int32,ps:1}],sn:"Power",rt:$n[0].Int32,p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"ToRational",t:8,pi:[{n:"top",out:!0,pt:$n[0].Int32,ps:0},{n:"bottom",out:!0,pt:$n[0].Int32,ps:1}],sn:"ToRational",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"op_Division",is:!0,t:8,pi:[{n:"fi",pt:$n[12].FactoredRational,ps:0},{n:"fi2",pt:$n[12].FactoredRational,ps:1}],sn:"op_Division",rt:$n[12].FactoredRational,p:[$n[12].FactoredRational,$n[12].FactoredRational]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"fi",pt:$n[12].FactoredRational,ps:0},{n:"fi2",pt:$n[12].FactoredRational,ps:1}],sn:"op_Multiply",rt:$n[12].FactoredRational,p:[$n[12].FactoredRational,$n[12].FactoredRational]},{a:2,n:"K",t:4,rt:$n[2].List$1(System.Int32),sn:"K"},{a:2,n:"Sign",t:4,rt:$n[0].Int32,sn:"Sign"},{a:2,n:"Zero",is:!0,t:4,rt:$n[12].FactoredRational,sn:"Zero",ro:!0}]}});$m($n[12].GraphPolynomial,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph],pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"ctor"},{a:1,n:"GCD",t:8,pi:[{n:"x",pt:$n[0].Int64,ps:0},{n:"y",pt:$n[0].Int64,ps:1}],sn:"GCD",rt:$n[0].Int64,p:[$n[0].Int64,$n[0].Int64]},{a:2,n:"GetCoefficient",t:8,pi:[{n:"power",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"GetCoefficient",rt:$n[0].Int32,p:[$n[0].Array.type(System.Int32)]},{a:2,n:"GetSignSum",t:8,pi:[{n:"power",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"GetSignSum",rt:$n[0].Int32,p:[$n[0].Array.type(System.Int32)]},{a:1,n:"SumSigns",t:8,pi:[{n:"w",pt:$n[0].Int32,ps:0},{n:"a",pt:$n[0].Array.type(System.Int32),ps:1},{n:"power",pt:$n[0].Array.type(System.Int32),ps:2},{n:"partialProduct",ref:!0,pt:$n[0].Int32,ps:3},{n:"sum",ref:!0,pt:$n[0].Int32,ps:4}],sn:"SumSigns",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32),$n[0].Int32,$n[0].Int32]},{a:1,n:"SumTerms",t:8,pi:[{n:"w",pt:$n[0].Int32,ps:0},{n:"a",pt:$n[0].Array.type(System.Int32),ps:1},{n:"power",pt:$n[0].Array.type(System.Int32),ps:2},{n:"partialProduct",ref:!0,pt:$n[12].FactoredRational,ps:3},{n:"top",ref:!0,pt:$n[0].Int64,ps:4},{n:"bottom",ref:!0,pt:$n[0].Int64,ps:5}],sn:"SumTerms",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Array.type(System.Int32),$n[0].Array.type(System.Int32),$n[12].FactoredRational,$n[0].Int64,$n[0].Int64]},{a:1,n:"_g",t:4,rt:$n[5].Graph,sn:"_g"},{a:1,n:"_normalizer",t:4,rt:$n[12].Normalizer,sn:"_normalizer"},{a:1,n:"_priorNeighbors",t:4,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),sn:"_priorNeighbors"},{a:1,n:"_signLookup",t:4,rt:$n[12].SignLookup,sn:"_signLookup"}]}});$m($n[12].GraphPolynomialExtensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"GetCoefficient",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"power",pt:$n[0].Array.type(System.Int32),ps:1}],sn:"GetCoefficient",rt:$n[0].Int32,p:[$n[5].Graph,$n[0].Array.type(System.Int32)]},{a:2,n:"GetSignSum",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"power",pt:$n[0].Array.type(System.Int32),ps:1}],sn:"GetSignSum",rt:$n[0].Int32,p:[$n[5].Graph,$n[0].Array.type(System.Int32)]}]}});$m($n[12].Normalizer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Int32)],pi:[{n:"height",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"ctor"},{a:2,n:"Get",t:8,pi:[{n:"a",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"Get",rt:$n[12].FactoredRational,p:[$n[0].Array.type(System.Int32)]},{a:2,n:"FactoredDifference",t:4,rt:System.Array.type(Algorithms.Polynomials.FactoredRational,2),sn:"FactoredDifference"},{a:2,n:"InsideProduct",t:4,rt:System.Array.type(Algorithms.Polynomials.FactoredRational,2),sn:"InsideProduct"}]}});$m($n[12].PrimeNumbers,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"ComputeMorePrimes",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0}],sn:"ComputeMorePrimes",rt:$n[0].Void,p:[$n[0].Int32]},{a:2,n:"Get",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0}],sn:"Get",rt:$n[0].Int32,p:[$n[0].Int32]},{a:1,n:"IsPrime",is:!0,t:8,pi:[{n:"p",pt:$n[0].Int32,ps:0}],sn:"IsPrime",rt:$n[0].Boolean,p:[$n[0].Int32]},{a:1,n:"_primes",is:!0,t:4,rt:$n[2].List$1(System.Int32),sn:"_primes"}]}});$m($n[12].SignLookup,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.Int32)],pi:[{n:"height",pt:$n[0].Array.type(System.Int32),ps:0}],sn:"ctor"},{a:2,n:"Sign",t:4,rt:$n[0].Array.type(System.Int32,2),sn:"Sign"}]}});$m($n[20].MinorFinder,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"EnumerateConnectedThreePartPartitions",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"J",pt:$n[2].List$1(System.Int32),ps:1}],sn:"EnumerateConnectedThreePartPartitions",rt:$n[2].IEnumerable$1(System.Object),p:[$n[5].Graph,$n[2].List$1(System.Int32)]},{a:2,n:"FindWithJ",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"J",pt:$n[2].List$1(System.Int32),ps:1}],sn:"FindWithJ",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Object)),p:[$n[5].Graph,$n[2].List$1(System.Int32)]}]}});$m($n[13].Board,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int64),$n[0].Int64,$n[0].Boolean],pi:[{n:"stacks",pt:$n[2].List$1(System.Int64),ps:0},{n:"pot",pt:$n[0].Int64,ps:1},{n:"computeHash",dv:!0,o:!0,pt:$n[0].Boolean,ps:2}],sn:"ctor"},{a:2,n:"ApplyInverseMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:1}],sn:"ApplyInverseMapping",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Object,$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"ApplyMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:1}],sn:"ApplyMapping",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Object,$n[2].IEnumerable$1(System.Int32)]},{a:1,n:"ApplyMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"stack",pt:$n[0].Int64,ps:1}],sn:"ApplyMapping$1",rt:$n[0].Int64,p:[$n[0].Object,$n[0].Int64]},{a:2,n:"Clone",t:8,sn:"Clone",rt:$n[13].Board},{a:1,n:"ComputeHashCode",t:8,sn:"ComputeHashCode",rt:$n[0].Void},{a:2,n:"DoMoveCombination",t:8,pi:[{n:"moves",pt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move),ps:0}],sn:"DoMoveCombination",rt:$n[0].Void,p:[$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move)]},{a:2,n:"DoMoveCombinationOnClone",t:8,pi:[{n:"swap",pt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move),ps:0}],sn:"DoMoveCombinationOnClone",rt:$n[13].Board,p:[$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move)]},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[13].Board,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[13].Board]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{a:2,n:"FindPermutation",t:8,pi:[{n:"other",pt:$n[13].Board,ps:0}],sn:"FindPermutation",rt:$n[0].Object,p:[$n[13].Board]},{a:1,n:"FlattenMapping",t:8,pi:[{n:"mapping",pt:$n[2].IEnumerable$1(System.Object),ps:0}],sn:"FlattenMapping",rt:$n[0].Object,p:[$n[2].IEnumerable$1(System.Object)]},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Int64)},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:1,n:"GetTrace",t:8,pi:[{n:"c",pt:$n[0].Int32,ps:0}],sn:"GetTrace",rt:$n[0].Int64,p:[$n[0].Int32]},{a:2,n:"MakeMove",t:8,pi:[{n:"move",pt:$n[13].Move,ps:0}],sn:"MakeMove",rt:$n[0].Void,p:[$n[13].Move]},{a:2,n:"OtherTurn",is:!0,t:8,pi:[{n:"turn",pt:$n[13].Turn,ps:0}],sn:"OtherTurn",rt:$n[13].Turn,p:[$n[13].Turn]},{a:1,n:"SequenceEqualPermuted",t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"other",pt:$n[13].Board,ps:1}],sn:"SequenceEqualPermuted",rt:$n[0].Boolean,p:[$n[0].Object,$n[13].Board]},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"ToTex",t:8,sn:"ToTex",rt:$n[0].String},{a:1,n:"UpdateHash",is:!0,t:8,pi:[{n:"hash",ref:!0,pt:$n[0].Int32,ps:0},{n:"value",pt:$n[0].Int64,ps:1}],sn:"UpdateHash",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int64]},{a:2,n:"Item",t:16,rt:$n[0].Int64,p:[$n[0].Int32],i:!0,ipi:[{n:"x",pt:$n[0].Int32,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0}],sn:"getItem",rt:$n[0].Int64,p:[$n[0].Int32]}},{a:2,n:"ColorCount",t:4,rt:$n[0].Int32,sn:"ColorCount"},{a:2,n:"LastMove",t:4,rt:$n[13].Move,sn:"LastMove"},{a:2,n:"N",t:4,rt:$n[0].Int32,sn:"N"},{a:2,n:"Pot",t:4,rt:$n[0].Int64,sn:"Pot"},{a:1,n:"PotSet",t:4,rt:$n[2].List$1(System.Int32),sn:"PotSet"},{a:2,n:"Stacks",t:4,rt:$n[2].List$1(System.Int64),sn:"Stacks"},{a:2,n:"StorePermutationInfo",is:!0,t:4,rt:$n[0].Boolean,sn:"StorePermutationInfo"},{a:2,n:"Template",t:4,rt:$n[5].Lazy$1(Algorithms.FixerBreaker.KnowledgeEngine.Template),sn:"Template"},{a:1,n:"TraceChangeIndices",t:4,rt:$n[2].List$1(System.Int32),sn:"TraceChangeIndices"},{a:1,n:"Traces",t:4,rt:$n[2].List$1(System.Int64),sn:"Traces"},{a:1,n:"TracesForPermutationInfo",t:4,rt:$n[2].List$1(System.Object),sn:"TracesForPermutationInfo"},{a:2,n:"Turn",t:4,rt:$n[13].Turn,sn:"Turn"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"}]}});$m($n[13].Turn,function(){return{att:257,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Breaker",is:!0,t:4,rt:$n[13].Turn,sn:"Breaker"},{a:2,n:"Fixer",is:!0,t:4,rt:$n[13].Turn,sn:"Fixer"}]}});$m($n[13].Move,function(){return{att:1048841,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Added",t:4,rt:$n[0].Int32,sn:"Added"},{a:2,n:"Removed",t:4,rt:$n[0].Int32,sn:"Removed"},{a:2,n:"Stack",t:4,rt:$n[0].Int32,sn:"Stack"}]}});$m($n[13].SlowBoard,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int64),$n[0].Int64],pi:[{n:"stacks",pt:$n[2].List$1(System.Int64),ps:0},{n:"pot",pt:$n[0].Int64,ps:1}],sn:"ctor"},{a:2,n:"ApplyInverseMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:1}],sn:"ApplyInverseMapping",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Object,$n[2].IEnumerable$1(System.Int32)]},{a:2,n:"ApplyMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"set",pt:$n[2].IEnumerable$1(System.Int32),ps:1}],sn:"ApplyMapping",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Object,$n[2].IEnumerable$1(System.Int32)]},{a:1,n:"ApplyMapping",is:!0,t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"stack",pt:$n[0].Int64,ps:1}],sn:"ApplyMapping$1",rt:$n[0].Int64,p:[$n[0].Object,$n[0].Int64]},{a:2,n:"Clone",t:8,sn:"Clone",rt:$n[13].SlowBoard},{a:1,n:"ComputeHashCode",t:8,sn:"ComputeHashCode",rt:$n[0].Void},{a:2,n:"DoMoveCombination",t:8,pi:[{n:"moves",pt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move),ps:0}],sn:"DoMoveCombination",rt:$n[0].Void,p:[$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move)]},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[13].SlowBoard,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[13].SlowBoard]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{a:2,n:"ExactlyEqual",t:8,pi:[{n:"other",pt:$n[13].SlowBoard,ps:0}],sn:"ExactlyEqual",rt:$n[0].Boolean,p:[$n[13].SlowBoard]},{a:2,n:"FindPermutation",t:8,pi:[{n:"other",pt:$n[13].SlowBoard,ps:0}],sn:"FindPermutation",rt:$n[0].Object,p:[$n[13].SlowBoard]},{a:1,n:"FlattenMapping",t:8,pi:[{n:"mapping",pt:$n[2].IEnumerable$1(System.Object),ps:0}],sn:"FlattenMapping",rt:$n[0].Object,p:[$n[2].IEnumerable$1(System.Object)]},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Int64)},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"MakeMove",t:8,pi:[{n:"move",pt:$n[13].Move,ps:0}],sn:"MakeMove",rt:$n[0].Void,p:[$n[13].Move]},{a:2,n:"OtherTurn",is:!0,t:8,pi:[{n:"turn",pt:$n[13].Turn,ps:0}],sn:"OtherTurn",rt:$n[13].Turn,p:[$n[13].Turn]},{a:1,n:"SequenceEqualPermuted",t:8,pi:[{n:"mapping",pt:$n[0].Object,ps:0},{n:"other",pt:$n[13].SlowBoard,ps:1}],sn:"SequenceEqualPermuted",rt:$n[0].Boolean,p:[$n[0].Object,$n[13].SlowBoard]},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"ToTex",t:8,sn:"ToTex",rt:$n[0].String},{a:1,n:"UpdateHash",is:!0,t:8,pi:[{n:"hash",ref:!0,pt:$n[0].Int32,ps:0},{n:"value",pt:$n[0].Int64,ps:1}],sn:"UpdateHash",rt:$n[0].Void,p:[$n[0].Int32,$n[0].Int64]},{a:2,n:"ColorCount",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ColorCount",t:8,rt:$n[0].Int32,fg:"ColorCount"},s:{a:1,n:"set_ColorCount",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ColorCount"},fn:"ColorCount"},{a:1,n:"DegreeChangeIndices",t:16,rt:$n[2].List$1(System.Int32),g:{a:1,n:"get_DegreeChangeIndices",t:8,rt:$n[2].List$1(System.Int32),fg:"DegreeChangeIndices"},s:{a:1,n:"set_DegreeChangeIndices",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"DegreeChangeIndices"},fn:"DegreeChangeIndices"},{a:1,n:"Degrees",t:16,rt:$n[2].List$1(System.Object),g:{a:1,n:"get_Degrees",t:8,rt:$n[2].List$1(System.Object),fg:"Degrees"},s:{a:1,n:"set_Degrees",t:8,p:[$n[2].List$1(System.Object)],rt:$n[0].Void,fs:"Degrees"},fn:"Degrees"},{a:2,n:"Item",t:16,rt:$n[0].Int64,p:[$n[0].Int32],i:!0,ipi:[{n:"x",pt:$n[0].Int32,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0}],sn:"getItem",rt:$n[0].Int64,p:[$n[0].Int32]}},{a:2,n:"LastMove",t:16,rt:$n[13].Move,g:{a:2,n:"get_LastMove",t:8,rt:$n[13].Move,fg:"LastMove"},s:{a:1,n:"set_LastMove",t:8,p:[$n[13].Move],rt:$n[0].Void,fs:"LastMove"},fn:"LastMove"},{a:2,n:"N",t:16,rt:$n[0].Int32,g:{a:2,n:"get_N",t:8,rt:$n[0].Int32,fg:"N"},s:{a:1,n:"set_N",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"N"},fn:"N"},{a:2,n:"Pot",t:16,rt:$n[0].Int64,g:{a:2,n:"get_Pot",t:8,rt:$n[0].Int64,fg:"Pot"},s:{a:1,n:"set_Pot",t:8,p:[$n[0].Int64],rt:$n[0].Void,fs:"Pot"},fn:"Pot"},{a:1,n:"PotSet",t:16,rt:$n[2].List$1(System.Int32),g:{a:1,n:"get_PotSet",t:8,rt:$n[2].List$1(System.Int32),fg:"PotSet"},s:{a:1,n:"set_PotSet",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"PotSet"},fn:"PotSet"},{a:2,n:"Stacks",t:16,rt:$n[2].List$1(System.Int64),g:{a:2,n:"get_Stacks",t:8,rt:$n[2].List$1(System.Int64),fg:"Stacks"},s:{a:1,n:"set_Stacks",t:8,p:[$n[2].List$1(System.Int64)],rt:$n[0].Void,fs:"Stacks"},fn:"Stacks"},{a:2,n:"Template",t:16,rt:$n[14].Template,g:{a:2,n:"get_Template",t:8,rt:$n[14].Template,fg:"Template"},s:{a:1,n:"set_Template",t:8,p:[$n[14].Template],rt:$n[0].Void,fs:"Template"},fn:"Template"},{a:2,n:"Turn",t:16,rt:$n[13].Turn,g:{a:2,n:"get_Turn",t:8,rt:$n[13].Turn,fg:"Turn"},s:{a:1,n:"set_Turn",t:8,p:[$n[13].Turn],rt:$n[0].Void,fs:"Turn"},fn:"Turn"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"}]}});$m($n[13].Tree$1,function(T){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,sn:"ctor"},{a:3,n:"AddChild",t:8,pi:[{n:"child",pt:T,ps:0}],sn:"AddChild",rt:$n[0].Void,p:[T]},{a:2,n:"BuildGraph",t:8,pi:[{n:"maxDepth",dv:2147483647,o:!0,pt:$n[0].Int32,ps:0}],sn:"BuildGraph",rt:$n[0].Object,p:[$n[0].Int32]},{a:2,n:"GetDepth",t:8,sn:"GetDepth",rt:$n[0].Int32},{a:2,n:"RemoveChild",t:8,pi:[{n:"child",pt:T,ps:0}],sn:"RemoveChild",rt:$n[0].Void,p:[T]},{a:3,n:"Traverse",t:8,pi:[{n:"onDescent",pt:Function,ps:0},{n:"maxDepth",dv:2147483647,o:!0,pt:$n[0].Int32,ps:1}],sn:"Traverse",rt:$n[0].Void,p:[Function,$n[0].Int32]},{a:1,n:"TraverseInternal",t:8,pi:[{n:"onDescent",pt:Function,ps:0},{n:"maxDepth",pt:$n[0].Int32,ps:1},{n:"depth",pt:$n[0].Int32,ps:2}],sn:"TraverseInternal",rt:$n[0].Void,p:[Function,$n[0].Int32,$n[0].Int32]},{a:2,n:"Children",t:16,rt:$n[2].List$1(T),g:{a:2,n:"get_Children",t:8,rt:$n[2].List$1(T),fg:"Children"},s:{a:1,n:"set_Children",t:8,p:[$n[2].List$1(T)],rt:$n[0].Void,fs:"Children"},fn:"Children"},{a:2,n:"Parent",t:16,rt:T,g:{a:2,n:"get_Parent",t:8,rt:T,fg:"Parent"},s:{a:1,n:"set_Parent",t:8,p:[T],rt:$n[0].Void,fs:"Parent"},fn:"Parent"},{a:1,n:"This",t:16,rt:T,g:{a:1,n:"get_This",t:8,rt:T,fg:"This"},s:{a:1,n:"set_This",t:8,p:[T],rt:$n[0].Void,fs:"This"},fn:"This"}]}});$m($n[14].BoardKnowledge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[13].Board,$n[0].String],pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"reason",pt:$n[0].String,ps:1}],sn:"ctor"},{a:2,n:"Board",t:16,rt:$n[13].Board,g:{a:2,n:"get_Board",t:8,rt:$n[13].Board,fg:"Board"},s:{a:1,n:"set_Board",t:8,p:[$n[13].Board],rt:$n[0].Void,fs:"Board"},fn:"Board"},{a:2,n:"ColorPair",t:16,rt:$n[0].Object,g:{a:2,n:"get_ColorPair",t:8,rt:$n[0].Object,fg:"ColorPair"},s:{a:2,n:"set_ColorPair",t:8,p:[$n[0].Object],rt:$n[0].Void,fs:"ColorPair"},fn:"ColorPair"},{a:2,n:"Depth",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Depth",t:8,rt:$n[0].Int32,fg:"Depth"},s:{a:2,n:"set_Depth",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Depth"},fn:"Depth"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},s:{a:1,n:"set_Reason",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Reason"},fn:"Reason"},{a:2,n:"Swaps",t:16,rt:$n[2].List$1(System.Object),g:{a:2,n:"get_Swaps",t:8,rt:$n[2].List$1(System.Object),fg:"Swaps"},s:{a:2,n:"set_Swaps",t:8,p:[$n[2].List$1(System.Object)],rt:$n[0].Void,fs:"Swaps"},fn:"Swaps"}]}});$m($n[14].ColoringAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{a:2,n:"ColorableWithoutEdge",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"edgeIndex",pt:$n[0].Int32,ps:2}],sn:"ColorableWithoutEdge",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[0].Int32]},{a:2,n:"ColorableWithoutEdge",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"stacks",pt:$n[2].List$1(System.Int64),ps:1},{n:"edgeIndex",pt:$n[0].Int32,ps:2}],sn:"ColorableWithoutEdge$1",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[2].List$1(System.Int64),$n[0].Int32]},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"}]}});$m($n[14].CommonColorAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"}]}});$m($n[14].GoodnessAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Boolean],pi:[{n:"findCleanestWin",dv:!0,o:!0,pt:$n[0].Boolean,ps:0}],sn:"ctor"},{a:1,n:"AbsoluteDeviation",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0}],sn:"AbsoluteDeviation",rt:$n[0].Double,p:[$n[2].List$1(System.Int32)]},{a:1,n:"CompareVectors",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0},{n:"y",pt:$n[2].List$1(System.Int32),ps:1}],sn:"CompareVectors",rt:$n[0].Int32,p:[$n[2].List$1(System.Int32),$n[2].List$1(System.Int32)]},{a:1,n:"GetVectors",t:8,pi:[{n:"b",pt:$n[13].Board,ps:0}],sn:"GetVectors",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[13].Board]},{ov:!0,a:3,n:"IsChildBoardBetter",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"childBoard",pt:$n[13].Board,ps:2}],sn:"IsChildBoardBetter",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[13].Board]},{a:1,n:"Mean",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0}],sn:"Mean",rt:$n[0].Double,p:[$n[2].List$1(System.Int32)]},{a:1,n:"Median",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0}],sn:"Median",rt:$n[0].Double,p:[$n[2].List$1(System.Int32)]},{a:1,n:"PushLeftOrdering",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"childBoard",pt:$n[13].Board,ps:2}],sn:"PushLeftOrdering",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[13].Board]},{a:1,n:"StandardDeviation",t:8,pi:[{n:"x",pt:$n[2].List$1(System.Int32),ps:0}],sn:"StandardDeviation",rt:$n[0].Double,p:[$n[2].List$1(System.Int32)]},{ov:!0,a:3,n:"ChildReason",t:16,rt:$n[0].String,g:{ov:!0,a:3,n:"get_ChildReason",t:8,rt:$n[0].String,fg:"ChildReason"},fn:"ChildReason"}]}});$m($n[14].GraphKnowledge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph],pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"ctor"},{a:1,n:"BuildLineGraph",t:8,sn:"BuildLineGraph",rt:$n[0].Void},{a:2,n:"ConnectedOrderings",t:16,rt:$n[5].Lazy$1(System.Collections.Generic.Dictionary$2(System.Object,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))),g:{a:2,n:"get_ConnectedOrderings",t:8,rt:$n[5].Lazy$1(System.Collections.Generic.Dictionary$2(System.Object,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))),fg:"ConnectedOrderings"},s:{a:1,n:"set_ConnectedOrderings",t:8,p:[$n[5].Lazy$1(System.Collections.Generic.Dictionary$2(System.Object,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))))],rt:$n[0].Void,fs:"ConnectedOrderings"},fn:"ConnectedOrderings"},{a:2,n:"EdgeIndices",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_EdgeIndices",t:8,rt:$n[2].List$1(System.Int32),fg:"EdgeIndices"},s:{a:1,n:"set_EdgeIndices",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"EdgeIndices"},fn:"EdgeIndices"},{a:2,n:"Edges",t:16,rt:$n[2].List$1(System.Object),g:{a:2,n:"get_Edges",t:8,rt:$n[2].List$1(System.Object),fg:"Edges"},s:{a:1,n:"set_Edges",t:8,p:[$n[2].List$1(System.Object)],rt:$n[0].Void,fs:"Edges"},fn:"Edges"},{a:2,n:"Graph",t:16,rt:$n[5].Graph,g:{a:2,n:"get_Graph",t:8,rt:$n[5].Graph,fg:"Graph"},s:{a:1,n:"set_Graph",t:8,p:[$n[5].Graph],rt:$n[0].Void,fs:"Graph"},fn:"Graph"},{a:2,n:"Leaves",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Leaves",t:8,rt:$n[2].List$1(System.Int32),fg:"Leaves"},s:{a:1,n:"set_Leaves",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Leaves"},fn:"Leaves"},{a:2,n:"LineGraph",t:16,rt:$n[5].Graph,g:{a:2,n:"get_LineGraph",t:8,rt:$n[5].Graph,fg:"LineGraph"},s:{a:1,n:"set_LineGraph",t:8,p:[$n[5].Graph],rt:$n[0].Void,fs:"LineGraph"},fn:"LineGraph"}]}});$m($n[14].IBoardAnalyzer,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{ab:!0,a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{ab:!0,a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent"},s:{ab:!0,a:1,n:"set_IsKnowledgeDependent",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent"},fn:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$IsKnowledgeDependent"},{ab:!0,a:2,n:"Reason",t:16,rt:$n[0].String,g:{ab:!0,a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason"},s:{ab:!0,a:1,n:"set_Reason",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason"},fn:"Algorithms$FixerBreaker$KnowledgeEngine$IBoardAnalyzer$Reason"}]}});$m($n[14].IMind,function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Analyze",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"progress",pt:Function,ps:1}],sn:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$Analyze",rt:$n[0].Boolean,p:[$n[14].Template,Function]},{ab:!0,a:2,n:"FixerWonAllNearlyColorableBoards",t:16,rt:$n[0].Boolean,g:{ab:!0,a:2,n:"get_FixerWonAllNearlyColorableBoards",t:8,rt:$n[0].Boolean,fg:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$FixerWonAllNearlyColorableBoards"},s:{ab:!0,a:1,n:"set_FixerWonAllNearlyColorableBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$FixerWonAllNearlyColorableBoards"},fn:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$FixerWonAllNearlyColorableBoards"},{ab:!0,a:2,n:"MaxPot",t:16,rt:$n[0].Int32,s:{ab:!0,a:2,n:"set_MaxPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$MaxPot"},fn:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$MaxPot"},{ab:!0,a:2,n:"TotalPositions",t:16,rt:$n[0].Int32,g:{ab:!0,a:2,n:"get_TotalPositions",t:8,rt:$n[0].Int32,fg:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$TotalPositions"},s:{ab:!0,a:1,n:"set_TotalPositions",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$TotalPositions"},fn:"Algorithms$FixerBreaker$KnowledgeEngine$IMind$TotalPositions"}]}});$m($n[14].KiersteadAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{a:2,n:"EnumerateKiersteadEdgeIndices",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"enforceDegreeRequirement",dv:!1,o:!0,pt:$n[0].Boolean,ps:2},{n:"reason",dv:"",o:!0,pt:$n[0].String,ps:3}],sn:"EnumerateKiersteadEdgeIndices",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[14].Knowledge,$n[13].Board,$n[0].Boolean,$n[0].String]},{a:2,n:"IsKierstead",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"enforceDegreeRequirement",dv:!1,o:!0,pt:$n[0].Boolean,ps:2},{n:"reason",dv:"",o:!0,pt:$n[0].String,ps:3}],sn:"IsKierstead",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[0].Boolean,$n[0].String]},{a:2,n:"IsKierstead",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"edgeIndex",pt:$n[0].Int32,ps:2},{n:"enforceDegreeRequirement",dv:!1,o:!0,pt:$n[0].Boolean,ps:3}],sn:"IsKierstead$1",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[0].Int32,$n[0].Boolean]},{a:2,n:"IsKierstead",is:!0,t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"edgeIndex",pt:$n[0].Int32,ps:2},{n:"ordering",pt:$n[2].List$1(System.Int32),ps:3}],sn:"IsKierstead$2",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[0].Int32,$n[2].List$1(System.Int32)]},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"}]}});$m($n[14].Knowledge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph],pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"ctor"},{a:2,n:"GetEdgeColorList",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"edgeIndex",pt:$n[0].Int32,ps:1}],sn:"GetEdgeColorList",rt:$n[0].Int64,p:[$n[13].Board,$n[0].Int32]},{a:2,n:"GetEdgeColorList",t:8,pi:[{n:"stacks",pt:$n[2].List$1(System.Int64),ps:0},{n:"edgeIndex",pt:$n[0].Int32,ps:1}],sn:"GetEdgeColorList$1",rt:$n[0].Int64,p:[$n[2].List$1(System.Int64),$n[0].Int32]},{a:2,n:"GraphKnowledge",t:16,rt:$n[14].GraphKnowledge,g:{a:2,n:"get_GraphKnowledge",t:8,rt:$n[14].GraphKnowledge,fg:"GraphKnowledge"},s:{a:1,n:"set_GraphKnowledge",t:8,p:[$n[14].GraphKnowledge],rt:$n[0].Void,fs:"GraphKnowledge"},fn:"GraphKnowledge"},{a:2,n:"Item",t:16,rt:$n[14].TemplateKnowledge,p:[$n[14].Template],i:!0,ipi:[{n:"template",pt:$n[14].Template,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0}],sn:"getItem",rt:$n[14].TemplateKnowledge,p:[$n[14].Template]}},{a:1,n:"_templateLookup",t:4,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Template,Algorithms.FixerBreaker.KnowledgeEngine.TemplateKnowledge),sn:"_templateLookup"}]}});$m($n[14].KnowledgeTree,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AddChild",t:8,pi:[{n:"swap",pt:$n[0].Object,ps:0}],sn:"AddChild$1",rt:$n[14].KnowledgeTree,p:[$n[0].Object]},{a:2,n:"Board",t:16,rt:$n[0].String,g:{a:2,n:"get_Board",t:8,rt:$n[0].String,fg:"Board"},s:{a:2,n:"set_Board",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Board"},fn:"Board"},{a:2,n:"ColorPair",t:16,rt:$n[0].Object,g:{a:2,n:"get_ColorPair",t:8,rt:$n[0].Object,fg:"ColorPair"},s:{a:2,n:"set_ColorPair",t:8,p:[$n[0].Object],rt:$n[0].Void,fs:"ColorPair"},fn:"ColorPair"},{a:2,n:"Note",t:16,rt:$n[0].String,g:{a:2,n:"get_Note",t:8,rt:$n[0].String,fg:"Note"},s:{a:2,n:"set_Note",t:8,p:[$n[0].String],rt:$n[0].Void,fs:"Note"},fn:"Note"},{a:2,n:"Number",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Number",t:8,rt:$n[0].Int32,fg:"Number"},s:{a:2,n:"set_Number",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Number"},fn:"Number"},{a:2,n:"Swap",t:16,rt:$n[0].Object,g:{a:2,n:"get_Swap",t:8,rt:$n[0].Object,fg:"Swap"},s:{a:1,n:"set_Swap",t:8,p:[$n[0].Object],rt:$n[0].Void,fs:"Swap"},fn:"Swap"}]}});$m($n[14].MetaKnowledge,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"DegreeCondition",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"b",pt:$n[13].Board,ps:1},{n:"missingEdges",dv:null,o:!0,pt:Function,ps:2}],sn:"DegreeCondition",rt:$n[0].Boolean,p:[$n[5].Graph,$n[13].Board,Function]},{a:2,n:"DegreeCondition",is:!0,t:8,pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"stacks",pt:$n[2].List$1(System.Int64),ps:1},{n:"pot",pt:$n[0].Int64,ps:2},{n:"missingEdges",dv:null,o:!0,pt:Function,ps:3}],sn:"DegreeCondition$1",rt:$n[0].Boolean,p:[$n[5].Graph,$n[2].List$1(System.Int64),$n[0].Int64,Function]},{a:2,n:"Exists",is:!0,t:8,pi:[{n:"o",pt:$n[0].Object,ps:0}],sn:"Exists",rt:$n[0].Boolean,p:[$n[0].Object]},{a:2,n:"G_alpha",is:!0,t:8,pi:[{n:"alpha",pt:$n[0].Int32,ps:0},{n:"stacks",pt:$n[2].List$1(System.Int64),ps:1}],sn:"G_alpha",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int32,$n[2].List$1(System.Int64)]},{a:2,n:"GetColorGraphs",is:!0,t:8,pi:[{n:"stacks",pt:$n[2].List$1(System.Int64),ps:0},{n:"pot",pt:$n[0].Int64,ps:1}],sn:"GetColorGraphs",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),p:[$n[2].List$1(System.Int64),$n[0].Int64]},{a:2,n:"Interval",is:!0,t:8,pi:[{n:"first",pt:$n[0].Int32,ps:0},{n:"last",pt:$n[0].Int32,ps:1}],sn:"Interval",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[0].Int32,$n[0].Int32]},{a:2,n:"MapMove",is:!0,t:8,pi:[{n:"f",pt:$n[0].Object,ps:0},{n:"move",pt:$n[13].Move,ps:1}],sn:"MapMove",rt:$n[13].Move,p:[$n[0].Object,$n[13].Move]},{a:2,n:"Naturals",is:!0,t:8,sn:"Naturals",rt:$n[2].IEnumerable$1(System.Int32)},{a:2,n:"Surplus",is:!0,t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"g",pt:$n[5].Graph,ps:1}],sn:"Surplus",rt:$n[0].Int32,p:[$n[13].Board,$n[5].Graph]},{a:2,n:"Surplus",is:!0,t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"g",pt:$n[5].Graph,ps:1},{n:"vertices",pt:$n[2].List$1(System.Int32),ps:2}],sn:"Surplus$1",rt:$n[0].Int32,p:[$n[13].Board,$n[5].Graph,$n[2].List$1(System.Int32)]},{a:2,n:"ToConsole",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"ToConsole",rt:$n[0].Void,p:[$n[0].String]},{a:2,n:"TryParseDouble",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"TryParseDouble",rt:$n[0].Nullable$1(System.Double),p:[$n[0].String]},{a:2,n:"TryParseInt",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"TryParseInt",rt:$n[0].Nullable$1(System.Int32),p:[$n[0].String]},{a:2,n:"d_H",is:!0,t:8,pi:[{n:"alpha",pt:$n[0].Int32,ps:0},{n:"stacksInH",pt:$n[2].IEnumerable$1(System.Int64),ps:1}],sn:"d_H",rt:$n[0].Int32,p:[$n[0].Int32,$n[2].IEnumerable$1(System.Int64)]},{a:2,n:"Infinity",is:!0,t:4,rt:$n[0].Int32,sn:"Infinity",ro:!0}]}});$m($n[14].Mind,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph],pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"ctor"},{a:2,n:"AddBoardAnalyzer",t:8,pi:[{n:"analyzer",pt:$n[14].IBoardAnalyzer,ps:0}],sn:"AddBoardAnalyzer",rt:$n[0].Void,p:[$n[14].IBoardAnalyzer]},{a:2,n:"Analyze",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"progress",dv:null,o:!0,pt:Function,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Template,Function]},{a:1,n:"Analyze",t:8,pi:[{n:"boards",pt:$n[2].List$1(Algorithms.FixerBreaker.Board),ps:0},{n:"progress",dv:null,o:!0,pt:Function,ps:1}],sn:"Analyze$1",rt:$n[0].Boolean,p:[$n[2].List$1(Algorithms.FixerBreaker.Board),Function]},{a:1,n:"EnsureSwapAnalyzerExistence",t:8,sn:"EnsureSwapAnalyzerExistence",rt:$n[0].Void},{a:2,n:"EnumerateKnowledgeTrees",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0}],sn:"EnumerateKnowledgeTrees",rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.KnowledgeEngine.KnowledgeTree),p:[$n[14].Template]},{a:1,n:"FillKnowledgeTree",t:8,pi:[{n:"knowledgeTree",pt:$n[14].KnowledgeTree,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"seenCache",pt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Object),ps:2}],sn:"FillKnowledgeTree",rt:$n[0].Void,p:[$n[14].KnowledgeTree,$n[13].Board,$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Object)]},{a:1,n:"GenerateAllBoards",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"colorCount",pt:$n[0].Int32,ps:1},{n:"progress",dv:null,o:!0,pt:Function,ps:2}],sn:"GenerateAllBoards",rt:$n[2].HashSet$1(Algorithms.FixerBreaker.Board),p:[$n[14].Template,$n[0].Int32,Function]},{a:2,n:"GenerateKnowledgeTree",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0}],sn:"GenerateKnowledgeTree",rt:$n[14].KnowledgeTree,p:[$n[13].Board]},{a:2,n:"GenerateTemplateKnowledgeGraph",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0}],sn:"GenerateTemplateKnowledgeGraph",rt:$n[0].Object,p:[$n[14].Template]},{a:1,n:"BoardAnalysisPipeline",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer),g:{a:1,n:"get_BoardAnalysisPipeline",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer),fg:"BoardAnalysisPipeline"},s:{a:1,n:"set_BoardAnalysisPipeline",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.IBoardAnalyzer)],rt:$n[0].Void,fs:"BoardAnalysisPipeline"},fn:"BoardAnalysisPipeline"},{a:2,n:"BreakerWonBoard",t:16,rt:$n[13].Board,g:{a:2,n:"get_BreakerWonBoard",t:8,rt:$n[13].Board,fg:"BreakerWonBoard"},s:{a:1,n:"set_BreakerWonBoard",t:8,p:[$n[13].Board],rt:$n[0].Void,fs:"BreakerWonBoard"},fn:"BreakerWonBoard"},{a:2,n:"FindCleanestWin",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_FindCleanestWin",t:8,rt:$n[0].Boolean,fg:"FindCleanestWin"},s:{a:2,n:"set_FindCleanestWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"FindCleanestWin"},fn:"FindCleanestWin"},{a:2,n:"FixerWonAllNearlyColorableBoards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_FixerWonAllNearlyColorableBoards",t:8,rt:$n[0].Boolean,fg:"FixerWonAllNearlyColorableBoards"},s:{a:2,n:"set_FixerWonAllNearlyColorableBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"FixerWonAllNearlyColorableBoards"},fn:"FixerWonAllNearlyColorableBoards"},{a:1,n:"Knowledge",t:16,rt:$n[14].Knowledge,g:{a:1,n:"get_Knowledge",t:8,rt:$n[14].Knowledge,fg:"Knowledge"},s:{a:1,n:"set_Knowledge",t:8,p:[$n[14].Knowledge],rt:$n[0].Void,fs:"Knowledge"},fn:"Knowledge"},{a:2,n:"MaxPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxPot",t:8,rt:$n[0].Int32,fg:"MaxPot"},s:{a:2,n:"set_MaxPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MaxPot"},fn:"MaxPot"},{a:2,n:"MinPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MinPot",t:8,rt:$n[0].Int32,fg:"MinPot"},s:{a:2,n:"set_MinPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MinPot"},fn:"MinPot"},{a:2,n:"NearlyColorableOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_NearlyColorableOnly",t:8,rt:$n[0].Boolean,fg:"NearlyColorableOnly"},s:{a:2,n:"set_NearlyColorableOnly",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"NearlyColorableOnly"},fn:"NearlyColorableOnly"},{a:2,n:"StopAnalysisOnBreakerWin",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_StopAnalysisOnBreakerWin",t:8,rt:$n[0].Boolean,fg:"StopAnalysisOnBreakerWin"},s:{a:2,n:"set_StopAnalysisOnBreakerWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"StopAnalysisOnBreakerWin"},fn:"StopAnalysisOnBreakerWin"},{a:2,n:"SuperabundantOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_SuperabundantOnly",t:8,rt:$n[0].Boolean,fg:"SuperabundantOnly"},s:{a:2,n:"set_SuperabundantOnly",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"SuperabundantOnly"},fn:"SuperabundantOnly"},{a:2,n:"TotalPositions",t:16,rt:$n[0].Int32,g:{a:2,n:"get_TotalPositions",t:8,rt:$n[0].Int32,fg:"TotalPositions"},s:{a:1,n:"set_TotalPositions",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"TotalPositions"},fn:"TotalPositions"},{a:1,n:"TreeNodeNumber",is:!0,t:4,rt:$n[0].Int32,sn:"TreeNodeNumber"}]}});$m($n[14].PotKnowledge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"colorCount",pt:$n[0].Int32,ps:0}],sn:"ctor"},{a:2,n:"AddImprovement",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"reason",pt:$n[0].String,ps:1},{n:"winDepth",pt:$n[0].Int32,ps:2},{n:"colorPair",pt:$n[0].Object,ps:3},{n:"goodSwaps",pt:$n[2].List$1(System.Object),ps:4}],sn:"AddImprovement",rt:$n[14].BoardKnowledge,p:[$n[13].Board,$n[0].String,$n[0].Int32,$n[0].Object,$n[2].List$1(System.Object)]},{a:2,n:"AddLoss",t:8,pi:[{n:"b",pt:$n[13].Board,ps:0}],sn:"AddLoss",rt:$n[0].Void,p:[$n[13].Board]},{a:2,n:"AddWin",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"reason",pt:$n[0].String,ps:1}],sn:"AddWin",rt:$n[14].BoardKnowledge,p:[$n[13].Board,$n[0].String]},{a:2,n:"AddWin",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"reason",pt:$n[0].String,ps:1},{n:"winDepth",pt:$n[0].Int32,ps:2},{n:"colorPair",pt:$n[0].Object,ps:3},{n:"goodSwaps",pt:$n[2].List$1(System.Object),ps:4}],sn:"AddWin$1",rt:$n[14].BoardKnowledge,p:[$n[13].Board,$n[0].String,$n[0].Int32,$n[0].Object,$n[2].List$1(System.Object)]},{a:2,n:"CopyInto",t:8,pi:[{n:"potKnowledge",pt:$n[14].PotKnowledge,ps:0}],sn:"CopyInto",rt:$n[0].Void,p:[$n[14].PotKnowledge]},{a:2,n:"EnumerateBoardKnowledge",t:8,sn:"EnumerateBoardKnowledge",rt:$n[2].IEnumerable$1(System.Collections.Generic.KeyValuePair$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge))},{a:1,n:"ImprovementLookup",t:8,pi:[{n:"reason",pt:$n[0].String,ps:0}],sn:"ImprovementLookup",rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge),p:[$n[0].String]},{a:1,n:"SetupColorPairs",t:8,sn:"SetupColorPairs",rt:$n[0].Void},{a:2,n:"ColorCount",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ColorCount",t:8,rt:$n[0].Int32,fg:"ColorCount"},s:{a:2,n:"set_ColorCount",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ColorCount"},fn:"ColorCount"},{a:2,n:"ColorPairs",t:16,rt:$n[2].List$1(System.Object),g:{a:2,n:"get_ColorPairs",t:8,rt:$n[2].List$1(System.Object),fg:"ColorPairs"},s:{a:1,n:"set_ColorPairs",t:8,p:[$n[2].List$1(System.Object)],rt:$n[0].Void,fs:"ColorPairs"},fn:"ColorPairs"},{a:2,n:"Item",t:16,rt:$n[14].BoardKnowledge,p:[$n[13].Board],i:!0,ipi:[{n:"board",pt:$n[13].Board,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"board",pt:$n[13].Board,ps:0}],sn:"getItem",rt:$n[14].BoardKnowledge,p:[$n[13].Board]}},{a:2,n:"Item",t:16,rt:$n[14].BoardKnowledge,p:[$n[0].String,$n[13].Board],i:!0,ipi:[{n:"reason",pt:$n[0].String,ps:0},{n:"board",pt:$n[13].Board,ps:1}],g:{a:2,n:"get_Item",t:8,pi:[{n:"reason",pt:$n[0].String,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"getItem$1",rt:$n[14].BoardKnowledge,p:[$n[0].String,$n[13].Board]},s:{a:2,n:"set_Item",t:8,pi:[{n:"reason",pt:$n[0].String,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"value",pt:$n[14].BoardKnowledge,ps:2}],sn:"setItem$1",rt:$n[0].Void,p:[$n[0].String,$n[13].Board,$n[14].BoardKnowledge]}},{a:2,n:"LostBoards",t:16,rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Board),g:{a:2,n:"get_LostBoards",t:8,rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Board),fg:"LostBoards"},fn:"LostBoards"},{a:1,n:"_boardLookup",t:4,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge),sn:"_boardLookup"},{a:1,n:"_improvementLookup",t:4,rt:$n[2].Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(Algorithms.FixerBreaker.Board,Algorithms.FixerBreaker.KnowledgeEngine.BoardKnowledge)),sn:"_improvementLookup"},{a:1,n:"_lostBoards",t:4,rt:$n[2].HashSet$1(Algorithms.FixerBreaker.Board),sn:"_lostBoards"}]}});$m($n[14].ReductionAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"}]}});$m($n[14].SubTemplateAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[System.Array.type(Algorithms.FixerBreaker.KnowledgeEngine.Template)],pi:[{n:"subTemplates",ip:!0,pt:System.Array.type(Algorithms.FixerBreaker.KnowledgeEngine.Template),ps:0}],sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{a:1,n:"ContainsSuberabundantSubStacksAboveTemplate",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"template",pt:$n[14].Template,ps:2},{n:"color",out:!0,pt:$n[0].Int32,ps:3},{n:"x",out:!0,pt:$n[0].Int32,ps:4}],sn:"ContainsSuberabundantSubStacksAboveTemplate",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[14].Template,$n[0].Int32,$n[0].Int32]},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{a:2,n:"Reason",t:16,rt:$n[0].String,g:{a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"},{a:1,n:"SubTemplates",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Template),g:{a:1,n:"get_SubTemplates",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Template),fg:"SubTemplates"},s:{a:1,n:"set_SubTemplates",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Template)],rt:$n[0].Void,fs:"SubTemplates"},fn:"SubTemplates"}]}});$m($n[14].SwapAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Boolean,$n[0].Boolean],pi:[{n:"findCleanestWin",dv:!0,o:!0,pt:$n[0].Boolean,ps:0},{n:"superabundantOnly",dv:!0,o:!0,pt:$n[0].Boolean,ps:1}],sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board]},{v:!0,a:3,n:"IsChildBoardBetter",t:8,pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"board",pt:$n[13].Board,ps:1},{n:"childBoard",pt:$n[13].Board,ps:2}],sn:"IsChildBoardBetter",rt:$n[0].Boolean,p:[$n[14].Knowledge,$n[13].Board,$n[13].Board]},{v:!0,a:3,n:"ChildReason",t:16,rt:$n[0].String,g:{v:!0,a:3,n:"get_ChildReason",t:8,rt:$n[0].String,fg:"ChildReason"},fn:"ChildReason"},{a:1,n:"DoSuperabundantCheck",t:16,rt:$n[0].Boolean,g:{a:1,n:"get_DoSuperabundantCheck",t:8,rt:$n[0].Boolean,fg:"DoSuperabundantCheck"},s:{a:1,n:"set_DoSuperabundantCheck",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"DoSuperabundantCheck"},fn:"DoSuperabundantCheck"},{a:1,n:"FindCleanestWin",t:16,rt:$n[0].Boolean,g:{a:1,n:"get_FindCleanestWin",t:8,rt:$n[0].Boolean,fg:"FindCleanestWin"},s:{a:1,n:"set_FindCleanestWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"FindCleanestWin"},fn:"FindCleanestWin"},{a:2,n:"IsKnowledgeDependent",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsKnowledgeDependent",t:8,rt:$n[0].Boolean,fg:"IsKnowledgeDependent"},fn:"IsKnowledgeDependent"},{v:!0,a:2,n:"Reason",t:16,rt:$n[0].String,g:{v:!0,a:2,n:"get_Reason",t:8,rt:$n[0].String,fg:"Reason"},fn:"Reason"}]}});$m($n[14].Template,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32)],pi:[{n:"sizes",pt:$n[2].List$1(System.Int32),ps:0}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].String,$n[5].Graph],pi:[{n:"s",pt:$n[0].String,ps:0},{n:"g",pt:$n[5].Graph,ps:1}],sn:"$ctor1"},{a:2,n:"Equals",t:8,pi:[{n:"t",pt:$n[14].Template,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[14].Template]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"o",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"op_Implicit",is:!0,t:8,pi:[{n:"s",pt:$n[0].String,ps:0}],sn:"op_Implicit",rt:$n[14].Template,p:[$n[0].String]},{a:2,n:"Sizes",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_Sizes",t:8,rt:$n[2].List$1(System.Int32),fg:"Sizes"},s:{a:1,n:"set_Sizes",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"Sizes"},fn:"Sizes"}]}});$m($n[14].TemplateKnowledge,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[14].Template],pi:[{n:"template",pt:$n[14].Template,ps:0}],sn:"ctor"},{a:2,n:"KnowledgeExists",t:8,pi:[{n:"colorCount",pt:$n[0].Int32,ps:0}],sn:"KnowledgeExists",rt:$n[0].Boolean,p:[$n[0].Int32]},{a:2,n:"Promote",t:8,pi:[{n:"colorCount",pt:$n[0].Int32,ps:0}],sn:"Promote",rt:$n[0].Void,p:[$n[0].Int32]},{a:2,n:"Item",t:16,rt:$n[14].PotKnowledge,p:[$n[0].Int32],i:!0,ipi:[{n:"colorCount",pt:$n[0].Int32,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"colorCount",pt:$n[0].Int32,ps:0}],sn:"getItem",rt:$n[14].PotKnowledge,p:[$n[0].Int32]}},{a:2,n:"LostBoards",t:16,rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Board),g:{a:2,n:"get_LostBoards",t:8,rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Board),fg:"LostBoards"},fn:"LostBoards"},{a:2,n:"Template",t:16,rt:$n[14].Template,g:{a:2,n:"get_Template",t:8,rt:$n[14].Template,fg:"Template"},s:{a:1,n:"set_Template",t:8,p:[$n[14].Template],rt:$n[0].Void,fs:"Template"},fn:"Template"},{a:1,n:"_potLookup",t:4,rt:$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.KnowledgeEngine.PotKnowledge),sn:"_potLookup"}]}});$m($n[14].ThoughtProgress,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"BoardsAdded",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.Board),g:{a:2,n:"get_BoardsAdded",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.Board),fg:"BoardsAdded"},s:{a:2,n:"set_BoardsAdded",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.Board)],rt:$n[0].Void,fs:"BoardsAdded"},fn:"BoardsAdded"},{a:2,n:"BoardsRemoved",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.Board),g:{a:2,n:"get_BoardsRemoved",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.Board),fg:"BoardsRemoved"},s:{a:2,n:"set_BoardsRemoved",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.Board)],rt:$n[0].Void,fs:"BoardsRemoved"},fn:"BoardsRemoved"},{a:2,n:"IsInitialThought",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsInitialThought",t:8,rt:$n[0].Boolean,fg:"IsInitialThought"},s:{a:2,n:"set_IsInitialThought",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsInitialThought"},fn:"IsInitialThought"},{a:2,n:"WinLength",t:16,rt:$n[0].Int32,g:{a:2,n:"get_WinLength",t:8,rt:$n[0].Int32,fg:"WinLength"},s:{a:2,n:"set_WinLength",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"WinLength"},fn:"WinLength"}]}});$m($n[15].SlimMind,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph],pi:[{n:"g",pt:$n[5].Graph,ps:0}],sn:"ctor"},{a:1,n:"Analyze",t:8,pi:[{n:"progress",dv:null,o:!0,pt:Function,ps:0}],sn:"Analyze$1",rt:$n[0].Boolean,p:[Function]},{a:2,n:"Analyze",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"progress",dv:null,o:!0,pt:Function,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Template,Function]},{a:1,n:"GenerateAllBoards",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"colorCount",pt:$n[0].Int32,ps:1},{n:"progress",dv:null,o:!0,pt:Function,ps:2}],sn:"GenerateAllBoards",rt:$n[0].Void,p:[$n[14].Template,$n[0].Int32,Function]},{a:1,n:"BoardIDLookup",t:16,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32),g:{a:1,n:"get_BoardIDLookup",t:8,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32),fg:"BoardIDLookup"},s:{a:1,n:"set_BoardIDLookup",t:8,p:[$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32)],rt:$n[0].Void,fs:"BoardIDLookup"},fn:"BoardIDLookup"},{a:1,n:"BoardLookup",t:16,rt:$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board),g:{a:1,n:"get_BoardLookup",t:8,rt:$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board),fg:"BoardLookup"},s:{a:1,n:"set_BoardLookup",t:8,p:[$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board)],rt:$n[0].Void,fs:"BoardLookup"},fn:"BoardLookup"},{a:2,n:"BreakerWonBoard",t:16,rt:$n[13].Board,g:{a:2,n:"get_BreakerWonBoard",t:8,rt:$n[13].Board,fg:"BreakerWonBoard"},s:{a:1,n:"set_BreakerWonBoard",t:8,p:[$n[13].Board],rt:$n[0].Void,fs:"BreakerWonBoard"},fn:"BreakerWonBoard"},{a:1,n:"ColoringAnalyzer",t:16,rt:$n[14].ColoringAnalyzer,g:{a:1,n:"get_ColoringAnalyzer",t:8,rt:$n[14].ColoringAnalyzer,fg:"ColoringAnalyzer"},s:{a:1,n:"set_ColoringAnalyzer",t:8,p:[$n[14].ColoringAnalyzer],rt:$n[0].Void,fs:"ColoringAnalyzer"},fn:"ColoringAnalyzer"},{a:2,n:"FixerWonAllNearlyColorableBoards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_FixerWonAllNearlyColorableBoards",t:8,rt:$n[0].Boolean,fg:"FixerWonAllNearlyColorableBoards"},s:{a:2,n:"set_FixerWonAllNearlyColorableBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"FixerWonAllNearlyColorableBoards"},fn:"FixerWonAllNearlyColorableBoards"},{a:1,n:"Knowledge",t:16,rt:$n[14].Knowledge,g:{a:1,n:"get_Knowledge",t:8,rt:$n[14].Knowledge,fg:"Knowledge"},s:{a:1,n:"set_Knowledge",t:8,p:[$n[14].Knowledge],rt:$n[0].Void,fs:"Knowledge"},fn:"Knowledge"},{a:2,n:"MaxPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxPot",t:8,rt:$n[0].Int32,fg:"MaxPot"},s:{a:2,n:"set_MaxPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MaxPot"},fn:"MaxPot"},{a:2,n:"MinPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MinPot",t:8,rt:$n[0].Int32,fg:"MinPot"},s:{a:2,n:"set_MinPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MinPot"},fn:"MinPot"},{a:2,n:"NearlyColorableOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_NearlyColorableOnly",t:8,rt:$n[0].Boolean,fg:"NearlyColorableOnly"},s:{a:2,n:"set_NearlyColorableOnly",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"NearlyColorableOnly"},fn:"NearlyColorableOnly"},{a:1,n:"NextBoardID",t:16,rt:$n[0].Int32,g:{a:1,n:"get_NextBoardID",t:8,rt:$n[0].Int32,fg:"NextBoardID"},s:{a:1,n:"set_NextBoardID",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"NextBoardID"},fn:"NextBoardID"},{a:1,n:"RemainingBoardIDs",t:16,rt:$n[2].List$1(System.Int32),g:{a:1,n:"get_RemainingBoardIDs",t:8,rt:$n[2].List$1(System.Int32),fg:"RemainingBoardIDs"},s:{a:1,n:"set_RemainingBoardIDs",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"RemainingBoardIDs"},fn:"RemainingBoardIDs"},{a:2,n:"StopAnalysisOnBreakerWin",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_StopAnalysisOnBreakerWin",t:8,rt:$n[0].Boolean,fg:"StopAnalysisOnBreakerWin"},s:{a:2,n:"set_StopAnalysisOnBreakerWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"StopAnalysisOnBreakerWin"},fn:"StopAnalysisOnBreakerWin"},{a:2,n:"SuperabundantOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_SuperabundantOnly",t:8,rt:$n[0].Boolean,fg:"SuperabundantOnly"},s:{a:2,n:"set_SuperabundantOnly",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"SuperabundantOnly"},fn:"SuperabundantOnly"},{a:1,n:"SwapAnalyzer",t:16,rt:$n[15].SlimSwapAnalyzer,g:{a:1,n:"get_SwapAnalyzer",t:8,rt:$n[15].SlimSwapAnalyzer,fg:"SwapAnalyzer"},s:{a:1,n:"set_SwapAnalyzer",t:8,p:[$n[15].SlimSwapAnalyzer],rt:$n[0].Void,fs:"SwapAnalyzer"},fn:"SwapAnalyzer"},{a:2,n:"TotalPositions",t:16,rt:$n[0].Int32,g:{a:2,n:"get_TotalPositions",t:8,rt:$n[0].Int32,fg:"TotalPositions"},s:{a:1,n:"set_TotalPositions",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"TotalPositions"},fn:"TotalPositions"},{a:1,n:"WonBoardIDs",t:16,rt:$n[15].SortedIntList,g:{a:1,n:"get_WonBoardIDs",t:8,rt:$n[15].SortedIntList,fg:"WonBoardIDs"},s:{a:1,n:"set_WonBoardIDs",t:8,p:[$n[15].SortedIntList],rt:$n[0].Void,fs:"WonBoardIDs"},fn:"WonBoardIDs"}]}});$m($n[15].SlimSwapAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[14].Knowledge,$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board),$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32),$n[0].Boolean],pi:[{n:"knowledge",pt:$n[14].Knowledge,ps:0},{n:"boardLookup",pt:$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board),ps:1},{n:"boardIDLookup",pt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32),ps:2},{n:"useShrubs",dv:!1,o:!0,pt:$n[0].Boolean,ps:3}],sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"boardID",pt:$n[0].Int32,ps:0},{n:"wonBoardIDs",pt:$n[15].SortedIntList,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[0].Int32,$n[15].SortedIntList]},{a:1,n:"AnalyzeShrubFree",t:8,pi:[{n:"boardID",pt:$n[0].Int32,ps:0},{n:"wonBoardIDs",pt:$n[15].SortedIntList,ps:1}],sn:"AnalyzeShrubFree",rt:$n[0].Boolean,p:[$n[0].Int32,$n[15].SortedIntList]},{a:1,n:"InitializeShrubs",t:8,pi:[{n:"boardID",pt:$n[0].Int32,ps:0},{n:"wonBoardIDs",pt:$n[15].SortedIntList,ps:1}],sn:"InitializeShrubs",rt:$n[0].Boolean,p:[$n[0].Int32,$n[15].SortedIntList]},{a:1,n:"_boardIDLookup",t:4,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.Board,System.Int32),sn:"_boardIDLookup"},{a:1,n:"_boardLookup",t:4,rt:$n[2].Dictionary$2(System.Int32,Algorithms.FixerBreaker.Board),sn:"_boardLookup"},{a:1,n:"_knowledge",t:4,rt:$n[14].Knowledge,sn:"_knowledge"},{a:1,n:"_shrubs",t:4,rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.SortedIntList))),sn:"_shrubs"},{a:1,n:"_useShrubs",t:4,rt:$n[0].Boolean,sn:"_useShrubs"}]}});$m($n[15].SortedIntList,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32],pi:[{n:"initialCapacity",dv:16,o:!0,pt:$n[0].Int32,ps:0}],sn:"ctor"},{a:2,n:"Add",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0}],sn:"Add",rt:$n[0].Void,p:[$n[0].Int32]},{a:2,n:"Contains",t:8,pi:[{n:"x",pt:$n[0].Int32,ps:0}],sn:"Contains",rt:$n[0].Boolean,p:[$n[0].Int32]},{a:1,n:"EnsureCapacity",t:8,sn:"EnsureCapacity",rt:$n[0].Void},{a:2,n:"Intersects",t:8,pi:[{n:"other",pt:$n[15].SortedIntList,ps:0}],sn:"Intersects",rt:$n[0].Boolean,p:[$n[15].SortedIntList]},{a:1,n:"_data",t:4,rt:$n[0].Array.type(System.Int32),sn:"_data"},{a:1,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"}]}});$m($n[16].BoardLexifier,function(){return{att:1048961,a:2,s:!0,m:[{a:1,n:"ToLexOrder",is:!0,t:8,pi:[{n:"stacksString",pt:$n[0].String,ps:0},{n:"pp",out:!0,pt:$n[9].Permutation,ps:1},{n:"maxPot",pt:$n[0].Int32,ps:2}],sn:"ToLexOrder",rt:$n[0].String,p:[$n[0].String,$n[9].Permutation,$n[0].Int32]},{a:2,n:"ToListStringInLexOrder",is:!0,t:8,pi:[{n:"ss",pt:$n[0].Array.type(System.Int64),ps:0},{n:"pp",out:!0,pt:$n[9].Permutation,ps:1},{n:"maxPot",dv:-1,o:!0,pt:$n[0].Int32,ps:2}],sn:"ToListStringInLexOrder",rt:$n[0].String,p:[$n[0].Array.type(System.Int64),$n[9].Permutation,$n[0].Int32]},{a:1,n:"_lookup",is:!0,t:4,rt:$n[2].Dictionary$2(System.String,System.Object),sn:"_lookup"}]}});$m($n[16].ColorPairOutcome,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Colors",t:4,rt:$n[0].Object,sn:"Colors"},{a:2,n:"FixerOutcomes",t:4,rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome),sn:"FixerOutcomes"}]}});$m($n[16].FixerOutcome,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"BreakerChoice",t:4,rt:$n[2].List$1(System.UInt64),sn:"BreakerChoice"},{a:2,n:"Exits",t:4,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),sn:"Exits"}]}});$m($n[16].GameTree,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AddChild",t:8,pi:[{n:"tree",pt:$n[16].GameTree,ps:0},{n:"info",pt:$n[16].BreakerChoiceInfo,ps:1}],sn:"AddChild$1",rt:$n[0].Void,p:[$n[16].GameTree,$n[16].BreakerChoiceInfo]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"Board",t:16,rt:$n[16].SuperSlimBoard,g:{a:2,n:"get_Board",t:8,rt:$n[16].SuperSlimBoard,fg:"Board"},s:{a:2,n:"set_Board",t:8,p:[$n[16].SuperSlimBoard],rt:$n[0].Void,fs:"Board"},fn:"Board"},{a:2,n:"GameTreeIndex",t:16,rt:$n[0].Int32,g:{a:2,n:"get_GameTreeIndex",t:8,rt:$n[0].Int32,fg:"GameTreeIndex"},s:{a:2,n:"set_GameTreeIndex",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"GameTreeIndex"},fn:"GameTreeIndex"},{a:2,n:"Info",t:16,rt:$n[16].BreakerChoiceInfo,g:{a:2,n:"get_Info",t:8,rt:$n[16].BreakerChoiceInfo,fg:"Info"},s:{a:2,n:"set_Info",t:8,p:[$n[16].BreakerChoiceInfo],rt:$n[0].Void,fs:"Info"},fn:"Info"},{a:2,n:"IsColorable",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsColorable",t:8,rt:$n[0].Boolean,fg:"IsColorable"},s:{a:2,n:"set_IsColorable",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsColorable"},fn:"IsColorable"},{a:2,n:"IsFixerWin",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsFixerWin",t:8,rt:$n[0].Boolean,fg:"IsFixerWin"},s:{a:2,n:"set_IsFixerWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsFixerWin"},fn:"IsFixerWin"},{a:2,n:"IsSuperabundant",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_IsSuperabundant",t:8,rt:$n[0].Boolean,fg:"IsSuperabundant"},s:{a:2,n:"set_IsSuperabundant",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"IsSuperabundant"},fn:"IsSuperabundant"},{a:2,n:"SameAsIndex",t:16,rt:$n[0].Int32,g:{a:2,n:"get_SameAsIndex",t:8,rt:$n[0].Int32,fg:"SameAsIndex"},s:{a:2,n:"set_SameAsIndex",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"SameAsIndex"},fn:"SameAsIndex"}]}});$m($n[16].GameTreeInfo,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Add",t:8,pi:[{n:"breakerChoice",pt:$n[2].List$1(System.UInt64),ps:0},{n:"i",pt:$n[0].Int32,ps:1},{n:"j",pt:$n[0].Int32,ps:2},{n:"fixerResponse",pt:$n[0].UInt64,ps:3}],sn:"Add",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64),$n[0].Int32,$n[0].Int32,$n[0].UInt64]}]}});$m($n[16].BreakerChoiceInfo,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Alpha",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Alpha",t:8,rt:$n[0].Int32,fg:"Alpha"},s:{a:2,n:"set_Alpha",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Alpha"},fn:"Alpha"},{a:2,n:"Beta",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Beta",t:8,rt:$n[0].Int32,fg:"Beta"},s:{a:2,n:"set_Beta",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Beta"},fn:"Beta"},{a:2,n:"Partition",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_Partition",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"Partition"},s:{a:2,n:"set_Partition",t:8,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))],rt:$n[0].Void,fs:"Partition"},fn:"Partition"},{a:2,n:"Response",t:16,rt:$n[0].UInt64,g:{a:2,n:"get_Response",t:8,rt:$n[0].UInt64,fg:"Response"},s:{a:2,n:"set_Response",t:8,p:[$n[0].UInt64],rt:$n[0].Void,fs:"Response"},fn:"Response"},{a:2,n:"SwapVertices",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_SwapVertices",t:8,rt:$n[2].List$1(System.Int32),fg:"SwapVertices"},s:{a:2,n:"set_SwapVertices",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"SwapVertices"},fn:"SwapVertices"}]}});$m($n[16].GreedyWinFilter,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimSwapAnalyzer],pi:[{n:"swapAnalyzer",pt:$n[16].SuperSlimSwapAnalyzer,ps:0}],sn:"ctor"},{ov:!0,a:2,n:"Filter",t:8,pi:[{n:"R",pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:0},{n:"W",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"Filter",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"_swapAnalyzer",t:4,rt:$n[16].SuperSlimSwapAnalyzer,sn:"_swapAnalyzer"}]}});$m($n[16].Hashing,function(){return{att:384,a:4,s:!0,m:[{n:".cctor",t:1,sn:"ctor",sm:!0},{a:2,n:"Hash",is:!0,t:8,pi:[{n:"list",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"length",pt:$n[0].Int32,ps:1}],sn:"Hash",rt:$n[0].Int32,p:[$n[0].Array.type(System.UInt64),$n[0].Int32]},{a:1,n:"MaxLength",is:!0,t:4,rt:$n[0].Int32,sn:"MaxLength"},{a:1,n:"_m",is:!0,t:4,rt:$n[2].List$1(System.UInt64),sn:"_m"}]}});$m($n[16].IWinFilter,function(){return{att:1048705,a:2,m:[{a:3,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{ab:!0,a:2,n:"Filter",t:8,pi:[{n:"R",pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:0},{n:"W",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"Filter",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]}]}});$m($n[16].SmartFilter,function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:1,n:"Analyze",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"Analyze",rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.ColorPairOutcome),p:[$n[16].SuperSlimBoard]},{a:1,n:"AnalyzeColorPair",t:8,pi:[{n:"colors",pt:$n[0].Object,ps:0},{n:"board",pt:$n[16].SuperSlimBoard,ps:1}],sn:"AnalyzeColorPair",rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.FixerOutcome),p:[$n[0].Object,$n[16].SuperSlimBoard]},{ov:!0,a:2,n:"Filter",t:8,pi:[{n:"R",pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:0},{n:"W",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"Filter",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"GetBreakerChoices",t:8,pi:[{n:"swappable",pt:$n[0].UInt64,ps:0}],sn:"GetBreakerChoices",rt:$n[2].List$1(System.Collections.Generic.List$1(System.UInt64)),p:[$n[0].UInt64]},{a:1,n:"GetFixerResponses",t:8,pi:[{n:"possibleMoves",pt:$n[2].List$1(System.UInt64),ps:0}],sn:"GetFixerResponses",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64)]},{a:1,n:"_breakerChoicesCache",t:4,rt:$n[2].Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))),sn:"_breakerChoicesCache"},{a:1,n:"_fixerResponseCount",t:4,rt:$n[0].Int32,sn:"_fixerResponseCount"},{a:1,n:"_fixerResponses",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_fixerResponses"}]}});$m($n[16].SuperSlimBoard,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt64),$n[0].Int32],pi:[{n:"trace",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"stackCount",pt:$n[0].Int32,ps:1}],sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[0].Array.type(System.UInt64),$n[0].Int32,$n[0].Int32,$n[0].UInt64,$n[0].Int32],pi:[{n:"trace",pt:$n[0].Array.type(System.UInt64),ps:0},{n:"i",pt:$n[0].Int32,ps:1},{n:"j",pt:$n[0].Int32,ps:2},{n:"swap",pt:$n[0].UInt64,ps:3},{n:"stackCount",pt:$n[0].Int32,ps:4}],sn:"$ctor1"},{a:2,n:"Create",is:!0,t:8,pi:[{n:"lists",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Object)),ps:0}],tpc:1,tprm:["T"],sn:"Create",rt:$n[0].Object,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Object))]},{a:2,n:"Equals",t:8,pi:[{n:"other",pt:$n[16].SuperSlimBoard,ps:0}],sn:"Equals",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard]},{ov:!0,a:2,n:"Equals",t:8,pi:[{n:"obj",pt:$n[0].Object,ps:0}],sn:"equals",rt:$n[0].Boolean,p:[$n[0].Object]},{a:2,n:"FromLists",is:!0,t:8,pi:[{n:"lists",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:0}],sn:"FromLists",rt:$n[16].SuperSlimBoard,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{ov:!0,a:2,n:"GetHashCode",t:8,sn:"getHashCode",rt:$n[0].Int32},{a:2,n:"GetPermutation",t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"j",pt:$n[0].Int32,ps:1},{n:"swap",pt:$n[0].UInt64,ps:2}],sn:"GetPermutation",rt:$n[9].Permutation,p:[$n[0].Int32,$n[0].Int32,$n[0].UInt64]},{a:1,n:"MakeLazyStacks",t:8,sn:"MakeLazyStacks",rt:$n[0].Void},{a:2,n:"Permute",t:8,pi:[{n:"p",pt:$n[9].Permutation,ps:0},{n:"indices",pt:$n[2].List$1(System.Int32),ps:1}],sn:"Permute",rt:$n[16].SuperSlimBoard,p:[$n[9].Permutation,$n[2].List$1(System.Int32)]},{a:2,n:"ToListStringInLexOrder",t:8,pi:[{n:"maxPot",dv:-1,o:!0,pt:$n[0].Int32,ps:0}],sn:"ToListStringInLexOrder$1",rt:$n[0].String,p:[$n[0].Int32]},{a:2,n:"ToListStringInLexOrder",t:8,pi:[{n:"pp",out:!0,pt:$n[9].Permutation,ps:0},{n:"maxPot",dv:-1,o:!0,pt:$n[0].Int32,ps:1}],sn:"ToListStringInLexOrder",rt:$n[0].String,p:[$n[9].Permutation,$n[0].Int32]},{ov:!0,a:2,n:"ToString",t:8,sn:"toString",rt:$n[0].String},{a:2,n:"Stacks",t:16,rt:$n[5].Lazy$1(System.Array.type(System.Int64)),g:{a:2,n:"get_Stacks",t:8,rt:$n[5].Lazy$1(System.Array.type(System.Int64)),fg:"Stacks"},s:{a:1,n:"set_Stacks",t:8,p:[$n[5].Lazy$1(System.Array.type(System.Int64))],rt:$n[0].Void,fs:"Stacks"},fn:"Stacks"},{a:1,n:"_hashCode",t:4,rt:$n[0].Int32,sn:"_hashCode"},{a:2,n:"_length",t:4,rt:$n[0].Int32,sn:"_length"},{a:2,n:"_stackCount",t:4,rt:$n[0].Int32,sn:"_stackCount"},{a:2,n:"_trace",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_trace"}]}});$m($n[16].SuperSlimColoringAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph,Function],pi:[{n:"lineGraph",pt:$n[5].Graph,ps:0},{n:"getEdgeColorList",pt:Function,ps:1}],sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard]},{a:2,n:"Analyze",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"coloring",out:!0,pt:$n[2].Dictionary$2(System.Int32,System.Int64),ps:1}],sn:"Analyze$1",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[2].Dictionary$2(System.Int32,System.Int64)]},{a:2,n:"AnalyzeWithoutEdge",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"coloring",out:!0,pt:$n[2].Dictionary$2(System.Int32,System.Int64),ps:1},{n:"edgeIndex",pt:$n[0].Int32,ps:2}],sn:"AnalyzeWithoutEdge",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[2].Dictionary$2(System.Int32,System.Int64),$n[0].Int32]},{a:2,n:"ColorableWithoutEdge",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"edgeIndex",pt:$n[0].Int32,ps:1}],sn:"ColorableWithoutEdge",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[0].Int32]},{a:2,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"coloring",out:!0,pt:$n[2].Dictionary$2(System.Int32,System.Int64),ps:1}],sn:"IsChoosable",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64),$n[2].Dictionary$2(System.Int32,System.Int64)]},{a:1,n:"IsChoosable",t:8,pi:[{n:"assignment",pt:$n[2].List$1(System.Int64),ps:0},{n:"v",pt:$n[0].Int32,ps:1},{n:"coloring",pt:$n[2].Dictionary$2(System.Int32,System.Int64),ps:2}],sn:"IsChoosable$1",rt:$n[0].Boolean,p:[$n[2].List$1(System.Int64),$n[0].Int32,$n[2].Dictionary$2(System.Int32,System.Int64)]},{a:1,n:"_getEdgeColorList",t:4,rt:Function,sn:"_getEdgeColorList"},{a:1,n:"_lineGraph",t:4,rt:$n[5].Graph,sn:"_lineGraph"}]}});$m($n[16].SuperSlimMind,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[5].Graph,$n[0].Boolean,$n[0].Boolean],pi:[{n:"g",pt:$n[5].Graph,ps:0},{n:"proofFindingMode",dv:!1,o:!0,pt:$n[0].Boolean,ps:1},{n:"weaklyFixable",dv:!1,o:!0,pt:$n[0].Boolean,ps:2}],sn:"ctor"},{a:1,n:"Analyze",t:8,pi:[{n:"progress",dv:null,o:!0,pt:Function,ps:0}],sn:"Analyze$1",rt:$n[0].Boolean,p:[Function]},{a:2,n:"Analyze",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"progress",dv:null,o:!0,pt:Function,ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[14].Template,Function]},{a:2,n:"BuildGameTree",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"win",dv:!0,o:!0,pt:$n[0].Boolean,ps:1}],sn:"BuildGameTree",rt:$n[16].GameTree,p:[$n[16].SuperSlimBoard,$n[0].Boolean]},{a:1,n:"BuildGameTree",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"seenBoards",pt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,System.Int32),ps:1},{n:"win",dv:!0,o:!0,pt:$n[0].Boolean,ps:2},{n:"depth",dv:0,o:!0,pt:$n[0].Int32,ps:3}],sn:"BuildGameTree$1",rt:$n[16].GameTree,p:[$n[16].SuperSlimBoard,$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,System.Int32),$n[0].Boolean,$n[0].Int32]},{a:1,n:"BuildLineGraph",t:8,sn:"BuildLineGraph",rt:$n[0].Void},{a:2,n:"ComputeAbundanceSurplus",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0}],sn:"ComputeAbundanceSurplus",rt:$n[0].Int32,p:[$n[16].SuperSlimBoard]},{a:1,n:"ComputeMatchingAbundanceShadow",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0}],sn:"ComputeMatchingAbundanceShadow",rt:$n[2].List$1(System.Int32),p:[$n[16].SuperSlimBoard]},{a:1,n:"ExistsNearlyColorableBoardForEachEdge",t:8,pi:[{n:"boards",pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:0}],sn:"ExistsNearlyColorableBoardForEachEdge",rt:$n[0].Boolean,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"GenerateAllBoards",t:8,pi:[{n:"template",pt:$n[14].Template,ps:0},{n:"colorCount",pt:$n[0].Int32,ps:1},{n:"progress",dv:null,o:!0,pt:Function,ps:2}],sn:"GenerateAllBoards",rt:$n[0].Void,p:[$n[14].Template,$n[0].Int32,Function]},{a:1,n:"GetEdgeColorList",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"e",pt:$n[0].Int32,ps:1}],sn:"GetEdgeColorList",rt:$n[0].Int64,p:[$n[16].SuperSlimBoard,$n[0].Int32]},{a:2,n:"GetWinTreeInfo",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"GetWinTreeInfo",rt:$n[16].GameTreeInfo,p:[$n[16].SuperSlimBoard]},{a:1,n:"IsMatchingAbundant",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"subset",pt:$n[0].UInt64,ps:1},{n:"e",out:!0,pt:$n[0].Int32,ps:2}],sn:"IsMatchingAbundant",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[0].UInt64,$n[0].Int32]},{a:2,n:"IsSuperabundant",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0}],sn:"IsSuperabundant",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard]},{a:1,n:"LookAtSuperabundance",t:8,sn:"LookAtSuperabundance",rt:$n[0].Void},{a:1,n:"NearlyColorableForEdge",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"edgeIndex",pt:$n[0].Int32,ps:1}],sn:"NearlyColorableForEdge",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[0].Int32]},{a:2,n:"NearlyColorableForSomeEdge",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"NearlyColorableForSomeEdge",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard]},{a:2,n:"BoardCounts",t:16,rt:$n[2].List$1(System.Int32),g:{a:2,n:"get_BoardCounts",t:8,rt:$n[2].List$1(System.Int32),fg:"BoardCounts"},s:{a:1,n:"set_BoardCounts",t:8,p:[$n[2].List$1(System.Int32)],rt:$n[0].Void,fs:"BoardCounts"},fn:"BoardCounts"},{a:2,n:"BoardCountsList",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_BoardCountsList",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"BoardCountsList"},s:{a:1,n:"set_BoardCountsList",t:8,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))],rt:$n[0].Void,fs:"BoardCountsList"},fn:"BoardCountsList"},{a:2,n:"BoardsOfDepth",t:16,rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)),g:{a:2,n:"get_BoardsOfDepth",t:8,rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)),fg:"BoardsOfDepth"},s:{a:1,n:"set_BoardsOfDepth",t:8,p:[$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard))],rt:$n[0].Void,fs:"BoardsOfDepth"},fn:"BoardsOfDepth"},{a:2,n:"BreakerWonBoard",t:16,rt:$n[16].SuperSlimBoard,g:{a:2,n:"get_BreakerWonBoard",t:8,rt:$n[16].SuperSlimBoard,fg:"BreakerWonBoard"},s:{a:1,n:"set_BreakerWonBoard",t:8,p:[$n[16].SuperSlimBoard],rt:$n[0].Void,fs:"BreakerWonBoard"},fn:"BreakerWonBoard"},{a:2,n:"BreakerWonBoards",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),g:{a:2,n:"get_BreakerWonBoards",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),fg:"BreakerWonBoards"},s:{a:1,n:"set_BreakerWonBoards",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)],rt:$n[0].Void,fs:"BreakerWonBoards"},fn:"BreakerWonBoards"},{a:2,n:"ColorableBoards",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),g:{a:2,n:"get_ColorableBoards",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),fg:"ColorableBoards"},s:{a:1,n:"set_ColorableBoards",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)],rt:$n[0].Void,fs:"ColorableBoards"},fn:"ColorableBoards"},{a:2,n:"ColoringAnalyzer",t:16,rt:$n[16].SuperSlimColoringAnalyzer,g:{a:2,n:"get_ColoringAnalyzer",t:8,rt:$n[16].SuperSlimColoringAnalyzer,fg:"ColoringAnalyzer"},fn:"ColoringAnalyzer"},{a:2,n:"ExcludeNonNearlyColorableNonSuperabundantBoards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_ExcludeNonNearlyColorableNonSuperabundantBoards",t:8,rt:$n[0].Boolean,fg:"ExcludeNonNearlyColorableNonSuperabundantBoards"},s:{a:2,n:"set_ExcludeNonNearlyColorableNonSuperabundantBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"ExcludeNonNearlyColorableNonSuperabundantBoards"},fn:"ExcludeNonNearlyColorableNonSuperabundantBoards"},{a:2,n:"ExtraPsi",t:16,rt:$n[0].Int32,g:{a:2,n:"get_ExtraPsi",t:8,rt:$n[0].Int32,fg:"ExtraPsi"},s:{a:2,n:"set_ExtraPsi",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"ExtraPsi"},fn:"ExtraPsi"},{a:2,n:"FixerWonAllNearlyColorableBoards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_FixerWonAllNearlyColorableBoards",t:8,rt:$n[0].Boolean,fg:"FixerWonAllNearlyColorableBoards"},s:{a:1,n:"set_FixerWonAllNearlyColorableBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"FixerWonAllNearlyColorableBoards"},fn:"FixerWonAllNearlyColorableBoards"},{a:2,n:"FixerWonBoards",t:16,rt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),g:{a:2,n:"get_FixerWonBoards",t:8,rt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),fg:"FixerWonBoards"},fn:"FixerWonBoards"},{a:2,n:"HasNonSuperabundantBoardThatIsNearlyColorable",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_HasNonSuperabundantBoardThatIsNearlyColorable",t:8,rt:$n[0].Boolean,fg:"HasNonSuperabundantBoardThatIsNearlyColorable"},s:{a:1,n:"set_HasNonSuperabundantBoardThatIsNearlyColorable",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"HasNonSuperabundantBoardThatIsNearlyColorable"},fn:"HasNonSuperabundantBoardThatIsNearlyColorable"},{a:2,n:"MaxPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MaxPot",t:8,rt:$n[0].Int32,fg:"MaxPot"},s:{a:2,n:"set_MaxPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MaxPot"},fn:"MaxPot"},{a:2,n:"MinPot",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MinPot",t:8,rt:$n[0].Int32,fg:"MinPot"},s:{a:2,n:"set_MinPot",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MinPot"},fn:"MinPot"},{a:2,n:"MissingEdgeIndex",t:16,rt:$n[0].Int32,g:{a:2,n:"get_MissingEdgeIndex",t:8,rt:$n[0].Int32,fg:"MissingEdgeIndex"},s:{a:2,n:"set_MissingEdgeIndex",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"MissingEdgeIndex"},fn:"MissingEdgeIndex"},{a:2,n:"NonColorableBoards",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),g:{a:2,n:"get_NonColorableBoards",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),fg:"NonColorableBoards"},s:{a:1,n:"set_NonColorableBoards",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)],rt:$n[0].Void,fs:"NonColorableBoards"},fn:"NonColorableBoards"},{a:2,n:"OnlyConsiderNearlyColorableBoards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_OnlyConsiderNearlyColorableBoards",t:8,rt:$n[0].Boolean,fg:"OnlyConsiderNearlyColorableBoards"},s:{a:2,n:"set_OnlyConsiderNearlyColorableBoards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"OnlyConsiderNearlyColorableBoards"},fn:"OnlyConsiderNearlyColorableBoards"},{a:2,n:"PerformCompleteAnalysis",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_PerformCompleteAnalysis",t:8,rt:$n[0].Boolean,fg:"PerformCompleteAnalysis"},s:{a:2,n:"set_PerformCompleteAnalysis",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"PerformCompleteAnalysis"},fn:"PerformCompleteAnalysis"},{a:2,n:"SuperabundantOnly",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_SuperabundantOnly",t:8,rt:$n[0].Boolean,fg:"SuperabundantOnly"},s:{a:2,n:"set_SuperabundantOnly",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"SuperabundantOnly"},fn:"SuperabundantOnly"},{a:2,n:"ThinkHarder",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_ThinkHarder",t:8,rt:$n[0].Boolean,fg:"ThinkHarder"},s:{a:2,n:"set_ThinkHarder",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"ThinkHarder"},fn:"ThinkHarder"},{a:2,n:"TotalPositions",t:16,rt:$n[0].Int32,g:{a:2,n:"get_TotalPositions",t:8,rt:$n[0].Int32,fg:"TotalPositions"},fn:"TotalPositions"},{a:1,n:"WinFilter",t:16,rt:$n[16].IWinFilter,g:{a:1,n:"get_WinFilter",t:8,rt:$n[16].IWinFilter,fg:"WinFilter"},s:{a:1,n:"set_WinFilter",t:8,p:[$n[16].IWinFilter],rt:$n[0].Void,fs:"WinFilter"},fn:"WinFilter"},{a:1,n:"_coloringAnalyzer",t:4,rt:$n[16].SuperSlimColoringAnalyzer,sn:"_coloringAnalyzer"},{a:2,n:"_edges",t:4,rt:$n[2].List$1(System.Object),sn:"_edges"},{a:1,n:"_gameTreeIndex",t:4,rt:$n[0].Int32,sn:"_gameTreeIndex"},{a:1,n:"_graph",t:4,rt:$n[5].Graph,sn:"_graph"},{a:1,n:"_lineGraph",t:4,rt:$n[5].Graph,sn:"_lineGraph"},{a:1,n:"_remainingBoards",t:4,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),sn:"_remainingBoards"},{a:1,n:"_swapAnalyzer",t:4,rt:$n[16].SuperSlimSwapAnalyzer,sn:"_swapAnalyzer"},{a:1,n:"_totalPositions",t:4,rt:$n[0].Int32,sn:"_totalPositions"},{a:1,n:"_wonBoards",t:4,rt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),sn:"_wonBoards"}]}});$m($n[16].SuperSlimSwapAnalyzer,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[0].Int32,$n[0].Boolean,$n[0].Boolean],pi:[{n:"n",pt:$n[0].Int32,ps:0},{n:"proofFindingMode",dv:!1,o:!0,pt:$n[0].Boolean,ps:1},{n:"weaklyFixable",dv:!1,o:!0,pt:$n[0].Boolean,ps:2}],sn:"ctor"},{a:2,n:"Analyze",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"wonBoards",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"Analyze",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"AnalyzeForProofInternal",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"wonBoards",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"AnalyzeForProofInternal",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"AnalyzeInternal",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"wonBoards",pt:$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:1}],sn:"AnalyzeInternal",rt:$n[0].Boolean,p:[$n[16].SuperSlimBoard,$n[2].HashSet$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"GetBreakerChoices",t:8,pi:[{n:"swappable",pt:$n[0].UInt64,ps:0}],sn:"GetBreakerChoices",rt:$n[2].List$1(System.Collections.Generic.List$1(System.UInt64)),p:[$n[0].UInt64]},{a:1,n:"GetFixerResponses",t:8,pi:[{n:"possibleMoves",pt:$n[2].List$1(System.UInt64),ps:0}],sn:"GetFixerResponses",rt:$n[0].Void,p:[$n[2].List$1(System.UInt64)]},{a:2,n:"LastWinChildCount",t:16,rt:$n[0].Int32,g:{a:2,n:"get_LastWinChildCount",t:8,rt:$n[0].Int32,fg:"LastWinChildCount"},s:{a:1,n:"set_LastWinChildCount",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"LastWinChildCount"},fn:"LastWinChildCount"},{a:2,n:"LossTreeInfo",t:16,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo),g:{a:2,n:"get_LossTreeInfo",t:8,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo),fg:"LossTreeInfo"},s:{a:1,n:"set_LossTreeInfo",t:8,p:[$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo)],rt:$n[0].Void,fs:"LossTreeInfo"},fn:"LossTreeInfo"},{a:1,n:"ProofFindingMode",t:16,rt:$n[0].Boolean,g:{a:1,n:"get_ProofFindingMode",t:8,rt:$n[0].Boolean,fg:"ProofFindingMode"},s:{a:1,n:"set_ProofFindingMode",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"ProofFindingMode"},fn:"ProofFindingMode"},{a:1,n:"WeaklyFixable",t:16,rt:$n[0].Boolean,g:{a:1,n:"get_WeaklyFixable",t:8,rt:$n[0].Boolean,fg:"WeaklyFixable"},s:{a:1,n:"set_WeaklyFixable",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"WeaklyFixable"},fn:"WeaklyFixable"},{a:2,n:"WinTreeInfo",t:16,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo),g:{a:2,n:"get_WinTreeInfo",t:8,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo),fg:"WinTreeInfo"},s:{a:1,n:"set_WinTreeInfo",t:8,p:[$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.GameTreeInfo)],rt:$n[0].Void,fs:"WinTreeInfo"},fn:"WinTreeInfo"},{a:1,n:"_breakerChoicesCache",t:4,rt:$n[2].Dictionary$2(System.UInt64,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.UInt64))),sn:"_breakerChoicesCache"},{a:1,n:"_fixerResponseCount",t:4,rt:$n[0].Int32,sn:"_fixerResponseCount"},{a:1,n:"_fixerResponses",t:4,rt:$n[0].Array.type(System.UInt64),sn:"_fixerResponses"}]}});$m($n[21].ArbitraryDegreeProofBuilder,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimMind,$n[0].String,$n[0].Boolean],pi:[{n:"mind",pt:$n[16].SuperSlimMind,ps:0},{n:"figureTikz",dv:"",o:!0,pt:$n[0].String,ps:1},{n:"usePermutations",dv:!1,o:!0,pt:$n[0].Boolean,ps:2}],sn:"ctor"},{a:1,n:"AddFigure",t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0}],sn:"AddFigure",rt:$n[0].Void,p:[$n[3].StringBuilder]},{a:3,n:"BeginProof",is:!0,t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0}],sn:"BeginProof",rt:$n[0].Void,p:[$n[3].StringBuilder]},{a:1,n:"CheckPermutationGoodNess",t:8,pi:[{n:"alpha",pt:$n[0].Int32,ps:0},{n:"beta",pt:$n[0].Int32,ps:1},{n:"stacksString",pt:$n[0].String,ps:2},{n:"swapVertices",pt:$n[2].List$1(System.Int32),ps:3}],sn:"CheckPermutationGoodNess",rt:$n[0].Boolean,p:[$n[0].Int32,$n[0].Int32,$n[0].String,$n[2].List$1(System.Int32)]},{a:3,n:"EndProof",is:!0,t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0}],sn:"EndProof",rt:$n[0].Void,p:[$n[3].StringBuilder]},{a:1,n:"GeneralizeAllBoards",t:8,pi:[{n:"sb",pt:$n[3].StringBuilder,ps:0}],sn:"GeneralizeAllBoards",rt:$n[0].Void,p:[$n[3].StringBuilder]},{a:1,n:"GeneralizeBoards",t:8,pi:[{n:"boards",pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:0}],sn:"GeneralizeBoards",rt:$n[0].String,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)]},{a:1,n:"GeneratePossibleLists",t:8,sn:"GeneratePossibleLists",rt:$n[0].Void},{a:1,n:"GetChildBoardName",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"bc",pt:$n[16].BreakerChoiceInfo,ps:1}],sn:"GetChildBoardName",rt:$n[0].String,p:[$n[16].SuperSlimBoard,$n[16].BreakerChoiceInfo]},{a:1,n:"ToListIndices",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0}],sn:"ToListIndices",rt:$n[2].List$1(System.Int32),p:[$n[16].SuperSlimBoard]},{ov:!0,a:2,n:"WriteProof",t:8,sn:"WriteProof",rt:$n[0].String},{a:2,n:"UseWildCards",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_UseWildCards",t:8,rt:$n[0].Boolean,fg:"UseWildCards"},s:{a:2,n:"set_UseWildCards",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"UseWildCards"},fn:"UseWildCards"},{a:1,n:"_activeIndices",t:4,rt:$n[2].List$1(System.Int32),sn:"_activeIndices"},{a:1,n:"_activeListSizes",t:4,rt:$n[2].List$1(System.Int32),sn:"_activeListSizes"},{a:1,n:"_allBoards",t:4,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),sn:"_allBoards"},{a:1,n:"_figureTikz",t:4,rt:$n[0].String,sn:"_figureTikz"},{a:1,n:"_isWin",t:4,rt:$n[0].Boolean,sn:"_isWin"},{a:1,n:"_maxPot",t:4,rt:$n[0].Int32,sn:"_maxPot"},{a:1,n:"_orderFilter",t:4,rt:$n[2].Dictionary$2(System.String,System.String),sn:"_orderFilter"},{a:1,n:"_possibleListIndices",t:4,rt:$n[2].List$1(System.Int32),sn:"_possibleListIndices"},{a:1,n:"_possibleLists",t:4,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),sn:"_possibleLists"},{a:1,n:"_sequenceComparer",t:4,rt:$n[9].SequenceGeneralizer$1.VectorComparer(System.Int32),sn:"_sequenceComparer"},{a:1,n:"_sequenceGeneralizer",t:4,rt:$n[9].SequenceGeneralizer$1(System.Int32),sn:"_sequenceGeneralizer"}]}});$m($n[21].Extensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"Distinct",is:!0,t:8,pi:[{n:"list",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"value",pt:Function,ps:1}],tpc:2,tprm:["T","S"],sn:"Distinct",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),Function]},{a:2,n:"Except",is:!0,t:8,pi:[{n:"list",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"t",pt:System.Object,ps:1}],tpc:1,tprm:["T"],sn:"Except",rt:$n[2].IEnumerable$1(System.Object),p:[$n[2].IEnumerable$1(System.Object),System.Object]},{a:2,n:"GetArticle",is:!0,t:8,pi:[{n:"letter",pt:$n[0].String,ps:0}],sn:"GetArticle",rt:$n[0].String,p:[$n[0].String]},{a:2,n:"Listify",is:!0,t:8,pi:[{n:"strings",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"connector",dv:"and",o:!0,pt:$n[0].String,ps:1}],tpc:1,tprm:["T"],sn:"Listify",rt:$n[0].String,p:[$n[2].IEnumerable$1(System.Object),$n[0].String]},{a:2,n:"MaxIndex",is:!0,t:8,pi:[{n:"list",pt:$n[2].IEnumerable$1(System.Object),ps:0},{n:"value",pt:Function,ps:1}],tpc:1,tprm:["T"],sn:"MaxIndex",rt:$n[0].Int32,p:[$n[2].IEnumerable$1(System.Object),Function]},{a:2,n:"Wordify",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"Wordify",rt:$n[0].String,p:[$n[0].Int32]}]}});$m($n[21].MaximumDegreeThreeProofBuilder,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimMind,$n[0].String],pi:[{n:"mind",pt:$n[16].SuperSlimMind,ps:0},{n:"figureTikz",dv:"",o:!0,pt:$n[0].String,ps:1}],sn:"ctor"},{a:1,n:"GetChildBoardName",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"bc",pt:$n[16].BreakerChoiceInfo,ps:1}],sn:"GetChildBoardName",rt:$n[0].String,p:[$n[16].SuperSlimBoard,$n[16].BreakerChoiceInfo]},{ov:!0,a:2,n:"WriteProof",t:8,sn:"WriteProof",rt:$n[0].String},{a:1,n:"_figureTikz",t:4,rt:$n[0].String,sn:"_figureTikz"}]}});$m($n[21].PermutationAwareProofBuilder,function(){return{att:1048705,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimMind,$n[0].Boolean],pi:[{n:"mind",pt:$n[16].SuperSlimMind,ps:0},{n:"usePermutations",dv:!1,o:!0,pt:$n[0].Boolean,ps:1}],sn:"ctor"},{ov:!0,a:3,n:"ExtractCases",t:8,sn:"ExtractCases",rt:$n[0].Void},{ov:!0,a:3,n:"GetHandledCaseNumber",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"bc",pt:$n[16].BreakerChoiceInfo,ps:1}],sn:"GetHandledCaseNumber",rt:$n[0].Int32,p:[$n[16].SuperSlimBoard,$n[16].BreakerChoiceInfo]},{a:3,n:"_permutationLinked",t:4,rt:$n[2].Dictionary$2(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard,System.Collections.Generic.List$1(System.Object)),sn:"_permutationLinked"}]}});$m($n[21].ProofBuilder,function(){return{att:1048705,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimMind,$n[0].Boolean],pi:[{n:"mind",pt:$n[16].SuperSlimMind,ps:0},{n:"usePermutations",dv:!1,o:!0,pt:$n[0].Boolean,ps:1}],sn:"ctor"},{v:!0,a:3,n:"ExtractCases",t:8,sn:"ExtractCases",rt:$n[0].Void},{v:!0,a:3,n:"GetHandledCaseNumber",t:8,pi:[{n:"b",pt:$n[16].SuperSlimBoard,ps:0},{n:"bc",pt:$n[16].BreakerChoiceInfo,ps:1}],sn:"GetHandledCaseNumber",rt:$n[0].Int32,p:[$n[16].SuperSlimBoard,$n[16].BreakerChoiceInfo]},{ab:!0,a:2,n:"WriteProof",t:8,sn:"WriteProof",rt:$n[0].String},{a:2,n:"Cases",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase),g:{a:2,n:"get_Cases",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase),fg:"Cases"},s:{a:3,n:"set_Cases",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.Proofs.ProofCase)],rt:$n[0].Void,fs:"Cases"},fn:"Cases"},{a:2,n:"Mind",t:16,rt:$n[16].SuperSlimMind,g:{a:2,n:"get_Mind",t:8,rt:$n[16].SuperSlimMind,fg:"Mind"},s:{a:1,n:"set_Mind",t:8,p:[$n[16].SuperSlimMind],rt:$n[0].Void,fs:"Mind"},fn:"Mind"},{a:2,n:"UsePermutations",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_UsePermutations",t:8,rt:$n[0].Boolean,fg:"UsePermutations"},s:{a:2,n:"set_UsePermutations",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"UsePermutations"},fn:"UsePermutations"}]}});$m($n[21].ProofCase,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[16].SuperSlimMind,$n[0].Int32,$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)],pi:[{n:"mind",pt:$n[16].SuperSlimMind,ps:0},{n:"caseNumber",pt:$n[0].Int32,ps:1},{n:"boards",dv:null,o:!0,pt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),ps:2}],sn:"ctor"},{a:2,n:"AddBoard",t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"AddBoard",rt:$n[0].Void,p:[$n[16].SuperSlimBoard]},{a:2,n:"Boards",t:16,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),g:{a:2,n:"get_Boards",t:8,rt:$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard),fg:"Boards"},s:{a:1,n:"set_Boards",t:8,p:[$n[2].List$1(Algorithms.FixerBreaker.KnowledgeEngine.Slim.Super.SuperSlimBoard)],rt:$n[0].Void,fs:"Boards"},fn:"Boards"},{a:2,n:"BreakerWin",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_BreakerWin",t:8,rt:$n[0].Boolean,fg:"BreakerWin"},s:{a:2,n:"set_BreakerWin",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"BreakerWin"},fn:"BreakerWin"},{a:2,n:"CaseNumber",t:16,rt:$n[0].Int32,g:{a:2,n:"get_CaseNumber",t:8,rt:$n[0].Int32,fg:"CaseNumber"},s:{a:1,n:"set_CaseNumber",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"CaseNumber"},fn:"CaseNumber"},{a:2,n:"Mind",t:16,rt:$n[16].SuperSlimMind,g:{a:2,n:"get_Mind",t:8,rt:$n[16].SuperSlimMind,fg:"Mind"},s:{a:1,n:"set_Mind",t:8,p:[$n[16].SuperSlimMind],rt:$n[0].Void,fs:"Mind"},fn:"Mind"},{a:2,n:"Superabundant",t:16,rt:$n[0].Boolean,g:{a:2,n:"get_Superabundant",t:8,rt:$n[0].Boolean,fg:"Superabundant"},s:{a:2,n:"set_Superabundant",t:8,p:[$n[0].Boolean],rt:$n[0].Void,fs:"Superabundant"},fn:"Superabundant"}]}});$m($n[22].Extensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"GetXYZIndex",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"b",pt:$n[16].SuperSlimBoard,ps:1}],sn:"GetXYZIndex",rt:$n[0].Int32,p:[$n[0].Int32,$n[16].SuperSlimBoard]},{a:2,n:"To012",is:!0,t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"To012",rt:$n[2].List$1(System.Int32),p:[$n[16].SuperSlimBoard]},{a:2,n:"To012",is:!0,t:8,pi:[{n:"stack",pt:$n[0].Int64,ps:0}],sn:"To012$1",rt:$n[0].Int32,p:[$n[0].Int64]},{a:2,n:"ToCompactedPartitionId",is:!0,t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"partition",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"ToCompactedPartitionId",rt:$n[0].String,p:[$n[16].SuperSlimBoard,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"ToPartitionId",is:!0,t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0},{n:"partition",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"ToPartitionId",rt:$n[0].String,p:[$n[16].SuperSlimBoard,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"ToPartitionId",is:!0,t:8,pi:[{n:"xyz",pt:$n[2].List$1(System.String),ps:0},{n:"partition",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1}],sn:"ToPartitionId$1",rt:$n[0].String,p:[$n[2].List$1(System.String),$n[2].List$1(System.Collections.Generic.List$1(System.Int32))]},{a:2,n:"ToTex",is:!0,t:8,pi:[{n:"matcher",pt:$n[9].SequenceGeneralizer$1.Matcher(System.Int32),ps:0}],sn:"ToTex",rt:$n[0].String,p:[$n[9].SequenceGeneralizer$1.Matcher(System.Int32)]},{a:2,n:"ToXYZ",is:!0,t:8,pi:[{n:"board",pt:$n[16].SuperSlimBoard,ps:0}],sn:"ToXYZ",rt:$n[0].String,p:[$n[16].SuperSlimBoard]},{a:2,n:"ToXYZ",is:!0,t:8,pi:[{n:"stack",pt:$n[0].Int64,ps:0}],sn:"ToXYZ$1",rt:$n[0].String,p:[$n[0].Int64]},{a:1,n:"Alphabet",is:!0,t:4,rt:$n[0].String,sn:"Alphabet"}]}});$m($n[23].Extensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"GetActiveListIndex",is:!0,t:8,pi:[{n:"i",pt:$n[0].Int32,ps:0},{n:"b",pt:$n[16].SuperSlimBoard,ps:1},{n:"maxPot",pt:$n[0].Int32,ps:2}],sn:"GetActiveListIndex",rt:$n[0].Int32,p:[$n[0].Int32,$n[16].SuperSlimBoard,$n[0].Int32]},{a:2,n:"ToTex",is:!0,t:8,pi:[{n:"matcher",pt:$n[9].SequenceGeneralizer$1.Matcher(System.Int32),ps:0},{n:"lists",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:1},{n:"listSize",pt:$n[0].Int32,ps:2}],sn:"ToTex",rt:$n[0].String,p:[$n[9].SequenceGeneralizer$1.Matcher(System.Int32),$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),$n[0].Int32]}]}});$m($n[24].BranchGenerator,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"EnumerateBranches",is:!0,t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"colorPair",pt:$n[0].Object,ps:1}],sn:"EnumerateBranches",rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Chronicle.ChronicledBranch),p:[$n[13].Board,$n[0].Object]},{a:2,n:"EnumerateExactlyOneIntersecters",is:!0,t:8,pi:[{n:"board",pt:$n[13].Board,ps:0},{n:"colorPair",pt:$n[0].Object,ps:1}],sn:"EnumerateExactlyOneIntersecters",rt:$n[2].IEnumerable$1(System.Int32),p:[$n[13].Board,$n[0].Object]},{a:1,n:"EnumeratePartitions",is:!0,t:8,pi:[{n:"indices",pt:$n[2].List$1(System.Int32),ps:0}],sn:"EnumeratePartitions",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[2].List$1(System.Int32)]},{a:1,n:"EnumeratePartitions",is:!0,t:8,pi:[{n:"n",pt:$n[0].Int32,ps:0}],sn:"EnumeratePartitions$1",rt:$n[2].IEnumerable$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Int32]},{a:2,n:"GetPartitions",is:!0,t:8,pi:[{n:"count",pt:$n[0].Int32,ps:0}],sn:"GetPartitions",rt:$n[2].List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))),p:[$n[0].Int32]},{a:1,n:"PartitionsCache",is:!0,t:4,rt:$n[2].Dictionary$2(System.Int32,System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)))),sn:"PartitionsCache"}]}});$m($n[24].ChronicledBranch,function(){return{att:1048577,a:2,m:[{a:2,n:".ctor",t:1,p:[$n[2].List$1(System.Int32),$n[0].Int32,$n[0].Int32,$n[2].List$1(System.Collections.Generic.List$1(System.Int32))],pi:[{n:"S",pt:$n[2].List$1(System.Int32),ps:0},{n:"alpha",pt:$n[0].Int32,ps:1},{n:"beta",pt:$n[0].Int32,ps:2},{n:"partitions",pt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),ps:3}],sn:"ctor"},{a:1,n:"EnumerateMoves",t:8,pi:[{n:"cf",pt:$n[2].List$1(System.Boolean),ps:0}],sn:"EnumerateMoves",rt:$n[2].IEnumerable$1(Algorithms.FixerBreaker.Move),p:[$n[2].List$1(System.Boolean)]},{a:2,n:"GetEnumerator",t:8,sn:"getEnumerator",rt:$n[2].IEnumerator$1(System.Collections.Generic.IEnumerable$1(Algorithms.FixerBreaker.Move))},{a:2,n:"Alpha",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Alpha",t:8,rt:$n[0].Int32,fg:"Alpha"},s:{a:1,n:"set_Alpha",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Alpha"},fn:"Alpha"},{a:2,n:"Beta",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Beta",t:8,rt:$n[0].Int32,fg:"Beta"},s:{a:1,n:"set_Beta",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Beta"},fn:"Beta"},{a:2,n:"SwapComponents",t:16,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),g:{a:2,n:"get_SwapComponents",t:8,rt:$n[2].List$1(System.Collections.Generic.List$1(System.Int32)),fg:"SwapComponents"},s:{a:1,n:"set_SwapComponents",t:8,p:[$n[2].List$1(System.Collections.Generic.List$1(System.Int32))],rt:$n[0].Void,fs:"SwapComponents"},fn:"SwapComponents"}]}});$m($n[17].Bijection$2,function(D,C){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Apply",t:8,pi:[{n:"e",pt:$n[2].IEnumerable$1(D),ps:0}],sn:"Apply$1",rt:$n[2].IEnumerable$1(C),p:[$n[2].IEnumerable$1(D)]},{a:2,n:"Apply",t:8,pi:[{n:"e",pt:$n[2].IEnumerable$1(C),ps:0}],sn:"Apply",rt:$n[2].IEnumerable$1(D),p:[$n[2].IEnumerable$1(C)]},{a:2,n:"Item",t:16,rt:C,p:[D],i:!0,ipi:[{n:"d",pt:D,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"d",pt:D,ps:0}],sn:"getItem",rt:C,p:[D]},s:{a:2,n:"set_Item",t:8,pi:[{n:"d",pt:D,ps:0},{n:"value",pt:C,ps:1}],sn:"setItem",rt:$n[0].Void,p:[D,C]}},{a:2,n:"Item",t:16,rt:D,p:[C],i:!0,ipi:[{n:"c",pt:C,ps:0}],g:{a:2,n:"get_Item",t:8,pi:[{n:"c",pt:C,ps:0}],sn:"getItem$1",rt:D,p:[C]},s:{a:2,n:"set_Item",t:8,pi:[{n:"c",pt:C,ps:0},{n:"value",pt:D,ps:1}],sn:"setItem$1",rt:$n[0].Void,p:[C,D]}},{a:1,n:"_f",t:4,rt:$n[2].Dictionary$2(D,C),sn:"_f"},{a:1,n:"_finverse",t:4,rt:$n[2].Dictionary$2(C,D),sn:"_finverse"}]}});$m($n[17].BijectionExtensions,function(){return{att:1048961,a:2,s:!0,m:[{a:2,n:"NumberObjects",is:!0,t:8,pi:[{n:"objects",pt:$n[2].IEnumerable$1(System.Object),ps:0}],tpc:1,tprm:["T"],sn:"NumberObjects",rt:$n[17].Bijection$2(System.Int32,System.Object),p:[$n[2].IEnumerable$1(System.Object)]}]}});$m($n[17].UnionFind$1,function(T){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Find",t:8,pi:[{n:"n",pt:$n[17].UnionFind$1.Node(T),ps:0}],sn:"Find",rt:$n[17].UnionFind$1.Node(T),p:[$n[17].UnionFind$1.Node(T)]},{a:2,n:"MakeSet",t:8,pi:[{n:"t",pt:T,ps:0}],sn:"MakeSet",rt:$n[17].UnionFind$1.Node(T),p:[T]},{v:!0,a:3,n:"RootAdded",t:8,pi:[{n:"n",pt:$n[17].UnionFind$1.Node(T),ps:0}],sn:"RootAdded",rt:$n[0].Void,p:[$n[17].UnionFind$1.Node(T)]},{v:!0,a:3,n:"RootRemoved",t:8,pi:[{n:"n",pt:$n[17].UnionFind$1.Node(T),ps:0}],sn:"RootRemoved",rt:$n[0].Void,p:[$n[17].UnionFind$1.Node(T)]},{a:2,n:"Union",t:8,pi:[{n:"nx",pt:$n[17].UnionFind$1.Node(T),ps:0},{n:"ny",pt:$n[17].UnionFind$1.Node(T),ps:1}],sn:"Union",rt:$n[0].Void,p:[$n[17].UnionFind$1.Node(T),$n[17].UnionFind$1.Node(T)]}]}});$m($n[17].UnionFind$1.Node,function(T){return{td:$n[17].UnionFind$1(T),att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Parent",t:16,rt:$n[17].UnionFind$1.Node(T),g:{a:2,n:"get_Parent",t:8,rt:$n[17].UnionFind$1.Node(T),fg:"Parent"},s:{a:2,n:"set_Parent",t:8,p:[$n[17].UnionFind$1.Node(T)],rt:$n[0].Void,fs:"Parent"},fn:"Parent"},{a:2,n:"Rank",t:16,rt:$n[0].Int32,g:{a:2,n:"get_Rank",t:8,rt:$n[0].Int32,fg:"Rank"},s:{a:2,n:"set_Rank",t:8,p:[$n[0].Int32],rt:$n[0].Void,fs:"Rank"},fn:"Rank"},{a:2,n:"T",t:16,rt:T,g:{a:2,n:"get_T",t:8,rt:T,fg:"T"},s:{a:2,n:"set_T",t:8,p:[T],rt:$n[0].Void,fs:"T"},fn:"T"}]}});$m($n[17].UnionFindTrackedRoots$1,function(T){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"FindAllExcept",t:8,pi:[{n:"nodes",pt:$n[2].IEnumerable$1(Algorithms.DataStructures.UnionFind$1.Node(T)),ps:0}],sn:"FindAllExcept",rt:$n[2].IEnumerable$1(Algorithms.DataStructures.UnionFind$1.Node(T)),p:[$n[2].IEnumerable$1(Algorithms.DataStructures.UnionFind$1.Node(T))]},{ov:!0,a:3,n:"RootAdded",t:8,pi:[{n:"n",pt:$n[17].UnionFind$1.Node(T),ps:0}],sn:"RootAdded",rt:$n[0].Void,p:[$n[17].UnionFind$1.Node(T)]},{ov:!0,a:3,n:"RootRemoved",t:8,pi:[{n:"n",pt:$n[17].UnionFind$1.Node(T),ps:0}],sn:"RootRemoved",rt:$n[0].Void,p:[$n[17].UnionFind$1.Node(T)]},{a:1,n:"_roots",t:4,rt:$n[2].List$1(Algorithms.DataStructures.UnionFind$1.Node(T)),sn:"_roots"}]}})});